<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="SetEnvironmentVariable" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <EnvKey ParameterType="System.String" Required="true" />
      <EnvValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            try {
                Environment.SetEnvironmentVariable(EnvKey, EnvValue, System.EnvironmentVariableTarget.Process);
            }
            catch  {
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Global properties for all analyzers -->

  <PropertyGroup>
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>
    <!-- If we didn't find the first registry path, assume we're in a 64bit process. -->
    <!-- read registry from Wow6432Node -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VisualStudio\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>

    <!-- if we didn't find the registry path yet, then try Win8 Express location -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VSWinExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>
    <!-- If we didn't find the registry path yet, then try Win8 Express 64-bit location -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VSWinExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>

    <!-- If we didn't find the registry path yet, try WP Express locations -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VPDExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>
    <!-- If we didn't find the registry path yet, try WP Express 64-bit locations -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VPDExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>

    <!-- If we didn't find the registry path yet, try WD Express locations -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\WDExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>
    <!-- If we didn't find the registry path yet, try WD Express 64-bit locations -->
    <CodeAnalysisStaticAnalysisDirectory Condition="'$(CodeAnalysisStaticAnalysisDirectory)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\WDExpress\12.0\Setup\EDev@StanDir)</CodeAnalysisStaticAnalysisDirectory>


    <!-- Default rule set search paths -->
    <CodeAnalysisRuleSetDirectories Condition=
            "'$(CodeAnalysisIgnoreBuiltInRuleSets)'!='true' and
             '$(CodeAnalysisStaticAnalysisDirectory)'!=''">$(CodeAnalysisRuleSetDirectories);$(CodeAnalysisStaticAnalysisDirectory)\Rule Sets</CodeAnalysisRuleSetDirectories>

    <!-- 
         In scenario where we run CA from command-line , we don't get "CodeAnalysisVSSku" variable passed by the IDE, so in case of Express-only installation
         we attempt to load rule sets that are only present on Pro and above - and fail. Let's assume we're in "Express" mode if the Pro+ rule set doesn't exist.
     -->
    <CodeAnalysisVSSku Condition="'$(CodeAnalysisVSSku)'=='' and !Exists('$(CodeAnalysisStaticAnalysisDirectory)\Rule Sets\NativeRecommendedRules.ruleset')">Express</CodeAnalysisVSSku>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RunCodeAnalysis)'=='true' or '$(RunCodeAnalysisOnce)'=='true'">
  <!-- 
       - Checking whether we should run Code Analysis only on specific project in the solution
       - Combine all variables into one "master" control variable to simplify conditions further below  
   -->
  <RunCodeAnalysisOnThisProject>true</RunCodeAnalysisOnThisProject>
  <RunCodeAnalysisOnThisProject Condition="'$(CodeAnalysisProjectFullPath)'!='' and '$(MSBuildProjectFullPath)'!='' and '$(MSBuildProjectFullPath)'!='$(CodeAnalysisProjectFullPath)'">false</RunCodeAnalysisOnThisProject>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RunCodeAnalysisOnThisProject)'=='true'">
    <!-- Define the CODE_ANALYSIS constant -->
    <DefineConstants Condition="'$(Language)'=='C#' ">CODE_ANALYSIS;$(DefineConstants)</DefineConstants>
    <FinalDefineConstants Condition="'$(Language)'=='VB' ">CODE_ANALYSIS=-1,$(FinalDefineConstants)</FinalDefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(LocalEspcPath)'=='' and '$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true' and '$(CodeAnalysisVSSku)'!='Express'">
    <!-- use 32-bit version by default -->
    <LocalEspcPath>$(VCInstallDir)\bin\localespc.dll</LocalEspcPath>
    <!-- use 64-bit version if 64-bit cl.exe is used -->
    <LocalEspcPath Condition="'$(VCToolArchitecture)'=='Native64Bit'">$(VCInstallDir)\bin\amd64\localespc.dll</LocalEspcPath>
  </PropertyGroup>

  <ItemDefinitionGroup Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'">
    <ClCompile>
      <PreprocessorDefinitions>CODE_ANALYSIS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <!-- For the native x64 case, use the 64-bit DLL. -->
      <PREfastAdditionalPlugins Condition="Exists('$(LocalEspcPath)')">$(LocalEspcPath);%(PREfastAdditionalPlugins)</PREfastAdditionalPlugins>
    </ClCompile>
  </ItemDefinitionGroup>

  <!-- Global properties for all analyzers -->


  <!-- FxCop analyzer properties -->

  <PropertyGroup>
    <!-- FxCopDir must be considered for backwards compatibility with the Visual Studio 2005 task, except within the context of a Team Build build. -->
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'=='' and '$(FxCopDir)'!='' and '$(TeamBuildConstants)'==''">$(FxCopDir)</CodeAnalysisPath>
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <!-- If we didn't find the first registry path, assume we're in a 64bit process. -->
    <!-- read registry from Wow6432Node -->
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VisualStudio\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <!-- If we didn't find the registry path yet, try Win8 Express locations -->
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VSWinExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VSWinExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <!-- If we didn't find the registry path yet, try WP Express locations -->
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VPDExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\VPDExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <!-- If we didn't find the registry path yet, try WD Express locations -->
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\WDExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>
    <CodeAnalysisPath Condition="'$(CodeAnalysisPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\WDExpress\12.0\Setup\EDev@FxCopDir)</CodeAnalysisPath>

        <!-- Default FxCop settings -->
        <CodeAnalysisApplyLogFileXsl Condition="'$(CodeAnalysisApplyLogFileXsl)'==''">false</CodeAnalysisApplyLogFileXsl>
        <CodeAnalysisFailOnMissingRules Condition="'$(CodeAnalysisFailOnMissingRules)'==''">false</CodeAnalysisFailOnMissingRules>
        <CodeAnalysisForceOutput Condition="'$(CodeAnalysisForceOutput)'==''">true</CodeAnalysisForceOutput>
        <CodeAnalysisGenerateSuccessFile Condition="'$(CodeAnalysisGenerateSuccessFile)'==''">true</CodeAnalysisGenerateSuccessFile>
        <CodeAnalysisIgnoreGeneratedCode Condition="'$(CodeAnalysisIgnoreGeneratedCode)'==''">true</CodeAnalysisIgnoreGeneratedCode>
        <CodeAnalysisIgnoreInvalidTargets Condition="'$(CodeAnalysisIgnoreInvalidTargets)'==''">true</CodeAnalysisIgnoreInvalidTargets>
        <CodeAnalysisIgnoreMissingIndirectReferences Condition="'$(CodeAnalysisIgnoreMissingIndirectReferences)'==''">false</CodeAnalysisIgnoreMissingIndirectReferences>
        <CodeAnalysisInputAssembly Condition="'$(CodeAnalysisInputAssembly)'==''">$(OutDir)$(TargetFileName)</CodeAnalysisInputAssembly>
        <CodeAnalysisLogFile Condition="'$(CodeAnalysisLogFile)'==''">$(CodeAnalysisInputAssembly).CodeAnalysisLog.xml</CodeAnalysisLogFile>
        <CodeAnalysisModuleSuppressionsFile Condition="'$(CodeAnalysisModuleSuppressionsFile)'==''">GlobalSuppressions$(DefaultLanguageSourceExtension)</CodeAnalysisModuleSuppressionsFile>
        <CodeAnalysisOverrideRuleVisibilities Condition="'$(CodeAnalysisOverrideRuleVisibilities)'==''">false</CodeAnalysisOverrideRuleVisibilities>
        <CodeAnalysisOutputToConsole Condition="'$(CodeAnalysisOutputToConsole)'==''">false</CodeAnalysisOutputToConsole>
        <CodeAnalysisQuiet Condition="'$(CodeAnalysisQuiet)'==''">false</CodeAnalysisQuiet>

    <!--
             Do not add the built-in rule directories in any of the following conditions:
             1. CodeAnalysisRuleAssemblies is not empty, CodeAnalysisRuleDirectories is empty, and CodeAnalysisRuleSet is empty. (This is the case when CodeAnalysisRuleAssemblies will be used.)
             2. CodeAnalysisIgnoreBuiltInRules is true.
             3. CodeAnalysisPath is empty.
             4. CodeAnalysisProject is not empty (i.e., an FxCop project file is used).

             The condition below checks ensures none of these four are true.
        -->
    <CodeAnalysisRuleDirectories Condition=
          "('$(CodeAnalysisRuleAssemblies)'=='' or '$(CodeAnalysisRuleDirectories)'!='' or '$(CodeAnalysisRuleSet)'!='') and 
            '$(CodeAnalysisIgnoreBuiltInRules)'!='true' and 
            '$(CodeAnalysisPath)'!='' and 
            '$(CodeAnalysisProject)'==''">$(CodeAnalysisRuleDirectories);$(CodeAnalysisPath)\Rules</CodeAnalysisRuleDirectories>

    <CodeAnalysisSaveMessagesToReport Condition="'$(CodeAnalysisSaveMessagesToReport)'==''">Active</CodeAnalysisSaveMessagesToReport>
    <CodeAnalysisSearchGlobalAssemblyCache Condition="'$(CodeAnalysisSearchGlobalAssemblyCache)'==''">true</CodeAnalysisSearchGlobalAssemblyCache>
    <CodeAnalysisSucceededFile Condition="'$(CodeAnalysisSucceededFile)'==''">$(CodeAnalysisInputAssembly).lastcodeanalysissucceeded</CodeAnalysisSucceededFile>
    <CodeAnalysisSummary Condition="'$(CodeAnalysisSummary)'==''">false</CodeAnalysisSummary>
    <CodeAnalysisTimeout Condition="'$(CodeAnalysisTimeout)'==''">120</CodeAnalysisTimeout>
    <CodeAnalysisTreatWarningsAsErrors Condition="'$(CodeAnalysisTreatWarningsAsErrors)'==''">false</CodeAnalysisTreatWarningsAsErrors>
    <CodeAnalysisUpdateProject Condition="'$(CodeAnalysisUpdateProject)'==''">false</CodeAnalysisUpdateProject>
    <CodeAnalysisUseTypeNameInSuppression Condition="'$(CodeAnalysisUseTypeNameInSuppression)'==''">true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisVerbose Condition="'$(CodeAnalysisVerbose)'==''">false</CodeAnalysisVerbose>
  </PropertyGroup>

    <!-- Select appropriate default rule set depending on project type and VS Sku-->
    <Choose>
      <When Condition="!Exists('$(CodeAnalysisRuleSet)') and ('$(CodeAnalysisVSSku)'=='Express' or ('$(CodeAnalysisRules)'=='' and '$(CodeAnalysisRuleAssemblies)'=='' and '$(CodeAnalysisRuleSet)'==''))">
        <Choose>
          <When Condition="'$(Language)'=='C++' and '$(CLRSupport)'=='true' and '$(CodeAnalysisVSSku)'=='Express'">
            <PropertyGroup>
              <CodeAnalysisRuleSet>MixedMinimumRules.ruleset</CodeAnalysisRuleSet>
            </PropertyGroup>
          </When>
          <When Condition="'$(Language)'=='C++' and '$(CLRSupport)'=='true'">
            <PropertyGroup>
              <CodeAnalysisRuleSet>MixedRecommendedRules.ruleset</CodeAnalysisRuleSet>
            </PropertyGroup>
          </When>
          <When Condition="'$(Language)'=='C++' and '$(CodeAnalysisVSSku)'=='Express'">
            <PropertyGroup>
              <CodeAnalysisRuleSet>NativeMinimumRules.ruleset</CodeAnalysisRuleSet>
            </PropertyGroup>
          </When>
          <When Condition="'$(Language)'=='C++'">
            <PropertyGroup>
              <CodeAnalysisRuleSet>NativeRecommendedRules.ruleset</CodeAnalysisRuleSet>
            </PropertyGroup>
          </When>
          <When Condition="'$(CodeAnalysisVSSku)'=='Express'">
            <PropertyGroup>
              <CodeAnalysisRuleSet>ManagedMinimumRules.ruleset</CodeAnalysisRuleSet>
            </PropertyGroup>
          </When>
          <Otherwise>
              <PropertyGroup>
				<CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
              </PropertyGroup>
          </Otherwise>
        </Choose>
      </When>
    </Choose>

    <!-- C#/VB specific properties -->
    <PropertyGroup Condition="'$(Language)'=='C#' or '$(Language)'=='VB'">
        <!-- Run Code Analysis after the build, but before running the application-->
        <PrepareForRunDependsOn>$(PrepareForRunDependsOn);RunCodeAnalysis</PrepareForRunDependsOn>
        <RunCodeAnalysisDependsOn>$(RunCodeAnalysisDependsOn);Compile</RunCodeAnalysisDependsOn>
    </PropertyGroup>

  <!-- C++ specific properties -->
  <PropertyGroup Condition="'$(Language)'=='C++'">
    <!-- Run Code Analysis after the build, but before running the application-->
    <AfterBuildLinkTargets>$(AfterBuildLinkTargets);RunMergeNativeCodeAnalysis;RunNativeCodeAnalysis</AfterBuildLinkTargets>
    <AfterBuildLinkTargets Condition="'$(CLRSupport)'=='true'">$(AfterBuildLinkTargets);RunCodeAnalysis</AfterBuildLinkTargets>
    <RunMergeNativeCodeAnalysisDependsOn>ClCompile</RunMergeNativeCodeAnalysisDependsOn>
    <RunMergeNativeCodeAnalysisDependsOn Condition="'$(RunCodeAnalysisDependsOn)'!=''">$(RunCodeAnalysisDependsOn);$(RunMergeNativeCodeAnalysisDependsOn)</RunMergeNativeCodeAnalysisDependsOn>
    <RunCodeAnalysisDependsOn>$(RunCodeAnalysisDependsOn);ClCompile;RunMergeNativeCodeAnalysis</RunCodeAnalysisDependsOn>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);SetCABuildNativeEnvironmentVariables</PrepareForBuildDependsOn>
    <ExtensionsToDeleteOnClean>$(ExtensionsToDeleteOnClean);$(CodeAnalysisLogFile);$(CodeAnalysisSucceededFile)</ExtensionsToDeleteOnClean>
    <CodeAnalysisTLogFile>$(IntDir)CodeAnalysis.read.1.tlog</CodeAnalysisTLogFile>
    <NativeCodeAnalysisTLogFile>$(IntDir)NativeCodeAnalysis.read.1.tlog</NativeCodeAnalysisTLogFile>
    <CAExcludePath Condition="'$(WindowsSDK_IncludePath)'!=''">$(WindowsSDK_IncludePath);$(CAExcludePath)</CAExcludePath>
    <CAExcludePath Condition="Exists('$(VCInstallDir)include')">$(VCInstallDir)include;$(CAExcludePath)</CAExcludePath>
    <CAExcludePath Condition="Exists('$(VCInstallDir)atlmfc\include')">$(VCInstallDir)atlmfc\include;$(CAExcludePath)</CAExcludePath>
  </PropertyGroup>

  <Target Name="SetCABuildNativeEnvironmentVariables">
    <SetEnvironmentVariable Condition="'$(Language)'=='C++' and '$(CAExcludePath)' != ''" EnvValue="$(CAExcludePath)" EnvKey="CAExcludePath"  />
  </Target>

  <ItemDefinitionGroup Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'">
    <ClCompile>
      <EnablePREFast>true</EnablePREFast>
      <!-- In Dev11 we enable quiet output since we don't show results in the Error List, but in the new CA window,
           however for the projects using v10 toolset, we want the results to go to the Error List 
           (otherwise they will be swallowed, since new CA window doesn't support older-style CA output) -->
      <AdditionalOptions Condition="'$(PlatformToolsetVersion)'&lt;'110'">%(ClCompile.AdditionalOptions)</AdditionalOptions>
      <AdditionalOptions Condition="'$(PlatformToolsetVersion)'&gt;='110'">%(ClCompile.AdditionalOptions)  /analyze:quiet</AdditionalOptions>
      <PREfastLog Condition="'$(PlatformToolsetVersion)'&lt;'120'">$(IntDir)%(FileName)%(Extension).nativecodeanalysis.xml</PREfastLog>
      <PREfastLogFile Condition="'$(PlatformToolsetVersion)'&gt;='120'">%(ObjectFileName)%(FileName).nativecodeanalysis.xml</PREfastLogFile>
    </ClCompile>
  </ItemDefinitionGroup>

  <!-- Make CodeAnalysisDictionary available as a Build Action in Visual Studio -->
  <ItemGroup>
    <AvailableItemName Include="CodeAnalysisDictionary" />
  </ItemGroup>

  <!-- FxCop analyzer properties -->

  <!-- Managed analyzer targets -->

  <PropertyGroup>
    <RunCodeAnalysisInputs>$(CodeAnalysisInputAssembly)</RunCodeAnalysisInputs>
    <RunCodeAnalysisInputs Condition="'$(CodeAnalysisRuleSet)'!='' and Exists('$(CodeAnalysisRuleSet)')">$(RunCodeAnalysisInputs);$(CodeAnalysisRuleSet)</RunCodeAnalysisInputs>
    <RunCodeAnalysisInputs Condition="'$(CodeAnalysisRuleSet)'!='' and !Exists('$(CodeAnalysisRuleSet)') and Exists('$(ProjectDir)$(CodeAnalysisRuleSet)')">$(RunCodeAnalysisInputs);$(ProjectDir)$(CodeAnalysisRuleSet)</RunCodeAnalysisInputs>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.Build.Tasks.CodeAnalysis" AssemblyFile=".\FxCopTask.dll"/>

  <Target
      Name="RunCodeAnalysis"
      Condition="'$(RunCodeAnalysisOnThisProject)'=='true'"
      Inputs="$(RunCodeAnalysisInputs)"
      Outputs="$(CodeAnalysisLogFile);$(CodeAnalysisSucceededFile)"
      DependsOnTargets="$(RunCodeAnalysisDependsOn)"
        >

    <!-- Build CodeAnalysisReferencePath inside of the RunCodeAnalysis target to ensure that ReferencePath -->
    <!-- has already been populated by the ResolveReferences target prior to using it. -->
    <ItemGroup>
      <CodeAnalysisReferencePath Include="@(ReferencePath)" />
      <CodeAnalysisReferencePath Condition="'$(Language)'=='VB' and '$(VBRuntimePath)'!=''" Include="$(VBRuntimePath)" />
    </ItemGroup>

    <!-- Add AdditionalUsingDirectories as reference assembly paths for C++ projects -->
    <ItemGroup>
      <CodeAnalysisDependentAssemblyPaths Condition="'$(Language)'=='C++'" Include="%(ClCompile.AdditionalUsingDirectories)" />
    </ItemGroup>
 
    <!-- If it is winmd file than we want to analyze winmdobj instead of winmd file -->
    <PropertyGroup>
      <CodeAnalysisInputAssembly Condition="'$(OutputType)'=='winmdobj'">@(IntermediateAssembly)</CodeAnalysisInputAssembly>
      <CodeAnalysisInputAssembly Condition="'$(OutputType)'=='winmdobj' and '$(Language)'=='VB'">$(IntermediateOutputPath)\TempCA\$(TargetName)$(TargetExt)</CodeAnalysisInputAssembly>
    </PropertyGroup>
    
    <!-- VBCompiler issue: fix the name of PDB file for winmdobj assembly -->
    <Copy Condition="'$(OutputType)'=='winmdobj' and '$(Language)'=='VB'"
        DestinationFiles="$(IntermediateOutputPath)\TempCA\$(TargetName).pdb"  
        SourceFiles="$(PdbFile)" 
        OverwriteReadOnlyFiles="True"/>
        
    <Copy Condition="'$(OutputType)'=='winmdobj' and '$(Language)'=='VB'"
        DestinationFolder="$(IntermediateOutputPath)\TempCA\"  
        SourceFiles="@(IntermediateAssembly)" 
        OverwriteReadOnlyFiles="True"/>

    <CodeAnalysis Condition="'$(RunCodeAnalysisOnThisProject)'=='true'"
        AdditionalOptions="$(CodeAnalysisAdditionalOptions)"
        AlternativeToolName="$(CodeAnalysisAlternativeToolName)"
        AnalysisTimeout="$(CodeAnalysisTimeout)"
        ApplyLogFileXsl="$(CodeAnalysisApplyLogFileXsl)"
        Assemblies="$(CodeAnalysisInputAssembly)"
        ConsoleXsl="$(CodeAnalysisConsoleXsl)"
        Culture="$(CodeAnalysisCulture)"
        DependentAssemblyPaths="@(CodeAnalysisDependentAssemblyPaths)"
        Dictionaries="@(CodeAnalysisDictionary)"
        DisableReferenceSwitchGeneration="$(CodeAnalysisDisableReferenceSwitchGeneration)"
        FailOnMissingRules="$(CodeAnalysisFailOnMissingRules)"
        FilesWritten="$(CodeAnalysisLogFile);$(CodeAnalysisSucceededFile)"
        ForceOutput="$(CodeAnalysisForceOutput)"
        GenerateSuccessFile="$(CodeAnalysisGenerateSuccessFile)"
        IgnoreBuildTaskWarnings="$(CodeAnalysisIgnoreBuildTaskWarnings)"
        IgnoreGeneratedCode="$(CodeAnalysisIgnoreGeneratedCode)"
        IgnoreInvalidTargets="$(CodeAnalysisIgnoreInvalidTargets)"
        IgnoreMissingIndirectReferences="$(CodeAnalysisIgnoreMissingIndirectReferences)"
        Imports="@(CodeAnalysisImport)"
        LogFile="$(CodeAnalysisLogFile)"
        LogFileXsl="$(CodeAnalysisLogFileXsl)"
        MSBuildProjectDirectory="$(MSBuildProjectDirectory)"
        OutputToConsole="$(CodeAnalysisOutputToConsole)"
        OverrideRuleVisibilities="$(CodeAnalysisOverrideRuleVisibilities)"
        NeverReportRuleErrors="$(CodeAnalysisNeverReportRuleErrors)"
        PlatformPath="$(CodeAnalysisPlatformPath)"
        Project="$(CodeAnalysisProject)"
        Quiet="$(CodeAnalysisQuiet)"
        References="@(CodeAnalysisReferencePath)"
        RuleAssemblies="$(CodeAnalysisRuleAssemblies)"
        RuleDirectories="$(CodeAnalysisRuleDirectories)"
        Rules="$(CodeAnalysisRules)"
        RuleSet="$(CodeAnalysisRuleSet)"
        RuleSetDirectories="$(CodeAnalysisRuleSetDirectories)"
        SaveMessagesToReport="$(CodeAnalysisSaveMessagesToReport)"
        SearchGlobalAssemblyCache="$(CodeAnalysisSearchGlobalAssemblyCache)"
        SuccessFile="$(CodeAnalysisSucceededFile)"
        Summary="$(CodeAnalysisSummary)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        TLogFile="$(CodeAnalysisTLogFile)"
        ToolPath="$(CodeAnalysisPath)"
        TreatWarningsAsErrors="$(CodeAnalysisTreatWarningsAsErrors)"
        UpdateProject="$(CodeAnalysisUpdateProject)"
        Verbose="$(CodeAnalysisVerbose)"
            >
      <Output TaskParameter="FilesWritten" ItemName="FileWrites"/>
    </CodeAnalysis>
  </Target>

  <!-- Managed analyzer targets -->

  <!-- Native analyzer targets -->

  <PropertyGroup>
    <RunNativeCodeAnalysisInputs>$(OutputFile)</RunNativeCodeAnalysisInputs>
    <RunNativeCodeAnalysisInputs Condition="'$(CodeAnalysisRuleSet)'!='' and Exists('$(CodeAnalysisRuleSet)')">$(RunNativeCodeAnalysisInputs);$(CodeAnalysisRuleSet)</RunNativeCodeAnalysisInputs>
    <RunNativeCodeAnalysisInputs Condition="'$(CodeAnalysisRuleSet)'!='' and !Exists('$(CodeAnalysisRuleSet)') and Exists('$(ProjectDir)$(CodeAnalysisRuleSet)')">$(RunNativeCodeAnalysisInputs);$(ProjectDir)$(CodeAnalysisRuleSet)</RunNativeCodeAnalysisInputs>
    <MergedOutputCodeAnalysisFile>$(IntDir)vc.nativecodeanalysis.all.xml</MergedOutputCodeAnalysisFile>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'" >
      <Choose>
        <When Condition="'$(PlatformToolsetVersion)'&lt;'120'">
          <PropertyGroup>
            <MergeInputCodeAnalysisFiles>@(ClCompile->'%(PREfastLog)')</MergeInputCodeAnalysisFiles>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <MergeInputCodeAnalysisFiles>@(ClCompile->'%(PREfastLogFile)')</MergeInputCodeAnalysisFiles>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <UsingTask TaskName="Microsoft.Build.Tasks.NativeCodeAnalysis" AssemblyFile=".\FxCopTask.dll"/>

  <Target
      Name="RunNativeCodeAnalysis"
      Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'"
      Inputs="$(RunCodeAnalysisInputs);$(MergedOutputCodeAnalysisFile)"
      Outputs="$(CodeAnalysisSucceededFile);$(NativeCodeAnalysisTLogFile)"
      DependsOnTargets="$(RunCodeAnalysisDependsOn)"
        >
    <NativeCodeAnalysis Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'"
        IgnoreBuildTaskWarnings="$(CodeAnalysisIgnoreBuildTaskWarnings)"
        NativeCodeAnalysisLogFiles="$(MergedOutputCodeAnalysisFile)"
        MSBuildProjectDirectory="$(MSBuildProjectDirectory)"
        NeverReportRuleErrors="$(CodeAnalysisNeverReportRuleErrors)"
        RuleSet="$(CodeAnalysisRuleSet)"
        RuleSetDirectories="$(CodeAnalysisRuleSetDirectories)"
        StaticAnalysisDirectory="$(CodeAnalysisStaticAnalysisDirectory)"
        TLogFile="$(NativeCodeAnalysisTLogFile)"
        TreatWarningsAsErrors="$(CodeAnalysisTreatWarningsAsErrors)"
        VisualStudioSku="$(CodeAnalysisVSSku)"
        CodeAnalysisSucceededFile="$(CodeAnalysisSucceededFile)"
            >
      <Output TaskParameter="FilesWritten" ItemName="FileWrites"/>
    </NativeCodeAnalysis>
  </Target>

  <!-- Native analyzer targets -->

  <!-- Merge native results targets -->

  <UsingTask TaskName="Microsoft.Build.Tasks.MergeNativeCodeAnalysis" AssemblyFile=".\FxCopTask.dll"/>

  <Target
      Name="RunMergeNativeCodeAnalysis"
      Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'"
      Inputs="$(RunCodeAnalysisInputs);$(MergeInputCodeAnalysisFiles)"
      Outputs="$(CodeAnalysisSucceededFile);$(NativeCodeAnalysisTLogFile);$(MergedOutputCodeAnalysisFile)"
      DependsOnTargets="$(RunMergeNativeCodeAnalysisDependsOn)"
      >

    <MergeNativeCodeAnalysis
          Condition="'$(Language)'=='C++' and '$(RunCodeAnalysisOnThisProject)'=='true'"
          InputNativeResultFiles="$(MergeInputCodeAnalysisFiles)" 
          OutputCodeAnalysisFile="$(MergedOutputCodeAnalysisFile)"
      />

  </Target>

  <ItemGroup>
    <Clean Include="$(IntermediateOutputPath)\TempCA\$(TargetName).pdb"/>
    <Clean Include="$(IntermediateOutputPath)\TempCA\$(TargetName)$(TargetExt)"/>
  </ItemGroup>
 
</Project>
