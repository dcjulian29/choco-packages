<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

    <!-- ========================================================================== -->
    <!-- Note: After updating this file, make sure that                             -->
    <!-- %DepotRoot%\xmake\XmakeCommandLine\Microsoft.Build.CommonTypes.xsd         -->
    <!-- is updated to reflect changes.                                             -->
    <!--                                                                            -->
    <!-- To test whether schema changes are OK, copy changed XSD file to            -->
    <!-- %ProgramFiles(x86)%\Microsoft Visual Studio 12.0\Xml\Schemas\1033\MSBuild, -->
    <!-- then open this file in Visual Studio.                                      -->
    <!-- It should not display any schema warnings in error list window.            -->
    <!-- ========================================================================== -->
    
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <AppxMSBuildToolsPath Condition="'$(AppxMSBuildToolsPath)' == ''">$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\AppxPackage\</AppxMSBuildToolsPath>
        <AppxMSBuildTaskAssembly Condition="'$(AppxMSBuildTaskAssembly)' == ''">$(AppxMSBuildToolsPath)Microsoft.Build.AppxPackage.dll</AppxMSBuildTaskAssembly>
    </PropertyGroup>

    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreateAppStoreContainer" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreateAppxLayout" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreatePriConfigXmlForFullIndex" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreatePriConfigXmlForMainPackageFileMap" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreatePriConfigXmlForSplitting" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.CreatePriFilesForPortableLibraries" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ExpandPayloadDirectories" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ExpandPriContent" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ExtractHashAlgorithmId" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.FilterOutUnusedLanguagesResourceFileMaps" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GenerateAppxManifest" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GenerateAppxPackageRecipe" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GenerateAppxSymbolPackage" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GeneratePriConfigurationFiles" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GenerateProjectArchitecturesFile" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GenerateProjectPriFile" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetAppxBundlePlatforms" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetDefaultResourceLanguage" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetFrameworkSdkPackages" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetPackageArchitecture" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetSdkPropertyValue" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetSdkToolFullPath" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.GetWindowsDesktopSdkDir" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.MakeAppxBundle" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.MakeAppxPack" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ParsePlatformSpecificBundleArtifactsLists" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.RemovePayloadDuplicates" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.RemoveDuplicatePriFiles" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.RemoveDuplicateSDKReferences" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.SignAppxPackage" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.UnregisterAppx" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.UpdateAppxManifestForBundle" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.UpdateMainPackageFileMap" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ValidateAppxManifest" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ValidateAppxManifestItems" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ValidateAppxPackage" />
    <UsingTask AssemblyFile="$(AppxMSBuildTaskAssembly)" TaskName="Microsoft.Build.AppxPackage.ValidateStoreManifest" />

    <!-- Adjust AppxPackage to be true Boolean flag. -->
    <PropertyGroup>
        <AppxPackage Condition="'$(AppxPackage)' != 'true'">false</AppxPackage>
    </PropertyGroup>

    <!-- Flags controlling certain features -->
    <PropertyGroup>
        <AppxUseHardlinksIfPossible Condition="'$(AppxUseHardlinksIfPossible)' == ''">true</AppxUseHardlinksIfPossible>
        <AppxSkipUnchangedFiles Condition="'$(AppxSkipUnchangedFiles)' == ''">true</AppxSkipUnchangedFiles>
        <AppxGeneratePriEnabled Condition="'$(AppxGeneratePriEnabled)' == ''">true</AppxGeneratePriEnabled>
        <AppxGetPackagePropertiesEnabled Condition="'$(AppxGetPackagePropertiesEnabled)' == ''">true</AppxGetPackagePropertiesEnabled>
        <AppxPackageIncludePrivateSymbols Condition="'$(AppxPackageIncludePrivateSymbols)' == ''">false</AppxPackageIncludePrivateSymbols>
        <AppxSymbolPackageEnabled Condition="'$(AppxSymbolPackageEnabled)' == ''">true</AppxSymbolPackageEnabled>
        <AppxTestLayoutEnabled Condition="'$(AppxTestLayoutEnabled)' == ''">true</AppxTestLayoutEnabled>
        <AppxPackageValidationEnabled Condition="'$(AppxPackageValidationEnabled)' == ''">true</AppxPackageValidationEnabled>
        <AppxHarvestWinmdRegistration Condition="'$(AppxHarvestWinmdRegistration)' == ''">true</AppxHarvestWinmdRegistration>
        <AutoIncrementPackageRevision Condition="'$(AutoIncrementPackageRevision)' == ''">true</AutoIncrementPackageRevision>
        <AppxPrependPriInitialPath Condition="'$(AppxPrependPriInitialPath)' == ''">true</AppxPrependPriInitialPath>
        <EnableSigningChecks Condition=" '$(EnableSigningChecks)' == '' ">true</EnableSigningChecks>
        <AppxStrictManifestValidationEnabled Condition="'$(AppxStrictManifestValidationEnabled)' == ''">true</AppxStrictManifestValidationEnabled>
        <AppxFilterOutUnusedLanguagesResourceFileMaps Condition="'$(AppxFilterOutUnusedLanguagesResourceFileMaps)' == ''">true</AppxFilterOutUnusedLanguagesResourceFileMaps>
        <AppxGeneratePrisForPortableLibrariesEnabled Condition="'$(AppxGeneratePrisForPortableLibrariesEnabled)' == ''">true</AppxGeneratePrisForPortableLibrariesEnabled>
        <AppxGeneratePackageRecipeEnabled Condition="'$(AppxGeneratePackageRecipeEnabled)' == ''">true</AppxGeneratePackageRecipeEnabled>
    </PropertyGroup>

    <PropertyGroup>
        <_TargetPlatformIsWindowsPhone Condition="'$(TargetPlatformIdentifier)' == 'Windows Phone'">true</_TargetPlatformIsWindowsPhone>
        <_TargetPlatformIsWindowsPhone Condition="'$(TargetPlatformIdentifier)' == 'WindowsPhoneApp'">true</_TargetPlatformIsWindowsPhone>
        <_TargetPlatformIsWindowsPhone Condition="'$(_TargetPlatformIsWindowsPhone)' == ''">false</_TargetPlatformIsWindowsPhone>
    </PropertyGroup>

    <PropertyGroup Condition="'$(AppxPackageSigningEnabled)' == ''">
        <AppxPackageSigningEnabled Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true'">false</AppxPackageSigningEnabled>
        <AppxPackageSigningEnabled Condition="'$(AppxPackageSigningEnabled)' == ''">true</AppxPackageSigningEnabled>
    </PropertyGroup>

    <!-- Various properties not intended for overriding. -->
    <PropertyGroup>
        <AppxOSMinVersion Condition="'$(AppxOSMinVersion)' == '' and '$(TargetPlatformVersion)' == '8.1' and '$(_TargetPlatformIsWindowsPhone)' == 'true'">6.3.1</AppxOSMinVersion>
        <AppxOSMinVersion Condition="'$(AppxOSMinVersion)' == '' and '$(TargetPlatformVersion)' == '8.1' and '$(TargetPlatformIdentifier)' == 'Windows'">6.3.0</AppxOSMinVersion>
        <AppxOSMinVersion Condition="'$(AppxOSMinVersion)' == ''">6.2.1</AppxOSMinVersion>
        <AppxOSMaxVersionTested Condition="'$(AppxOSMaxVersionTested)' == ''">$(AppxOSMinVersion)</AppxOSMaxVersionTested>
    </PropertyGroup>

    <PropertyGroup>
        <AppxPackageDirName Condition="'$(AppxPackageDirName)' == ''">AppPackages</AppxPackageDirName>
        <AppxPackageDirWasSpecified Condition="'$(AppxPackageDir)' != ''">true</AppxPackageDirWasSpecified>
        <AppxPackageDirInProjectDir>$(ProjectDir)$(AppxPackageDirName)\</AppxPackageDirInProjectDir>

        <PlatformSpecificBundleArtifactsListDirName Condition="'$(PlatformSpecificBundleArtifactsListDirName)' == ''">BundleArtifacts</PlatformSpecificBundleArtifactsListDirName>
        <PlatformSpecificBundleArtifactsListDirWasSpecified Condition="'$(PlatformSpecificBundleArtifactsListDir)' != ''">true</PlatformSpecificBundleArtifactsListDirWasSpecified>
        <PlatformSpecificBundleArtifactsListDirInProjectDir>$(ProjectDir)$(PlatformSpecificBundleArtifactsListDirName)\</PlatformSpecificBundleArtifactsListDirInProjectDir>
    </PropertyGroup>

    <!-- Various overridable properties. -->
    <PropertyGroup>
        <AppxPackageDir Condition="'$(AppxPackageDir)' == '' and '$(OutDirWasSpecified)' == 'true'">$(OutDir)$(AppxPackageDirName)\</AppxPackageDir>
        <AppxPackageDir Condition="'$(AppxPackageDir)' == ''">$(AppxPackageDirInProjectDir)</AppxPackageDir>
        <AppxPackageDir Condition="!HasTrailingSlash('$(AppxPackageDir)')">$(AppxPackageDir)\</AppxPackageDir>

        <AppxPackageArtifactsDir Condition="'$(AppxPackageArtifactsDir)' == ''"></AppxPackageArtifactsDir>
        <FinalAppxManifestName Condition="'$(FinalAppxManifestName)' == ''">$(TargetDir)$(AppxPackageArtifactsDir)AppxManifest.xml</FinalAppxManifestName>
        <AppxValidateAppxManifest Condition="'$(AppxValidateAppxManifest)' == ''">true</AppxValidateAppxManifest>
        <AppxValidateAppxManifest Condition="'$(AppxValidateAppxManifest)' != 'true'">false</AppxValidateAppxManifest>
        <StoreManifestName Condition="'$(StoreManifestName)' == ''">StoreManifest.xml</StoreManifestName>
        <!-- AppxValidateStoreManifest isn't defined here, because the default depends on the TargetPlatform/Version -->
        <MakePriExeFullPath Condition="'$(MakePriExeFullPath)' == ''"></MakePriExeFullPath>
        <MakeAppxExeFullPath Condition="'$(MakeAppxExeFullPath)' == ''"></MakeAppxExeFullPath>
        <SignAppxPackageExeFullPath Condition="'$(SignAppxPackageExeFullPath)' == ''"></SignAppxPackageExeFullPath>
        <ResgenToolPath Condition="'$(ResgenToolPath)' == ''">$(TargetFrameworkSDKToolsDirectory)</ResgenToolPath>
        <PdbCopyExeFullPath Condition="'$(PdbCopyExeFullPath)' == ''">$(AppxMSBuildToolsPath)PDBCopy.exe</PdbCopyExeFullPath>
        <AppxSymbolStrippedDir Condition="'$(AppxSymbolStrippedDir)' == ''">$(IntermediateOutputPath)Stripped</AppxSymbolStrippedDir>
        <AppxPriInitialPath Condition="'$(AppxPrependPriInitialPath)' != 'true'"></AppxPriInitialPath>
        <AppxPriInitialPath Condition="'$(AppxPrependPriInitialPath)' == 'true' and '$(AppxPackage)' == 'true' and '$(AppxPriInitialPath)' == ''"></AppxPriInitialPath>
        <AppxPriInitialPath Condition="'$(AppxPrependPriInitialPath)' == 'true' and '$(AppxPackage)' != 'true' and '$(AppxPriInitialPath)' == ''">$(TargetName)</AppxPriInitialPath>
        <ProjectPriFileName Condition="'$(AppxPackage)' == 'true' and '$(ProjectPriFileName)' == ''">resources.pri</ProjectPriFileName>
        <ProjectPriFileName Condition="'$(AppxPackage)' != 'true' and '$(ProjectPriFileName)' == ''">$(AppxPriInitialPath).pri</ProjectPriFileName>
        <ProjectPriFullPath Condition="'$(ProjectPriFullPath)' == ''">$(TargetDir)$(AppxPackageArtifactsDir)$(ProjectPriFileName)</ProjectPriFullPath>
        <AppxPackageRecipe Condition="'$(AppxPackageRecipe)' == ''">$(TargetDir)$(AppxPackageArtifactsDir)$(ProjectName).build.appxrecipe</AppxPackageRecipe>
        <FinalAppxPackageRecipe Condition="'$(FinalAppxPackageRecipe)' == ''">$(TargetDir)$(AppxPackageArtifactsDir)$(ProjectName).appxrecipe</FinalAppxPackageRecipe>
        <AllowLocalNetworkLoopback Condition="'$(AllowLocalNetworkLoopback)' == ''">true</AllowLocalNetworkLoopback>
        <AppxDefaultHashAlgorithmId Condition="'$(AppxDefaultHashAlgorithmId)' == ''">sha256</AppxDefaultHashAlgorithmId>
        <AppxPackageFileMap Condition="'$(AppxPackageFileMap)' == ''">$(IntermediateOutputPath)package.map.txt</AppxPackageFileMap>
        <LayoutDir Condition="'$(LayoutDir)'==''">$(TargetDir)AppX</LayoutDir>
        <ManagedWinmdInprocImplementation Condition="'$(ManagedWinmdInprocImplementation)' == ''">CLRHost.dll</ManagedWinmdInprocImplementation>
        <UseIncrementalAppxRegistration Condition="'$(UseIncrementalAppxRegistration)' == ''">true</UseIncrementalAppxRegistration>
        <AppxPackagingInfoFile Condition="'$(AppxPackagingInfoFile)' == ''">$(IntermediateOutputPath)_pkginfo.txt</AppxPackagingInfoFile>
        <AppxOSMinVersionReplaceManifestVersion Condition="'$(AppxOSMinVersionReplaceManifestVersion)' == ''">true</AppxOSMinVersionReplaceManifestVersion>
        <AppxOSMaxVersionTestedReplaceManifestVersion Condition="'$(AppxOSMaxVersionTestedReplaceManifestVersion)' == ''">true</AppxOSMaxVersionTestedReplaceManifestVersion>
        <PackagingFileWritesLogPath Condition="'$(PackagingFileWritesLogPath)' == ''">$(IntermediateOutputPath)PackagingFileWrites.log</PackagingFileWritesLogPath>
        <PackagingDirectoryWritesLogPath Condition="'$(PackagingDirectoryWritesLogPath)' == ''">$(IntermediateOutputPath)PackagingDirectoryWrites.log</PackagingDirectoryWritesLogPath>
        <AppxCopyLocalFilesOutputGroupIncludeXmlFiles Condition="'$(AppxCopyLocalFilesOutputGroupIncludeXmlFiles)' != 'true'">false</AppxCopyLocalFilesOutputGroupIncludeXmlFiles>
        <AppxPriConfigXmlPackagingSnippetPath Condition="'$(AppxPriConfigXmlPackagingSnippetPath)' == ''"></AppxPriConfigXmlPackagingSnippetPath>
        <AppxPriConfigXmlDefaultSnippetPath Condition="'$(AppxPriConfigXmlDefaultSnippetPath)' == ''"></AppxPriConfigXmlDefaultSnippetPath>
        <TargetPlatformSdkRootOverride Condition="'$(TargetPlatformSdkRootOverride)' == ''"></TargetPlatformSdkRootOverride>
        <TargetPlatformResourceVersion Condition="'$(TargetPlatformResourceVersion)' == ''">$(TargetPlatformVersion)</TargetPlatformResourceVersion>

        <AppxPackageExtension>.appx</AppxPackageExtension>
        <AppxSymbolPackageExtension>.appxsym</AppxSymbolPackageExtension>
        <AppxBundleExtension>.appxbundle</AppxBundleExtension>
        <AppxStoreContainerExtension>.appxupload</AppxStoreContainerExtension>
        <AppxIntermediateExtension>.intermediate</AppxIntermediateExtension>

        <AppxBundle Condition="'$(TargetPlatformVersion)' == '8.0'">Never</AppxBundle>
        <AppxBundle Condition="'$(AppxBundle)' == ''">Auto</AppxBundle>
        <AppxBundlePlatforms Condition="'$(AppxBundlePlatforms)' == ''"></AppxBundlePlatforms>
        <AppxBundleProducingPlatform Condition="'$(AppxBundleProducingPlatform)' == ''"></AppxBundleProducingPlatform>
        <AppxBundleResourcePacksProducingPlatform Condition="'$(AppxBundleResourcePacksProducingPlatform)' == ''"></AppxBundleResourcePacksProducingPlatform>
        <AppxLayoutFolderName Condition="'$(AppxLayoutFolderName)' == ''">PackageLayout</AppxLayoutFolderName>
        <AppxLayoutDir Condition="'$(AppxLayoutDir)' == ''">$(IntermediateOutputPath)$(AppxLayoutFolderName)\</AppxLayoutDir>
        <AppxLayoutDir Condition="!HasTrailingSlash('$(AppxLayoutDir)')">$(AppxLayoutDir)\</AppxLayoutDir>
        <AppxBundlePriConfigXmlForSplittingFileName Condition="'$(AppxBundlePriConfigXmlForSplittingFileName)' == ''">$(IntermediateOutputPath)split.priconfig.xml</AppxBundlePriConfigXmlForSplittingFileName>
        <AppxBundleAutoResourcePackageQualifiers Condition="'$(AppxBundleAutoResourcePackageQualifiers)' == ''">Language|Scale|DXFeatureLevel</AppxBundleAutoResourcePackageQualifiers>
        <AppxBundleSplitResourcesPriPrefix Condition="'$(AppxBundleSplitResourcesPriPrefix)' == ''">split</AppxBundleSplitResourcesPriPrefix>
        <AppxBundleSplitResourcesPriPath Condition="'$(AppxBundleSplitResourcesPriPath)' == ''">$(IntermediateOutputPath)$(AppxBundleSplitResourcesPriPrefix).pri</AppxBundleSplitResourcesPriPath>
        <AppxBundleSplitResourcesGeneratedFilesListPath Condition="'$(AppxBundleSplitResourcesGeneratedFilesListPath)' == ''">$(IntermediateOutputPath)$(AppxBundleSplitResourcesPriPrefix).generatedFiles.txt</AppxBundleSplitResourcesGeneratedFilesListPath>
        <AppxBundleSplitResourcesQualifiersPath Condition="'$(AppxBundleSplitResourcesQualifiersPath)' == ''">$(IntermediateOutputPath)$(AppxBundleSplitResourcesPriPrefix).qualifiers.txt</AppxBundleSplitResourcesQualifiersPath>
        <AppxBundlePriConfigXmlForMainPackageFileMapFileName Condition="'$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)' == ''">$(IntermediateOutputPath)filemap.priconfig.xml</AppxBundlePriConfigXmlForMainPackageFileMapFileName>
        <AppxBundleMainPackageFileMapIntermediatePrefix Condition="'$(AppxBundleMainPackageFileMapIntermediatePrefix)' == ''">filemap</AppxBundleMainPackageFileMapIntermediatePrefix>
        <AppxBundleMainPackageFileMapSuffix Condition="'$(AppxBundleMainPackageFileMapSuffix)' == ''">.map</AppxBundleMainPackageFileMapSuffix>
        <AppxBundleMainPackageFileMapIntermediatePath Condition="'$(AppxBundleMainPackageFileMapIntermediatePath)' == ''">$(IntermediateOutputPath)$(AppxBundleMainPackageFileMapIntermediatePrefix)$(AppxBundleMainPackageFileMapSuffix).txt</AppxBundleMainPackageFileMapIntermediatePath>
        <AppxBundleMainPackageFileMapIntermediatePriPath Condition="'$(AppxBundleMainPackageFileMapIntermediatePriPath)' == ''">$(IntermediateOutputPath)$(AppxBundleMainPackageFileMapIntermediatePrefix).pri</AppxBundleMainPackageFileMapIntermediatePriPath>
        <AppxBundleMainPackageFileMapGeneratedFilesListPath Condition="'$(AppxBundleMainPackageFileMapGeneratedFilesListPath)' == ''">$(IntermediateOutputPath)$(AppxBundleMainPackageFileMapIntermediatePrefix).generatedFiles.txt</AppxBundleMainPackageFileMapGeneratedFilesListPath>
        <AppxBundleMainPackageFileMapPrefix Condition="'$(AppxBundleMainPackageFileMapPrefix)' == ''">main</AppxBundleMainPackageFileMapPrefix>
        <AppxBundleMainPackageFileMapPath Condition="'$(AppxBundleMainPackageFileMapPath)' == ''">$(IntermediateOutputPath)$(AppxBundleMainPackageFileMapPrefix)$(AppxBundleMainPackageFileMapSuffix).txt</AppxBundleMainPackageFileMapPath>
        <AppxBundleFolderSuffix Condition="'$(AppxBundleFolderSuffix)' == ''">_Bundle</AppxBundleFolderSuffix>

        <PlatformSpecificBundleArtifactsListDir Condition="'$(PlatformSpecificBundleArtifactsListDir)' == '' and '$(OutDirWasSpecified)' == 'true'">$(OutDir)$(PlatformSpecificBundleArtifactsListDirName)\</PlatformSpecificBundleArtifactsListDir>
        <PlatformSpecificBundleArtifactsListDir Condition="'$(PlatformSpecificBundleArtifactsListDir)' == ''">$(PlatformSpecificBundleArtifactsListDirInProjectDir)</PlatformSpecificBundleArtifactsListDir>
        <PlatformSpecificBundleArtifactsListDir Condition="!HasTrailingSlash('$(PlatformSpecificBundleArtifactsListDir)')">$(PlatformSpecificBundleArtifactsListDir)\</PlatformSpecificBundleArtifactsListDir>
    </PropertyGroup>

    <PropertyGroup>
        <AppxDefaultResourceQualifiers_Windows_80>Language={DefaultResourceLanguage}</AppxDefaultResourceQualifiers_Windows_80>
        <AppxDefaultResourceQualifiers_Windows_81>Language={DefaultResourceLanguage}|Contrast=standard|Scale=100|HomeRegion=001|TargetSize=256|LayoutDirection=LTR|DXFeatureLevel=DX9|Configuration=|AlternateForm=</AppxDefaultResourceQualifiers_Windows_81>
        <AppxDefaultResourceQualifiers_Windows_Phone>Language={DefaultResourceLanguage}|Contrast=standard|Scale=240|HomeRegion=001|TargetSize=256|LayoutDirection=LTR|DXFeatureLevel=DX9|Theme=Dark|AlternateForm=</AppxDefaultResourceQualifiers_Windows_Phone>
    </PropertyGroup>

    <PropertyGroup Condition="'$(AppxDefaultResourceQualifiers)' == ''">
        <AppxDefaultResourceQualifiers Condition="'$(TargetPlatformIdentifier)' == 'Windows' and '$(TargetPlatformVersion)' == '8.0'">$(AppxDefaultResourceQualifiers_Windows_80)</AppxDefaultResourceQualifiers>
        <AppxDefaultResourceQualifiers Condition="'$(TargetPlatformIdentifier)' == 'Windows' and '$(TargetPlatformVersion)' == '8.1'">$(AppxDefaultResourceQualifiers_Windows_81)</AppxDefaultResourceQualifiers>
        <AppxDefaultResourceQualifiers Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true'">$(AppxDefaultResourceQualifiers_Windows_Phone)</AppxDefaultResourceQualifiers>
    </PropertyGroup>

    <!-- If value is still not set, it is a platform yet unknown to us. -->
    <!-- Default to same value as for latest version of Windows.        -->
    <PropertyGroup Condition="'$(AppxDefaultResourceQualifiers)' == ''">
        <AppxDefaultResourceQualifiers>$(AppxDefaultResourceQualifiers_Windows_81)</AppxDefaultResourceQualifiers>
    </PropertyGroup>

    <ItemGroup>
        <AppxHashUri Include="http://www.w3.org/2001/04/xmlenc#sha256">
            <Id>SHA256</Id>
        </AppxHashUri>
        <AppxHashUri Include="http://www.w3.org/2001/04/xmlenc#sha384">
            <Id>SHA384</Id>
        </AppxHashUri>
        <AppxHashUri Include="http://www.w3.org/2001/04/xmlenc#sha512">
            <Id>SHA512</Id>
        </AppxHashUri>
    </ItemGroup>

    <!-- Calculate whether to allow debug framework references in app manifest.    -->
    <!-- Allow overriding this from command line or user config file if necessary. -->

    <PropertyGroup Condition="'$(AppxPackageAllowDebugFrameworkReferencesInManifest)' == ''">

        <!-- If inside Visual Studio, if not packaging for store, allow debug framework references. -->
        <AppxPackageAllowDebugFrameworkReferencesInManifest Condition="'$(BuildingInsideVisualStudio)' == 'true'
                                                                   and '$(AppxPackageIsForStore)' != 'true'">true</AppxPackageAllowDebugFrameworkReferencesInManifest>

        <!-- On command line, if building with Debug SDK configuration, allow debug framework references. -->
        <AppxPackageAllowDebugFrameworkReferencesInManifest Condition="'$(BuildingInsideVisualStudio)' != 'true'
                                                                   and '$(TargetedSDKConfiguration)' == 'Debug'">true</AppxPackageAllowDebugFrameworkReferencesInManifest>

        <!-- All other cases, do not allow debug framework references. -->
        <AppxPackageAllowDebugFrameworkReferencesInManifest Condition="'$(AppxPackageAllowDebugFrameworkReferencesInManifest)' == ''">false</AppxPackageAllowDebugFrameworkReferencesInManifest>

    </PropertyGroup>

    <!--
        When building on the command line or in TFS (determined by looking at the $(BuildingInsideVisualStudio) property), if build is invoked on an
        app package-producing project, the package for the project will be produced as part of building the project without specifying any additional
        flags or targets. This is control by an MSBuild property named GenerateAppxPackageOnBuild which is set to true by default.
    
        If $(BuildingInsideVisualStudio) = false and $(GenerateAppxPackageOnBuild) = true, then build will also produce a package.
    -->
    <PropertyGroup>
        <GenerateAppxPackageOnBuild Condition="'$(AppxPackage)' == 'true' and '$(GenerateAppxPackageOnBuild)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</GenerateAppxPackageOnBuild>
    </PropertyGroup>

    <!-- Names of the files which are allways present on the machine and should not be part of the payload. -->
    <ItemGroup>
        <AppxSystemBinary Include="CLRHost.dll" />
        <AppxSystemBinary Include="CLRHost.exe" />
    </ItemGroup>

    <!-- Reserved file names which cannot appear in the package. -->
    <ItemGroup>
        <AppxReservedFileName Include="AppxManifest.xml" />
        <AppxReservedFileName Include="AppxBlockMap.xml" />
        <AppxReservedFileName Include="[Content_Types].xml" />
        <AppxReservedFileName Include="AppxSignature.p7x" />
        <AppxReservedFileName Include="Microsoft.System.Package.Metadata" />
    </ItemGroup>

    <!-- XPath queries used to extract file names from the manifest. -->
    <ItemGroup>
        <AppxManifestFileNameQuery Include="./m:Package/m:Extensions/m:Extension/m:InProcessServer/m:Path" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Extensions/m:Extension/m:OutOfProcessServer/m:Path" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Extensions/m:Extension/m:ProxyStub/m:Path" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Extensions/m:Extension/m:GameExplorer/@GameDefinitionContainer" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Extensions/m:Extension/m:Certificates/m:Certificate/@Content" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Applications/m:Application/@Executable" />
        <AppxManifestFileNameQuery Include="./m:Package/m:Applications/m:Application/m:Extensions/m:Extension/@Executable" />
    </ItemGroup>

    <!-- XPath queries used to extract image file names from the manifest. -->
    <ItemGroup>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Properties/m:Logo">
            <DescriptionID>StoreLogo</DescriptionID>
            <ExpectedScaleDimensions>100:50x50;140:70x70;180:90x90;240:120x120</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m:VisualElements/@Logo">
            <DescriptionID>TileLogo</DescriptionID>
            <ExpectedScaleDimensions>80:120x120;100:150x150;140:210x210;180:270x270</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m:VisualElements/@SmallLogo">
            <DescriptionID>SmallLogo</DescriptionID>
            <ExpectedScaleDimensions>80:24x24;100:30x30;140:42x42;180:54x54</ExpectedScaleDimensions>
            <ExpectedTargetSizes>16;32;48;256</ExpectedTargetSizes>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m:VisualElements/m:DefaultTile/@WideLogo">
            <DescriptionID>WideLogo</DescriptionID>
            <ExpectedScaleDimensions>80:248x120;100:310x150;140:434x210;180:558x270</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m:VisualElements/m:LockScreen/@BadgeLogo">
            <DescriptionID>BadgeLogo</DescriptionID>
            <ExpectedScaleDimensions>100:24x24;140:33x33;180:43x43</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m:VisualElements/m:SplashScreen/@Image">
            <DescriptionID>SplashScreen</DescriptionID>
            <ExpectedScaleDimensions>100:620x300;140:868x420;180:1116x540</ExpectedScaleDimensions>
        </AppxManifestImageFileNameQuery>
    </ItemGroup>
    
    <ItemGroup Condition="'$(TargetPlatformVersion)' != '8.0'">
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/@Square30x30Logo">
            <DescriptionID>Square30x30Logo</DescriptionID>
            <ExpectedScaleDimensions>80:24x24;100:30x30;140:42x42;180:54x54</ExpectedScaleDimensions>
            <ExpectedTargetSizes>16;32;48;256</ExpectedTargetSizes>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/@Square150x150Logo">
            <DescriptionID>Square150x150Logo</DescriptionID>
            <ExpectedScaleDimensions>80:120x120;100:150x150;140:210x210;180:270x270</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/m2:DefaultTile/@Wide310x150Logo">
            <DescriptionID>Wide310x150Logo</DescriptionID>
            <ExpectedScaleDimensions>80:248x120;100:310x150;140:434x210;180:558x270</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/m2:DefaultTile/@Square310x310Logo">
            <DescriptionID>Square310x310Logo</DescriptionID>
            <ExpectedScaleDimensions>80:248x248;100:310x310;140:434x434;180:558x558</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/m2:DefaultTile/@Square70x70Logo">
            <DescriptionID>Square70x70Logo</DescriptionID>
            <ExpectedScaleDimensions>80:56x56;100:70x70;140:98x98;180:126x126</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/m2:LockScreen/@BadgeLogo">
            <DescriptionID>BadgeLogo</DescriptionID>
            <ExpectedScaleDimensions>100:24x24;140:33x33;180:43x43</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m2:VisualElements/m2:SplashScreen/@Image">
            <DescriptionID>SplashScreen</DescriptionID>
            <ExpectedScaleDimensions>100:620x300;140:868x420;180:1116x540</ExpectedScaleDimensions>
        </AppxManifestImageFileNameQuery>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetPlatformIdentifier)' != 'Windows'">
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/m3:DefaultTile/@Wide310x150Logo">
            <DescriptionID>Wide310x150Logo</DescriptionID>
            <ExpectedScaleDimensions>100:310x150;140:434x210;240:744x360</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/m3:DefaultTile/@Square310x310Logo">
            <DescriptionID>Square310x310Logo</DescriptionID>
            <ExpectedScaleDimensions>100:310x310;140:434x434;240:744x744</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/m3:DefaultTile/@Square71x71Logo">
            <DescriptionID>Square71x71Logo</DescriptionID>
            <ExpectedScaleDimensions>100:71x71;140:99x99;240:170x170</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/@Square44x44Logo">
            <DescriptionID>Square44x44Logo</DescriptionID>
            <ExpectedScaleDimensions>100:44x44;140:62x62;240:106x106</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/@Square150x150Logo">
            <DescriptionID>Square150x150Logo</DescriptionID>
            <ExpectedScaleDimensions>100:150x150;140:210x210;240:360x360</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/m3:SplashScreen/@Image">
            <DescriptionID>SplashScreen</DescriptionID>
            <ExpectedScaleDimensions>100:480x800;140:672x1120;240:1152x1920</ExpectedScaleDimensions>
        </AppxManifestImageFileNameQuery>
        <AppxManifestImageFileNameQuery Include="./m:Package/m:Applications/m:Application/m3:VisualElements/m3:LockScreen/@BadgeLogo">
            <DescriptionID>BadgeLogo</DescriptionID>
            <ExpectedScaleDimensions>100:24x24;140:33x33;240:58x58</ExpectedScaleDimensions>
            <MaximumFileSize>204800</MaximumFileSize>
        </AppxManifestImageFileNameQuery>
    </ItemGroup>


    <!-- The reverse map needs to be added only in appx bundles and only on F5. -->
    <PropertyGroup Condition="'$(InsertReverseMap)' == ''">
        <InsertReverseMap Condition="'$(AppxBundle)' == 'Always' or '$(AppxBundle)' == 'Auto'">true</InsertReverseMap>
        <InsertReverseMap Condition="'$(InsertReverseMap)' == '' or '$(GenerateAppxPackageOnBuild)' == 'true' or '$(OutputType)' != 'WindowsWebApplication'">false</InsertReverseMap>
    </PropertyGroup>

    <PropertyGroup>
        <_ProjectPriFullPathOriginal>$(ProjectPriFullPath)</_ProjectPriFullPathOriginal>
    </PropertyGroup>

    <PropertyGroup Condition="'$(InsertReverseMap)' == 'true'">
        <_ReverseMapProjectPriDirectory>$([System.IO.Path]::GetDirectoryName('$(ProjectPriFullPath)'))\ReverseMap\</_ReverseMapProjectPriDirectory>
        <_ReverseMapProjectPriFileName>$([System.IO.Path]::GetFileName('$(ProjectPriFullPath)'))</_ReverseMapProjectPriFileName>
        <ProjectPriFullPath>$(_ReverseMapProjectPriDirectory)$(_ReverseMapProjectPriFileName)</ProjectPriFullPath>
    </PropertyGroup>
  
    <!-- Manifest metadata items. -->

    <!-- Those will be transformed into Name/Value or Name/Version pairs as follows:                         -->
    <!--                                                                                                     -->
    <!-- If identity of the item (attribute 'Include') points to existing file and there is                  -->
    <!-- no supplied value or version, file version of given file will be extracted and stored               -->
    <!-- as Version attribute of metadata with name equal to file name and extension.                        -->
    <!--                                                                                                     -->
    <!-- If item has metadata 'Value', then it is directly stored in the manifest as name/value pair.        -->
    <!-- If item has metadata 'Version', then it is directly stored in the manifest as name/version pair.    -->
    <!--                                                                                                     -->
    <!-- If metadata 'Name' is supplied, it will be used instead of identity of the item. This is useful     -->
    <!-- if we use binary to extract file version, but want to give it different name in generated manifest. -->

    <ItemGroup Label="AppxManifestMetadata">

        <AppxManifestMetaData Include="SharedGUID" Condition="'$(SharedGUID)' != ''">
          <Value>$(SharedGUID)</Value>
        </AppxManifestMetaData>
      
        <AppxManifestMetaData Include="CodeSharingProject" Condition=" '$(HasSharedItems)' == 'true' or '$(CodeSharingProject)' != '' ">
          <Value Condition=" '$(CodeSharingProject)' != '' ">$(CodeSharingProject)</Value>
          <Value Condition=" '$(CodeSharingProject)' == '' ">248F659F-DAC5-46E8-AC09-60EC9FC95053</Value>
        </AppxManifestMetaData>

        <AppxManifestMetadata Include="TargetFrameworkMoniker" Condition="'$(TargetFrameworkMoniker)' != ''">
            <Value>$(TargetFrameworkMoniker)</Value>
        </AppxManifestMetadata>

        <AppxManifestMetadata Include="VisualStudio">
            <Version>$(VisualStudioVersion)</Version>
        </AppxManifestMetadata>

        <AppxManifestMetadata Include="VisualStudioEdition" Condition="'$(VisualStudioEdition)' != ''">
            <Value>$(VisualStudioEdition)</Value>
        </AppxManifestMetadata>

        <AppxManifestMetadata Include="$(ComSpec)">
            <Name>OperatingSystem</Name>
        </AppxManifestMetadata>

        <AppxManifestMetadata Include="$(AppxMSBuildToolsPath)Microsoft.Build.AppxPackage.dll" />

        <AppxManifestMetaData Include="ProjectGUID" Condition="'$(ProjectGUID)' != ''">
          <Value>$(ProjectGUID)</Value>
        </AppxManifestMetaData>

    </ItemGroup>

    <Import Project="$(MSBuildProjectDirectory)\Microsoft.AppxPackage.Metadata.Overrides.props" Condition="EXISTS( '$(MSBuildProjectDirectory)\Microsoft.AppxPackage.Metadata.Overrides.props' )"/>

    <!-- Mapping between OS version (6.*) and marketing version string. -->
    <ItemGroup>
        <PlatformVersionDescription Include="Windows 8.0">
            <TargetPlatformIdentifier>Windows</TargetPlatformIdentifier>
            <TargetPlatformVersion>8.0</TargetPlatformVersion>
            <OSVersion>6.2.1</OSVersion>
        </PlatformVersionDescription>
        <PlatformVersionDescription Include="Windows 8.1">
            <TargetPlatformIdentifier>Windows</TargetPlatformIdentifier>
            <TargetPlatformVersion>8.1</TargetPlatformVersion>
            <OSVersion>6.3.0</OSVersion>
        </PlatformVersionDescription>
        <PlatformVersionDescription Include="Windows Phone 8.1">
            <TargetPlatformIdentifier>WindowsPhoneApp</TargetPlatformIdentifier>
            <TargetPlatformVersion>8.1</TargetPlatformVersion>
            <OSVersion>6.3.1</OSVersion>
        </PlatformVersionDescription>
        <PlatformVersionDescription Include="Windows Phone Silverlight 8.1">
            <TargetPlatformIdentifier>Windows Phone</TargetPlatformIdentifier>
            <TargetPlatformVersion>8.1</TargetPlatformVersion>
            <OSVersion>6.3.1</OSVersion>
        </PlatformVersionDescription>
    </ItemGroup>

    <!-- Packaging output group default values -->
    <PropertyGroup>
        <IncludeBuiltProjectOutputGroup Condition="'$(IncludeBuiltProjectOutputGroup)' == ''">true</IncludeBuiltProjectOutputGroup>
        <IncludeDebugSymbolsProjectOutputGroup Condition="'$(IncludeDebugSymbolsProjectOutputGroup)' == ''">true</IncludeDebugSymbolsProjectOutputGroup>
        <IncludeDocumentationProjectOutputGroup Condition="'$(IncludeDocumentationProjectOutputGroup)' == ''">false</IncludeDocumentationProjectOutputGroup>
        <IncludeSatelliteDllsProjectOutputGroup Condition="'$(IncludeSatelliteDllsProjectOutputGroup)' == ''">false</IncludeSatelliteDllsProjectOutputGroup>
        <IncludeSourceFilesProjectOutputGroup Condition="'$(IncludeSourceFilesProjectOutputGroup)' == ''">false</IncludeSourceFilesProjectOutputGroup>
        <IncludeContentFilesProjectOutputGroup Condition="'$(IncludeContentFilesProjectOutputGroup)' == ''">true</IncludeContentFilesProjectOutputGroup>
        <IncludeSGenFilesOutputGroup Condition="'$(IncludeSGenFilesOutputGroup)' == ''">false</IncludeSGenFilesOutputGroup>
        <IncludeCopyLocalFilesOutputGroup Condition="'$(IncludeCopyLocalFilesOutputGroup)' == ''">true</IncludeCopyLocalFilesOutputGroup>
        <IncludeComFilesOutputGroup Condition="'$(IncludeComFilesOutputGroup)' == ''">false</IncludeComFilesOutputGroup>
        <IncludeCustomOutputGroupForPackaging Condition="'$(IncludeCustomOutputGroupForPackaging)' == ''">false</IncludeCustomOutputGroupForPackaging>
        <IncludeCopyWinmdArtifactsOutputGroup Condition="'$(IncludeCopyWinmdArtifactsOutputGroup)' == ''">true</IncludeCopyWinmdArtifactsOutputGroup>
        <IncludeSDKRedistOutputGroup Condition="'$(IncludeSDKRedistOutputGroup)' == ''">true</IncludeSDKRedistOutputGroup>
        <IncludePriFilesOutputGroup Condition="'$(IncludePriFilesOutputGroup)' == ''">true</IncludePriFilesOutputGroup>
        <IncludeGetResolvedSDKReferences Condition="'$(IncludeGetResolvedSDKReferences)' == ''">true</IncludeGetResolvedSDKReferences>
        <IncludeProjectPriFile Condition="'$(IncludeProjectPriFile)' == ''">true</IncludeProjectPriFile>
    </PropertyGroup>

    <!-- Entry points for the project systems. -->
    <PropertyGroup Condition="'$(AppxPackage)' == 'true'">
        <CleanPackageAction>_CleanAppxPackage</CleanPackageAction>
        <PackageAction>_GenerateAppxPackage</PackageAction>
        <RebuildPackageAction>_RebuildAppxPackage</RebuildPackageAction>
    </PropertyGroup>


    <!-- Tie into rebuild sequence, to set flag if we are doing rebuilding. -->
    <Target Name="_BeforeBeforeRebuild" BeforeTargets="BeforeRebuild">
        <PropertyGroup>
            <_Rebuilding>true</_Rebuilding>
        </PropertyGroup>
    </Target>

    <!-- Alter behavior of task ResolveAssemblyReferences to error on architecture mismatch. -->
    <PropertyGroup>
        <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>Error</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    </PropertyGroup>

    <!-- ============================================================================================ -->
    <!-- Overriding Publish target from Microsoft.Common.targets to tie into command-line publishing. -->
    <!-- ============================================================================================ -->

    <Target Name="Publish"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="Build;$(PackageAction)"
            />


    <!--
    ***********************************************************************************************
    ***********************************************************************************************
        Actions happening during the build
    ***********************************************************************************************
    ***********************************************************************************************
    -->
    <PropertyGroup>
        <PrepareForRunDependsOn>
            $(PrepareForRunDependsOn);
            _GetAppxManifestSchemaItems;
            _GetSdkToolPaths;
            _GetPriConfigXmlSnippets;
            _ValidatePresenceOfAppxManifestItems;
            GetPackagingOutputs;
            _GetPackageProperties;
            _GenerateProjectPriFile;
            _ComputeAppxPackagePayload;
            _GenerateAppxManifest;
            _ValidateStoreManifest;
            _GenerateAppxPackageRecipe
        </PrepareForRunDependsOn>
        <PrepareForRunDependsOn Condition=" '$(GenerateAppxPackageOnBuild)' == 'true'">
            $(PrepareForRunDependsOn);
            $(PackageAction)
        </PrepareForRunDependsOn>
        <PrepareForRunDependsOn>
            $(PrepareForRunDependsOn);
            _AppendToReadTlogFile;
            _AppendToWriteTlogFile;
            _AppendToPackagingWriteLogs
        </PrepareForRunDependsOn>
    </PropertyGroup>

    <!-- Calculates AppxManifestSchema items. -->
    <Target Name="_GetAppxManifestSchemaItems"
            Condition="'@(AppxManifestSchema)' == ''">

        <GetSdkPropertyValue Condition="'$(TargetPlatformIdentifier)' == 'Windows'"
                             TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                             TargetPlatformVersion="$(TargetPlatformVersion)"
                             TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                             PropertyName="WindowsSdkDir">
            <Output TaskParameter="PropertyValue" PropertyName="_TargetPlatformSdkDir" />
        </GetSdkPropertyValue>

        <GetSdkPropertyValue Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true'"
                             TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                             TargetPlatformVersion="$(TargetPlatformVersion)"
                             TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                             PropertyName="WindowsPhoneSdkDir">
            <Output TaskParameter="PropertyValue" PropertyName="_TargetPlatformSdkDir" />
        </GetSdkPropertyValue>

        <ItemGroup Condition="'$(TargetPlatformIdentifier)' == 'Windows' and '$(TargetPlatformVersion)' == '8.0'">
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema.xsd">
                <NamespaceAlias>m</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2010/manifest</NamespaceUri>
            </AppxManifestSchema>
        </ItemGroup>

        <ItemGroup Condition="'$(TargetPlatformIdentifier)' == 'Windows' and '$(TargetPlatformVersion)' != '8.0'">
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema2010_v2.xsd">
                <NamespaceAlias>m</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2010/manifest</NamespaceUri>
            </AppxManifestSchema>
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema2013.xsd">
                <NamespaceAlias>m2</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2013/manifest</NamespaceUri>
            </AppxManifestSchema>
        </ItemGroup>

        <ItemGroup Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true'">
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema2010_v3.xsd">
                <NamespaceAlias>m</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2010/manifest</NamespaceUri>
            </AppxManifestSchema>
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema2013_v2.xsd">
                <NamespaceAlias>m2</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2013/manifest</NamespaceUri>
            </AppxManifestSchema>
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxManifestSchema2014.xsd">
                <NamespaceAlias>m3</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2014/manifest</NamespaceUri>
            </AppxManifestSchema>
            <AppxManifestSchema Include="$(_TargetPlatformSdkDir)\Include\WinRT\AppxPhoneManifestSchema2014.xsd">
                <NamespaceAlias>mp</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2014/phone/manifest</NamespaceUri>
            </AppxManifestSchema>
        </ItemGroup>

        <PropertyGroup Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true' and Exists('$(_TargetPlatformSdkDir)\Include\WinRT\StoreManifest.xsd')">
            <_StoreManifestSchemaDir>$(_TargetPlatformSdkDir)\Include\WinRT\</_StoreManifestSchemaDir>
        </PropertyGroup>
        
        <PropertyGroup Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true' and !Exists('$(_TargetPlatformSdkDir)\Include\WinRT\StoreManifest.xsd')">
            <VSINSTALLDIR Condition="'$(VSINSTALLDIR)' == ''">$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@12.0)</VSINSTALLDIR>
            <VSINSTALLDIR Condition="'$(VSINSTALLDIR)' == ''">$(registry:HKEY_CURRENT_USER\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@12.0)</VSINSTALLDIR>
            <VSINSTALLDIR Condition="'$(VSINSTALLDIR)' == ''">$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7@12.0)</VSINSTALLDIR>
            <VSINSTALLDIR Condition="'$(VSINSTALLDIR)' == ''">$(registry:HKEY_CURRENT_USER\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7@12.0)</VSINSTALLDIR>
            <_StoreManifestSchemaDir>$(VSINSTALLDIR)Xml\Schemas\</_StoreManifestSchemaDir>
        </PropertyGroup>

        <ItemGroup Condition="'$(_TargetPlatformIsWindowsPhone)' == 'true'">
            <StoreManifestSchema Include="$(_StoreManifestSchemaDir)StoreManifest.xsd">
                <NamespaceAlias>store</NamespaceAlias>
                <NamespaceUri>http://schemas.microsoft.com/appx/2010/StoreManifest</NamespaceUri>
            </StoreManifestSchema>
        </ItemGroup>

        <!--
            Define AppxValidateStoreManifest based on whether we ended up with any
            StoreManifestSchemas or not.  This keeps the logic agnostic about which
            TargetPlatform/Version supports validating the Store manifest.
        -->
        <PropertyGroup>
            <AppxValidateStoreManifest Condition="'$(AppxValidateStoreManifest)' == '' and '@(StoreManifestSchema)' != ''">true</AppxValidateStoreManifest>
        </PropertyGroup>
    </Target>

    <!-- Finds SDK tool executables paths. -->
    <Target Name="_GetSdkToolPaths">

        <PropertyGroup>
            <MSBuildExtensionsPath64Exists Condition="'$(MSBuildExtensionsPath64)' == ''">false</MSBuildExtensionsPath64Exists>
            <MSBuildExtensionsPath64Exists Condition="'$(MSBuildExtensionsPath64)' != ''">true</MSBuildExtensionsPath64Exists>
        </PropertyGroup>
        
        <GetSdkToolFullPath ToolName="MakePri.exe"
                            ToolFullPath="$(MakePriExeFullPath)"
                            ToolArchitecture="$(MakePriArchitecture)"
                            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                            TargetPlatformVersion="$(TargetPlatformVersion)"
                            TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                            MSBuildExtensionsPath64Exists="$(MSBuildExtensionsPath64Exists)">
            <Output TaskParameter="ActualToolFullPath" PropertyName="MakePriExeFullPath" />
            <Output TaskParameter="ActualToolArchitecture" PropertyName="MakePriArchitecture" />
        </GetSdkToolFullPath>

        <Message Importance="low" Text="MakePriExeFullPath: $(MakePriExeFullPath)" />
        
        <GetSdkToolFullPath ToolName="MakeAppx.exe"
                            ToolFullPath="$(MakeAppxExeFullPath)"
                            ToolArchitecture="$(MakeAppxArchitecture)"
                            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                            TargetPlatformVersion="$(TargetPlatformVersion)"
                            TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                            MSBuildExtensionsPath64Exists="$(MSBuildExtensionsPath64Exists)">
            <Output TaskParameter="ActualToolFullPath" PropertyName="MakeAppxExeFullPath" />
        </GetSdkToolFullPath>

        <Message Importance="low" Text="MakeAppxExeFullPath: $(MakeAppxExeFullPath)" />

        <GetSdkToolFullPath ToolName="signtool.exe"
                            ToolFullPath="$(SignAppxPackageExeFullPath)"
                            ToolArchitecture="$(SignToolArchitecture)"
                            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                            TargetPlatformVersion="$(TargetPlatformVersion)"
                            TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                            MSBuildExtensionsPath64Exists="$(MSBuildExtensionsPath64Exists)">
            <Output TaskParameter="ActualToolFullPath" PropertyName="SignAppxPackageExeFullPath" />
        </GetSdkToolFullPath>

        <Message Importance="low" Text="SignAppxPackageExeFullPath: $(SignAppxPackageExeFullPath)" />

        <GetSdkPropertyValue TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                             TargetPlatformVersion="$(TargetPlatformVersion)"
                             TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                             PropertyName="MakePriExtensionPath"
                             Condition="'$(MakePriExtensionPath)' == ''">
            <Output TaskParameter="PropertyValue" PropertyName="MakePriExtensionPath" />
        </GetSdkPropertyValue>

        <Message Importance="low" Text="MakePriExtensionPath: $(MakePriExtensionPath)" />

        <GetSdkPropertyValue TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                             TargetPlatformVersion="$(TargetPlatformVersion)"
                             TargetPlatformSdkRootOverride="$(TargetPlatformSdkRootOverride)"
                             PropertyName="MakePriExtensionPath_x64"
                             Condition="'$(MakePriExtensionPath_x64)' == ''">
            <Output TaskParameter="PropertyValue" PropertyName="MakePriExtensionPath_x64" />
        </GetSdkPropertyValue>

        <Message Importance="low" Text="MakePriExtensionPath_x64: $(MakePriExtensionPath_x64)" />
        
        <PropertyGroup>
            <OutOfProcessMakePriExtensionPath Condition="'$(MakePriArchitecture)' != 'x64'">$(MakePriExtensionPath)</OutOfProcessMakePriExtensionPath>
            <OutOfProcessMakePriExtensionPath Condition="'$(MakePriArchitecture)' == 'x64'">$(MakePriExtensionPath_x64)</OutOfProcessMakePriExtensionPath>
        </PropertyGroup>

        <Message Importance="low" Text="OutOfProcessMakePriExtensionPath: $(OutOfProcessMakePriExtensionPath)" />

        <PropertyGroup>
            <InProcessMakePriExtensionPath Condition="!$([System.Environment]::Is64BitProcess)">$(MakePriExtensionPath)</InProcessMakePriExtensionPath>
            <InProcessMakePriExtensionPath Condition="$([System.Environment]::Is64BitProcess)">$(MakePriExtensionPath_x64)</InProcessMakePriExtensionPath>
        </PropertyGroup>

        <Message Importance="low" Text="InProcessMakePriExtensionPath: $(InProcessMakePriExtensionPath)" />

    </Target>
    
    <!-- Calculates paths to priconfig.xml snippets -->
    <Target Name="_GetPriConfigXmlSnippets">

        <ItemGroup Condition="'$(AppxPriConfigXmlPackagingSnippetPath)' == ''">
            <_AppxPriConfigXmlPackagingSnippetItem Include="@(None)" Condition="'%(Identity)' == 'priconfig.packaging.xml'" />
            <_AppxPriConfigXmlPackagingSnippetItem Include="@(Xml)" Condition="'%(Identity)' == 'priconfig.packaging.xml' and '%(Xml.DeploymentContent)' == 'false'" />
        </ItemGroup>

        <PropertyGroup Condition="'@(_AppxPriConfigXmlPackagingSnippetItem)' != ''">
            <AppxPriConfigXmlPackagingSnippetPath>%(_AppxPriConfigXmlPackagingSnippetItem.FullPath)</AppxPriConfigXmlPackagingSnippetPath>
        </PropertyGroup>

        <ItemGroup Condition="'$(AppxPriConfigXmlDefaultSnippetPath)' == ''">
            <_AppxPriConfigXmlDefaultSnippetItem Include="@(None)" Condition="'%(Identity)' == 'priconfig.default.xml'" />
            <_AppxPriConfigXmlDefaultSnippetItem Include="@(Xml)" Condition="'%(Identity)' == 'priconfig.default.xml' and '%(Xml.DeploymentContent)' == 'false'" />
        </ItemGroup>

        <PropertyGroup Condition="'@(_AppxPriConfigXmlDefaultSnippetItem)' != ''">
            <AppxPriConfigXmlDefaultSnippetPath>%(_AppxPriConfigXmlDefaultSnippetItem.FullPath)</AppxPriConfigXmlDefaultSnippetPath>
        </PropertyGroup>

    </Target>

    <PropertyGroup>
        <ValidatePresenceOfAppxManifestItemsDependsOn>
            $(ValidatePresenceOfAppxManifestItemsDependsOn);
        </ValidatePresenceOfAppxManifestItemsDependsOn>
    </PropertyGroup>

    <!-- Finds out if there is a custom AppxManifest override item, -->
    <!-- validates that one and only one manifest exists,           -->
    <!-- extracts identity name and version out of the manifest,    -->
    <!-- defines ProjectPriIndexName,                               -->
    <!-- and defines SourceAppxManifest item.                       -->
    <Target Name="_ValidatePresenceOfAppxManifestItems"
            DependsOnTargets="$(ValidatePresenceOfAppxManifestItemsDependsOn)"
            >

        <ItemGroup>
            <CustomAppxManifest Include="@(Content)" Condition="'%(Identity)' == 'AppxManifest.xml'" />
        </ItemGroup>

        <ValidateAppxManifestItems AppxPackageProject="$(AppxPackage)"
                                   AppxManifestItems="@(AppxManifest)"
                                   CustomAppxManifestItems="@(CustomAppxManifest)">
            <Output TaskParameter="IdentityName" PropertyName="AppxManifestIdentityName" />
            <Output TaskParameter="IdentityVersion" PropertyName="AppxManifestIdentityVersion" />
        </ValidateAppxManifestItems>

        <ItemGroup>
            <SourceAppxManifest Include="@(AppxManifest)" Condition="'@(AppxManifest)' != ''" />
            <SourceAppxManifest Include="@(CustomAppxManifest)" Condition="'@(CustomAppxManifest)' != ''" />
        </ItemGroup>

        <PropertyGroup Condition="'$(ProjectPriIndexName)' == ''">
            <ProjectPriIndexName Condition="'$(AppxPackage)' == 'true'">$(AppxManifestIdentityName)</ProjectPriIndexName>
            <ProjectPriIndexName Condition="'$(AppxPackage)' != 'true'">$(AppxPriInitialPath)</ProjectPriIndexName>
        </PropertyGroup>

        <PropertyGroup>
            <_CustomAppxManifestUsed Condition="'@(CustomAppxManifest)' == ''">false</_CustomAppxManifestUsed>
            <_CustomAppxManifestUsed Condition="'@(CustomAppxManifest)' != ''">true</_CustomAppxManifestUsed>
        </PropertyGroup>
    </Target>

    <!-- ============================ -->
    <!-- Generating project PRI file. -->
    <!-- ============================ -->

    <PropertyGroup>
        <_GenerateProjectPriFileDependsOn>
            $(_GenerateProjectPriFileDependsOn);
            BeforeGenerateProjectPriFile;
            _GeneratePrisForPortableLibraries;
            _GetPriFilesFromPayload;
            _ComputeInputPriFiles;
            _GenerateProjectPriConfigurationFiles;
            _CalculateInputsForGenerateProjectPriFileCore;
            _GenerateProjectPriFileCore;
            _AddFileReadsAndFileWritesForProjectPri;
            _CreateProjectPriFileItem;
            _ExpandProjectPriFile;
            _ExpandPriFiles;
            AfterGenerateProjectPriFile
        </_GenerateProjectPriFileDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <_PriConfigXmlPath>$(IntermediateOutputPath)priconfig.xml</_PriConfigXmlPath>
        <_LayoutResfilesPath>$(IntermediateOutputPath)layout.resfiles</_LayoutResfilesPath>
        <_ResourcesResfilesPath>$(IntermediateOutputPath)resources.resfiles</_ResourcesResfilesPath>
        <_PriResfilesPath>$(IntermediateOutputPath)pri.resfiles</_PriResfilesPath>
        <_QualifiersPath>$(IntermediateOutputPath)qualifiers.txt</_QualifiersPath>
        <_MultipleQualifiersPerDimensionFoundPath>$(IntermediateOutputPath)MultipleQualifiersPerDimensionFound.txt</_MultipleQualifiersPerDimensionFoundPath>
    </PropertyGroup>

    <Target Name="_GenerateProjectPriFile"
            Condition="'$(AppxGeneratePriEnabled)' == 'true'"
            DependsOnTargets="$(_GenerateProjectPriFileDependsOn)"
            />

    <!-- Override to specify actions to happen before generating project PRI file. -->
    <Target Name="BeforeGenerateProjectPriFile" />

    <!-- Generates a PRI file for all managed libraries that contain .resources files   -->
    <!-- in them (and their satellites).  This allows a .NET Portable Library to be     -->
    <!-- built with only .resources files, yet still be localized when compiled into    -->
    <!-- an AppX package where the ResourceManager uses the WinRT resource manager.     -->
    <Target Name="_GeneratePrisForPortableLibraries"
            Condition="'$(AppxPackage)' == 'true' and '$(AppxGeneratePrisForPortableLibrariesEnabled)' == 'true'"
            >

        <ItemGroup>
            <_LibrariesUnfiltered Include="@(PackagingOutputs)" Condition="'%(Extension)' == '.dll'" />
        </ItemGroup>

        <RemovePayloadDuplicates Inputs="@(_LibrariesUnfiltered)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_Libraries" />
        </RemovePayloadDuplicates>

        <GenerateResource
                    SdkToolsPath="$(ResgenToolPath)"
                    ExtractResWFiles="true"
                    Sources="@(_Libraries)"
                    UseSourcePath="$(UseSourcePath)"
                    References="@(ReferencePath)"
                    AdditionalInputs="$(MSBuildAllProjects)"
                    NeverLockTypeAssemblies="$(GenerateResourceNeverLockTypeAssemblies)"
                    StateFile="$(IntermediateOutputPath)$(MSBuildProjectFile).GenerateResource.Cache"
                    OutputDirectory="$(IntermediateOutputPath)"
                    ExecuteAsTool="false"
                    MSBuildRuntime="$(GenerateResourceMSBuildRuntime)"
                    MSBuildArchitecture="$(GenerateResourceMSBuildArchitecture)">

            <Output TaskParameter="FilesWritten" ItemName="ExtractedFileWrites"/>
            <Output TaskParameter="OutputResources" ItemName="CreatedResWFiles" />
        </GenerateResource>

        <ItemGroup>
            <FileWrites Include="@(ExtractedFileWrites)" />
        </ItemGroup>

        <Message Importance="low" Text="Created resource files: @(CreatedResWFiles)" />

        <!-- Now generate a PRI file for each set of ResW files (ie, a main assembly + all satellites). -->
        <!-- Note: The task relies on some metadata set on each ITaskItem, set by GenerateResource.  -->

        <CreatePriFilesForPortableLibraries
                        MakePriExeFullPath="$(MakePriExeFullPath)"
                        MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                        ContentToIndex="@(CreatedResWFiles)"
                        IntermediateDirectory="$(IntermediateOutputPath)"
                        AdditionalMakepriExeParameters="$(AppxCreatePriFilesForPortableLibrariesAdditionalMakepriExeParameters)"
                        DefaultResourceLanguage="$(DefaultResourceLanguage)"
                        DefaultResourceQualifiers="$(AppxDefaultResourceQualifiers)"
                        IntermediateExtension="$(AppxIntermediateExtension)"
                        TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                        TargetPlatformVersion="$(TargetPlatformResourceVersion)"
                        AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
                        >
            <Output TaskParameter="IntermediateFileWrites" ItemName="FileWrites" />
            <Output TaskParameter="CreatedPriFiles" ItemName="_PortableLibraryCreatedPriFiles" />
        </CreatePriFilesForPortableLibraries>

        <Message Importance="low" Text="Created PRI files: @(_PortableLibraryCreatedPriFiles)" />

        <ItemGroup>
            <FileWrites Include="@(_PortableLibraryCreatedPriFiles)" />
        </ItemGroup>

    </Target>

    <!-- Get list of PRI files from the payload. -->
    <Target Name="_GetPriFilesFromPayload"
            Condition="'$(AppxPackage)' == 'true'"
            >

        <ItemGroup>
            <_PriFilesFromPayloadRaw Include="@(PackagingOutputs)"
                                     Condition="'%(Extension)' == '.pri' 
                                            and '%(ProjectName)' != '$(ProjectName)'"
                                     />
            <_PriFilesFromPayloadRaw Include="@(PackagingOutputs)"
                                     Condition="'%(Extension)' == '.pri' 
                                            and '%(ProjectName)' == '$(ProjectName)' 
                                            and '%(OutputGroup)' != 'ProjectPriFile'"
                                     />
        </ItemGroup>

        <RemoveDuplicatePriFiles Inputs="@(_PriFilesFromPayloadRaw)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_PriFilesFromPayload" />
        </RemoveDuplicatePriFiles>

    </Target>

    <!-- Compute final list of input PRI files. -->
    <Target Name="_ComputeInputPriFiles"
            Condition="'$(AppxPackage)' == 'true'"
            >

        <ItemGroup>
            <_PriFile Include="@(_PriFilesFromPayload)" />
            <_PriFile Include="@(_PortableLibraryCreatedPriFiles)" />
        </ItemGroup>

    </Target>

    <!-- Generates configuration files for makepri.exe. -->
    <Target Name="_GenerateProjectPriConfigurationFiles"
            Inputs="$(MSBuildAllProjects);@(_PriFile);$(AppxPriConfigXmlDefaultSnippetPath)"
            Outputs="$(_PriConfigXmlPath);$(_LayoutResfilesPath);$(_ResourcesResfilesPath);$(_PriResfilesPath)"
            >

        <ItemGroup>
            <_LayoutFile Include="@(PackagingOutputs)" Condition="'%(OutputGroup)' == 'ContentFilesProjectOutputGroup' and '%(ProjectName)' == '$(ProjectName)'" />
            <_LayoutFile Include="@(PackagingOutputs)" Condition="'%(OutputGroup)' == 'CustomOutputGroupForPackaging' and '%(ProjectName)' == '$(ProjectName)'" />
        </ItemGroup>

        <GeneratePriConfigurationFiles
            LayoutResfilesPath="$(_LayoutResfilesPath)"
            ResourcesResfilesPath="$(_ResourcesResfilesPath)"
            PriResfilesPath="$(_PriResfilesPath)"
            LayoutFiles="@(_LayoutFile)"
            PRIResourceFiles="@(PRIResource)"
            PriFiles="@(_PriFile)"
            IntermediateExtension="$(AppxIntermediateExtension)"
            />

        <CreatePriConfigXmlForFullIndex
            PriConfigXmlPath="$(_PriConfigXmlPath)"
            LayoutResfilesPath="$(_LayoutResfilesPath)"
            ResourcesResfilesPath="$(_ResourcesResfilesPath)"
            PriResfilesPath="$(_PriResfilesPath)"
            PriInitialPath="$(AppxPriInitialPath)"
            DefaultResourceLanguage="$(DefaultResourceLanguage)"
            DefaultResourceQualifiers="$(AppxDefaultResourceQualifiers)"
            IntermediateExtension="$(AppxIntermediateExtension)"
            PriConfigXmlDefaultSnippetPath="$(AppxPriConfigXmlDefaultSnippetPath)"
            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
            TargetPlatformVersion="$(TargetPlatformResourceVersion)"
            />

        <Message Text="$(MSBuildProjectName) -> $(_PriConfigXmlPath)" />
        <Message Text="$(MSBuildProjectName) -> $(_LayoutResfilesPath)" />
        <Message Text="$(MSBuildProjectName) -> $(_ResourcesResfilesPath)" />
        <Message Text="$(MSBuildProjectName) -> $(_PriResfilesPath)" />

    </Target>

    <Target Name="_SuppressDeploymentOnlyFeatures">
        
        <!-- Disable adding the reverse map to the PRI file. This is necessary when building from the packaging wizard. -->
        <PropertyGroup>
            <InsertReverseMap>false</InsertReverseMap>
            <ProjectPriFullPath>$(_ProjectPriFullPathOriginal)</ProjectPriFullPath>
        </PropertyGroup>
        
    </Target>

    <!-- Calculate inputs for _GenerateProjectPriFileCore. -->
    <Target Name="_CalculateInputsForGenerateProjectPriFileCore">
        <ItemGroup>
            <_GenerateProjectPriFileCoreInput Include="$(_PriConfigXmlPath)" />
            <_GenerateProjectPriFileCoreInput Include="$(_LayoutResfilesPath)" />
            <_GenerateProjectPriFileCoreInput Include="$(_ResourcesResfilesPath)" />
            <_GenerateProjectPriFileCoreInput Include="$(_PriResfilesPath)" />
            <_GenerateProjectPriFileCoreInput Include="@(PRIResource)" />
            <_GenerateProjectPriFileCoreInput Include="@(_PriFile)" />
            <_GenerateProjectPriFileCoreInput Include="@(SourceAppxManifest)" />
        </ItemGroup>
    </Target>

    <!-- Generates intermediate PRI file for the current project. -->
    <Target Name="_GenerateProjectPriFileCore"
            Inputs="$(MSBuildAllProjects);@(_GenerateProjectPriFileCoreInput)"
            Outputs="$(ProjectPriFullPath)"
            >

        <MakeDir Condition="'$(InsertReverseMap)' == 'true'"
                 Directories="$(_ReverseMapProjectPriDirectory)"
                 />

        <GenerateProjectPriFile MakePriExeFullPath="$(MakePriExeFullPath)"
                                MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                                PriConfigXmlPath="$(_PriConfigXmlPath)"
                                IndexFilesForQualifiersCollection="$(_LayoutResfilesPath);$(_ResourcesResfilesPath)"
                                ProjectPriIndexName="$(ProjectPriIndexName)"
                                InsertReverseMap="$(InsertReverseMap)"
                                ProjectDirectory="$(ProjectDir)"
                                OutputFileName="$(ProjectPriFullPath)"
                                QualifiersPath="$(_QualifiersPath)"
                                IntermediateExtension="$(AppxIntermediateExtension)"
                                AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
                                MultipleQualifiersPerDimensionFoundPath="$(_MultipleQualifiersPerDimensionFoundPath)"
                                AdditionalMakepriExeParameters="$(AppxGenerateProjectPriFileAdditionalMakepriExeParameters)"
                                />

        <Message Text="$(MSBuildProjectName) -> $(ProjectPriFileName)" />

    </Target>

    <!-- Add FileReads and FileWrites done during generation of project PRI file. -->
    <Target Name="_AddFileReadsAndFileWritesForProjectPri">

        <ItemGroup>
            <FileReads Include="@(_GenerateProjectPriFileCoreInput)" />
        </ItemGroup>

        <ItemGroup>
            <FileWrites Include="$(_PriConfigXmlPath)" />
            <FileWrites Include="$(_PriConfigXmlPath)$(AppxIntermediateExtension)" />
            <FileWrites Include="$(_LayoutResfilesPath)" />
            <FileWrites Include="$(_LayoutResfilesPath)$(AppxIntermediateExtension)" />
            <FileWrites Include="$(_ResourcesResfilesPath)" />
            <FileWrites Include="$(_ResourcesResfilesPath)$(AppxIntermediateExtension)" />
            <FileWrites Include="$(_PriResfilesPath)" />
            <FileWrites Include="$(_PriResfilesPath)$(AppxIntermediateExtension)" />
            <FileWrites Include="$(ProjectPriFullPath)" />
            <FileWrites Include="$(_QualifiersPath)" />
            <FileWrites Include="$(_QualifiersPath)$(AppxIntermediateExtension)" />
            <FileWrites Include="$(_MultipleQualifiersPerDimensionFoundPath)" />
        </ItemGroup>

    </Target>

    <!--Create ProjectPriFile item. -->
    <Target Name="_CreateProjectPriFileItem"
            Condition="'$(AppxPackage)' == 'true'"
            >

        <ItemGroup>
            <ProjectPriFile Remove="@(ProjectPriFile)" />
            <ProjectPriFile Include="$(ProjectPriFullPath)">
                <TargetPath>$(ProjectPriFileName)</TargetPath>
            </ProjectPriFile>
        </ItemGroup>

        <PropertyGroup Condition="'$(AppxUseResourceIndexerApi)' == ''">
            <OsVersion>$(registry:HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion@CurrentVersion)</OsVersion>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxUseResourceIndexerApi)' == ''">
            <AppxUseResourceIndexerApi Condition="'$(OsVersion)' &lt; '6.3'">false</AppxUseResourceIndexerApi>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxUseResourceIndexerApi)' == ''">
            <AppxUseResourceIndexerApi>true</AppxUseResourceIndexerApi>
        </PropertyGroup>

        <Message Importance="low" Text="AppxUseResourceIndexerApi=$(AppxUseResourceIndexerApi)" />
        
    </Target>

    <!-- Expand content of project PRI file. -->
    <Target Name="_ExpandProjectPriFile"
            Condition="'$(AppxPackage)' == 'true' and '$(AppxUseResourceIndexerApi)' == 'false'">

        <ExpandPriContent Inputs="@(ProjectPriFile)"
                          MakePriExeFullPath="$(MakePriExeFullPath)"
                          MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                          IntermediateDirectory="$(IntermediateOutputPath)"
                          AdditionalMakepriExeParameters="$(AppxExpandPriContentAdditionalMakepriExeParameters)"
                          >
            <Output TaskParameter="Expanded" ItemName="IndexedPayloadFiles" />
            <Output TaskParameter="IntermediateFileWrites" ItemName="FileWrites" />
        </ExpandPriContent>

    </Target>

    <!-- Expand content of project PRI file. -->
    <Target Name="_ExpandMainPriFile">

        <ExpandPriContent Inputs="$(AppxBundleSplitResourcesPriPath)"
                          MakePriExeFullPath="$(MakePriExeFullPath)"
                          MakePriExtensionPath="$(MakePriExtensionPath)"
                          IntermediateDirectory="$(IntermediateOutputPath)"
                          AdditionalMakepriExeParameters="$(AppxExpandPriContentAdditionalMakepriExeParameters)"
                          >
            <Output TaskParameter="Expanded" ItemName="IndexedMainPayloadFiles" />
            <Output TaskParameter="IntermediateFileWrites" ItemName="FileWrites" />
        </ExpandPriContent>

    </Target>
    
    <!-- Expand content of PRI files. -->
    <Target Name="_ExpandPriFiles">

        <ItemGroup>
            <_PriFilesToExpand Include="@(_PriFilesFromPayload)"
                               Condition="'%(OutputGroup)' != 'ProjectPriFile'
                                      and '%(OutputGroup)' != 'SDKRedistOutputGroup'"
                               />
        </ItemGroup>

        <ExpandPriContent Inputs="@(_PriFilesToExpand)"
                          MakePriExeFullPath="$(MakePriExeFullPath)"
                          MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                          IntermediateDirectory="$(IntermediateOutputPath)"
                          AdditionalMakepriExeParameters="$(AppxExpandPriContentAdditionalMakepriExeParameters)"
                          >
            <Output TaskParameter="Expanded" ItemName="_ExpandedPriPayload" />
            <Output TaskParameter="IntermediateFileWrites" ItemName="FileWrites" />
        </ExpandPriContent>

    </Target>

    <!-- Override to specify actions to happen after generating project PRI file. -->
    <Target Name="AfterGenerateProjectPriFile" />

    <PropertyGroup>
        <_ProjectArchitecturesFilePath>$(IntermediateOutputPath)ProjectArchitectures.txt</_ProjectArchitecturesFilePath>
    </PropertyGroup>

    <!-- ================================================================================================== -->
    <!-- Computes Appx package payload that will be included in the appx package (excluding Appx manifest). -->
    <!-- ================================================================================================== -->

    <Target Name="_ComputeAppxPackagePayload"
            Condition="'$(AppxPackage)' == 'true'"
            >

        <ItemGroup>
            <_UnfilteredAppxPackagePayload Include="@(PackagingOutputs)" Condition="'%(Extension)' != '.pri' AND '%(OutputGroup)' != 'GetResolvedSDKReferences' AND '%(OutputGroup)' != '_GetProjectArchitecture'"/>
            <_UnfilteredAppxPackagePayload Include="@(_ExpandedPriPayload)" />
            <_UnfilteredAppxPackagePayload Include="@(ProjectPriFile)" />
        </ItemGroup>

        <RemovePayloadDuplicates Inputs="@(_UnfilteredAppxPackagePayload)"
                                 HasSharedItems="$(HasSharedItems)"
                                 MSBuildProjectDirectory="$(MSBuildProjectDirectory)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="AppxPackagePayload" />
        </RemovePayloadDuplicates>

        <ItemGroup>
            <PDBPayload Include="@(AppxPackagePayload)" Condition="'%(Extension)'=='.pdb'" />
        </ItemGroup>

        <!-- 
        If packaging outputs contain file named AppxManifest.xml, 
        this is override manifest and it is handled elsewhere.
        -->
        <ItemGroup>
            <AppxPackagePayload Remove="@(AppxPackagePayload)" Condition="'%(TargetPath)' == 'AppxManifest.xml'" />
        </ItemGroup>

        <ItemGroup>
            <_ProjectArchitectureFromPayload Include="@(PackagingOutputs)"
                                             Condition="'%(PackagingOutputs.OutputGroup)' == '_GetProjectArchitecture'
                                                    AND '%(PackagingOutputs.MSBuildSourceProjectFile)' != ''"
                                             />
            <_ProjectArchitectureFromPayload Include="@(PackagingOutputs)"
                                             Condition="'%(PackagingOutputs.OutputGroup)' == '_GetProjectArchitecture'
                                                    AND '%(PackagingOutputs.MSBuildSourceProjectFile)' == ''"
                                             >
                <MSBuildSourceProjectFile>$(MSBuildProjectFullPath)</MSBuildSourceProjectFile>
            </_ProjectArchitectureFromPayload>
        </ItemGroup>

        <GenerateProjectArchitecturesFile
            ProjectArchitectures="@(_ProjectArchitectureFromPayload)"
            ProjectArchitecturesFilePath="$(_ProjectArchitecturesFilePath)"
            />

        <ItemGroup>
            <FileWrites Include="$(_ProjectArchitecturesFilePath)" />
        </ItemGroup>

    </Target>

    <!-- ==================================================================================== -->
    <!-- Generating Appx manifest.                                                            -->
    <!-- Happens after generating PRI file, for every project which can be packaged/deployed. -->
    <!-- ==================================================================================== -->

    <PropertyGroup>
        <_GenerateAppxManifestDependsOn>
            $(_GenerateAppxManifestDependsOn);
            BeforeGenerateAppxManifest;
            _GetRecursiveResolvedSDKReferences;
            _CopyCurrentProjectAppxManifestOverride;
            _CalculateInputsForGenerateCurrentProjectAppxManifest;
            _GenerateCurrentProjectAppxManifest;
            _CreateFinalAppxManifestItem;
            _FindStoreAssociationFile;
            _ValidateAppxManifest;
            AfterGenerateAppxManifest
        </_GenerateAppxManifestDependsOn>
    </PropertyGroup>

    <Target Name="_GenerateAppxManifest"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="$(_GenerateAppxManifestDependsOn)"
            />

    <!-- Override to specify actions to happen before generating Appx manifest. -->
    <Target Name="BeforeGenerateAppxManifest" />

    <!-- Extract SDK references from the payload and filters out duplicates. -->
    <Target Name="_GetRecursiveResolvedSDKReferences">

        <ItemGroup>
            <_UnfilteredRecursiveResolvedSDKReference Include="@(PackagingOutputs)"
                                                      Condition="'%(OutputGroup)' == 'GetResolvedSDKReferences'" />
        </ItemGroup>

        <RemoveDuplicateSDKReferences Inputs="@(_UnfilteredRecursiveResolvedSDKReference)">
            <Output TaskParameter="Filtered" ItemName="RecursiveResolvedSDKReference" />
        </RemoveDuplicateSDKReferences>

        <ItemGroup>
            <FrameworkSdkReference Include="@(RecursiveResolvedSDKReference)"
                                   Condition="'%(RecursiveResolvedSDKReference.FrameworkIdentity)' != ''"
                             />
        </ItemGroup>

        <ItemGroup>
            <NonFrameworkSdkReference Include="@(RecursiveResolvedSDKReference)"
                                      Condition="'%(RecursiveResolvedSDKReference.FrameworkIdentity)' == ''"
                                />
        </ItemGroup>

        <!-- Add non-framework SDK versions to manifest build metadata. -->
        <ItemGroup>
            <AppxManifestMetadata Include="@(NonFrameworkSdkReference)">
                <Name>%(NonFrameworkSdkReference.SimpleName)</Name>
                <Version>%(NonFrameworkSdkReference.Version)</Version>
            </AppxManifestMetadata>
        </ItemGroup>

        <GetFrameworkSdkPackages FrameworkSdkReferences="@(FrameworkSdkReference)">
            <Output TaskParameter="FrameworkSdkPackages" ItemName="FrameworkSdkPackage" />
        </GetFrameworkSdkPackages>

    </Target>

    <!-- Copy overriden AppxManifest.xml to final location. -->
    <!-- Inputs: [CustomAppxManifest] Name of the manifest file override. -->
    <!-- Outputs: [FinalAppxManifest] Final manifest file which will be included in the appx package. -->
    <Target Name="_CopyCurrentProjectAppxManifestOverride"
            Condition="Exists(@(CustomAppxManifest))"
            Inputs="$(MSBuildAllProjects);@(CustomAppxManifest)"
            Outputs="$(FinalAppxManifestName)">

        <Copy UseHardlinksIfPossible="$(AppxUseHardlinksIfPossible)"
              SkipUnchangedFiles="$(AppxSkipUnchangedFiles)"
              SourceFiles="@(CustomAppxManifest)"
              DestinationFiles="$(FinalAppxManifestName)"
              />

    </Target>

    <!-- Calculates list of input for _GenerateCurrentProjectAppxManifest target. -->
    <Target Name="_CalculateInputsForGenerateCurrentProjectAppxManifest">

        <ItemGroup Condition="'$(AppxHarvestWinmdRegistration)' == 'true'">
            <_WinmdFilesFromWinmdArtifacts Include="@(PackagingOutputs)"
                                         Condition="'%(PackagingOutputs.Extension)' == '.winmd' 
                                                and '%(PackagingOutputs.OutputGroup)' == 'CopyWinmdArtifactsOutputGroup'
                                                and '%(PackagingOutputs.ProjectName)' != '$(ProjectName)'" />
            <_WinmdFilesFromReferences Include="@(PackagingOutputs)"
                                     Condition="'%(PackagingOutputs.Extension)' == '.winmd' 
                                            and '%(PackagingOutputs.OutputGroup)' == 'CopyLocalFilesOutputGroup'" />
            <_WinmdFilesFromOtherGroups Include="@(PackagingOutputs)"
                                      Condition="'%(PackagingOutputs.Extension)' == '.winmd' 
                                             and '%(PackagingOutputs.OutputGroup)' != 'CopyWinmdArtifactsOutputGroup'
                                             and '%(PackagingOutputs.OutputGroup)' != 'CopyLocalFilesOutputGroup'
                                             and '%(PackagingOutputs.ResolvedFrom)' != 'GetSDKReferenceFiles'" />
            <_WinmdFilesFromSDKs Include="@(PackagingOutputs)"
                               Condition="'%(PackagingOutputs.Extension)' == '.winmd'
                                      and '%(PackagingOutputs.ResolvedFrom)' == 'GetSDKReferenceFiles'" />
        </ItemGroup>

        <RemovePayloadDuplicates Inputs="@(_WinmdFilesFromWinmdArtifacts)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_AppxWinmdFilesToHarvest" />
        </RemovePayloadDuplicates>

        <RemovePayloadDuplicates Inputs="@(_WinmdFilesFromReferences)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_AppxWinmdFilesToHarvest" />
        </RemovePayloadDuplicates>

        <RemovePayloadDuplicates Inputs="@(_WinmdFilesFromOtherGroups)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_AppxWinmdFilesToHarvest" />
        </RemovePayloadDuplicates>

        <RemovePayloadDuplicates Inputs="@(_WinmdFilesFromSDKs)"
                                 ProjectName="$(ProjectName)"
                                 Platform="$(Platform)">
            <Output TaskParameter="Filtered" ItemName="_AppxSDKWinmdFilesForHarvest" />
        </RemovePayloadDuplicates>


        <ItemGroup>
            <_GenerateCurrentProjectAppxManifestInput Include="@(AppxManifest)" />
            <_GenerateCurrentProjectAppxManifestInput Include="@(AppxManifestSchema)" />
            <_GenerateCurrentProjectAppxManifestInput Include="$(PackageCertificateKeyFile)" />
            <_GenerateCurrentProjectAppxManifestInput Include="@(_AppxWinmdFilesToHarvest)" />
            <_GenerateCurrentProjectAppxManifestInput Include="@(_AppxSDKWinmdFilesForHarvest)" />
            <_GenerateCurrentProjectAppxManifestInput Include="$(_QualifiersPath)" />
        </ItemGroup>

    </Target>

    <!-- Generates a final AppxManifest.xml that will be included in the appx package. -->
    <!-- The generation includes pre-processing of any tokens in the input manifest file to produce a valid appx manifest file. -->
    <!-- Input: [AppxManifest] Name of the manifest file template. -->
    <!-- Output: [FinalAppxManifest] Final manifest file which will be included in the appx package. -->
    <Target Name="_GenerateCurrentProjectAppxManifest"
            Condition="Exists(@(AppxManifest))"
            Inputs="$(MSBuildAllProjects);@(_GenerateCurrentProjectAppxManifestInput)"
            Outputs="$(FinalAppxManifestName)">

        <ItemGroup>
            <AppxManifestMetadata Include="$(MakePriExeFullPath)" />
        </ItemGroup>

        <GenerateAppxManifest AppxManifestInput="@(AppxManifest)"
                              AppxManifestOutput="$(FinalAppxManifestName)"
                              ApplicationExecutableName="$(TargetName)"
                              FrameworkSdkReferences="@(FrameworkSdkReference)"
                              NonFrameworkSdkReferences="@(NonFrameworkSdkReference)"
                              CertificateThumbprint="$(PackageCertificateThumbprint)"
                              CertificateFile="$(PackageCertificateKeyFile)"
                              DefaultResourceLanguage="$(DefaultResourceLanguage)"
                              QualifiersPath="$(_QualifiersPath)"
                              PackageArchitecture="$(PackageArchitecture)"
                              SDKWinmdFiles="@(_AppxSDKWinmdFilesForHarvest)"
                              WinmdFiles="@(_AppxWinmdFilesToHarvest)"
                              ManagedWinmdInprocImplementation="$(ManagedWinmdInprocImplementation)"
                              OSMinVersion="$(AppxOSMinVersion)"
                              OSMaxVersionTested="$(AppxOSMaxVersionTested)"
                              OSMinVersionReplaceManifestVersion="$(AppxOSMinVersionReplaceManifestVersion)"
                              OSMaxVersionTestedReplaceManifestVersion="$(AppxOSMaxVersionTestedReplaceManifestVersion)"
                              PackageSigningEnabled="$(AppxPackageSigningEnabled)"
                              EnableSigningChecks="$(EnableSigningChecks)"
                              ManifestMetadata="@(AppxManifestMetadata)"
                              TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                              />

        <Message Importance="low" Text="@(AppxManifest) -> $(FinalAppxManifestName)" />

    </Target>

    <!-- In order for incremental build and clean to work correctly,       -->
    <!-- we are creating build item @(FinalAppxManifest) and @(FileWrites) -->
    <!-- in the target which always executes.                              -->
    <Target Name="_CreateFinalAppxManifestItem">

        <ItemGroup>
            <FinalAppxManifest Include="$(FinalAppxManifestName)" />
        </ItemGroup>

        <ItemGroup>
            <FileReads Include="@(CustomAppxManifest)"/>
            <FileReads Include="@(_GenerateCurrentProjectAppxManifestInput)"/>
        </ItemGroup>

        <ItemGroup>
            <FileWrites Include="@(FinalAppxManifest)"/>
        </ItemGroup>

    </Target>

    <!-- Finds store association file. -->
    <Target Name="_FindStoreAssociationFile">

        <ItemGroup Condition="'@(StoreAssociationFile)' == ''">
            <StoreAssociationFile Include="@(None)" Condition="'%(Identity)' == 'Package.StoreAssociation.xml'" />
            <None Remove="@(None)" Condition="'%(Identity)' == 'Package.StoreAssociation.xml'" />
        </ItemGroup>

    </Target>

    <!-- Validates final Appx manifest. -->
    <Target Name="_ValidateAppxManifest">

        <ValidateAppxManifest Input="@(FinalAppxManifest)"
                              SourceAppxManifest="@(SourceAppxManifest)"
                              AppxManifestSchema="@(AppxManifestSchema)"
                              StoreAssociationFile="@(StoreAssociationFile)"
                              TargetPlatformVersion="$(TargetPlatformVersion)"
                              TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                              OSMinVersion="$(AppxOSMinVersion)"
                              OSMaxVersionTested="$(AppxOSMaxVersionTested)"
                              PlatformVersionDescriptions="@(PlatformVersionDescription)"
                              ResolvedSDKReferences="@(RecursiveResolvedSDKReference)"
                              ValidateWinmds="$(_CustomAppxManifestUsed)"
                              StrictManifestValidationEnabled="$(AppxStrictManifestValidationEnabled)"
                              WinmdFiles="@(_AppxWinmdFilesToHarvest)"
                              SDKWinmdFiles="@(_AppxSDKWinmdFilesForHarvest)"
                              NonFrameworkSdkReferences="@(NonFrameworkSdkReference)"
                              ManagedWinmdInprocImplementation="$(ManagedWinmdInprocImplementation)"
                              ValidateManifest="$(AppxValidateAppxManifest)"
                              >
            <Output TaskParameter="Resources" ItemName="_ManifestResources" />
        </ValidateAppxManifest>

    </Target>

    <!-- Override to specify actions to happen after generating Appx manifest. -->
    <Target Name="AfterGenerateAppxManifest" />

    <!-- Validates Store manifest if it exists. -->
    <Target Name="_ValidateStoreManifest"
            Condition="'$(AppxValidateStoreManifest)' == 'true' and Exists($(StoreManifestName))">

        <ValidateStoreManifest Input="$(StoreManifestName)"
                               StoreManifestSchema="@(StoreManifestSchema)" />

    </Target>

    <!-- ========================================================================================= -->
    <!-- Generating Appx package recipe.                                                           -->
    <!-- Happens after generating Appx manifest, for every project which can be packaged/deployed. -->
    <!-- ========================================================================================= -->

    <!-- Ensure Fast UpToDate check also consider the .appxrecipe file as an output -->
    <ItemGroup Condition="'$(AppxPackage)' == 'true'">
        <UpToDateCheckOutput Include="$(AppxPackageRecipe)" />
    </ItemGroup>


    <PropertyGroup>
        <_GenerateAppxPackageRecipeDependsOn>
            $(_GenerateAppxPackageRecipeDependsOn);
            _CalculateInputsForGenerateAppxPackageRecipe;
            _GenerateAppxPackageRecipeFile;
            _FileReadsAndWritesForGenerateAppxPackageRecipe
        </_GenerateAppxPackageRecipeDependsOn>
    </PropertyGroup>

    <Target Name="_GenerateAppxPackageRecipe"
            Condition="'$(AppxPackage)' == 'true' and '$(AppxGeneratePackageRecipeEnabled)' == 'true'"
            DependsOnTargets="$(_GenerateAppxPackageRecipeDependsOn)"
            />

    <!-- Creates the recipe file for the the appx package -->
    <Target Name="_CalculateInputsForGenerateAppxPackageRecipe">

        <ItemGroup>
            <_GenerateAppxPackageRecipeInput Include="@(FinalAppxManifest)" />
            <_GenerateAppxPackageRecipeInput Include="@(AppxPackagePayload)" />
            <_GenerateAppxPackageRecipeInput Include="$(_ProjectArchitecturesFilePath)" />
        </ItemGroup>

        <ItemGroup Condition="'$(AppxPackageIncludePrivateSymbols)' != 'true'">
            <AppxPackagePayload Remove="@(AppxPackagePayload)" Condition="'%(Extension)' == '.pdb'" />
        </ItemGroup>

    </Target>

    <!-- Creates the recipe file for the the appx package -->
    <Target Name="_GenerateAppxPackageRecipeFile"
            Inputs="$(MSBuildAllProjects);@(_GenerateAppxPackageRecipeInput)"
            Outputs="$(AppxPackageRecipe)">

        <GenerateAppxPackageRecipe
            AppxManifestXml="%(FinalAppxManifest.FullPath)"
            SourceAppxManifest="@(SourceAppxManifest)"
            SolutionConfiguration="$(Configuration)|$(Platform)"
            PayloadFiles="@(AppxPackagePayload)"
            FrameworkSdkPackages="@(FrameworkSdkPackage)"
            RecipeFile="$(AppxPackageRecipe)"
            SystemBinaries="@(AppxSystemBinary)"
            ReservedFileNames="@(AppxReservedFileName)"
            AppxManifestSchemas="@(AppxManifestSchema)"
            ManifestFileNameQueries="@(AppxManifestFileNameQuery)"
            ManifestImageFileNameQueries="@(AppxManifestImageFileNameQuery)"
            PackageArchitecture="$(PackageArchitecture)"
            ProjectDir="$(ProjectDir)"
            IntermediateOutputPath="$(IntermediateOutputPath)"
            MakePriExtensionPath="$(InProcessMakePriExtensionPath)"
            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
            IndexedPayloadFiles="@(IndexedPayloadFiles)"
            UseResourceIndexerApi="$(AppxUseResourceIndexerApi)"
            />

        <Message Importance="low" Text="Manifest: %(FinalAppxManifest.Identity)" />
        <Message Importance="low" Text="Payload: %(AppxPackagePayload.TargetPath) from %(AppxPackagePayload.FullPath)" />
        <Message Importance="low" Text="SDK reference: %(RecursiveResolvedSDKReference.TargetPath) from %(RecursiveResolvedSDKReference.FullPath)" />
        <Message Importance="low" Text="$(MSBuildProjectName) -> $(AppxPackageRecipe)" />

    </Target>

    <!-- Add FileReads and FileWrites done during generation of package recipe file. -->
    <Target Name="_FileReadsAndWritesForGenerateAppxPackageRecipe">

        <ItemGroup>
            <FileReads Include="@(_GenerateAppxPackageRecipeInput)" />
        </ItemGroup>

        <ItemGroup>
            <FileWrites Include="$(AppxPackageRecipe)"/>
        </ItemGroup>

    </Target>

    <!-- ==================================================================================== -->
    <!-- Creates a .tlog file from the FileReads items so that up-to-date check works in C++. -->
    <!-- ==================================================================================== -->
    <Target Name="_AppendToReadTlogFile"
            Condition="'$(Language)' == 'C++' and '@(FileReads)' != ''">

        <WriteLinesToFile
            File="$(TLogLocation)$(ProjectName).read.1u.tlog"
            Lines="^$(ProjectPath);@(FileReads-&gt;'%(Fullpath)')"
            Encoding="Unicode" />
    </Target>

    <!-- ============================================================================ -->
    <!-- Creates a .tlog file from the FileWrites items so Clean target works in C++. -->
    <!-- ============================================================================ -->
    <Target Name="_AppendToWriteTlogFile"
            Condition="'$(Language)' == 'C++' and '@(FileWrites)' != ''">
        <WriteLinesToFile
            File="$(TLogLocation)$(ProjectName).write.1u.tlog"
            Lines="^$(ProjectPath);@(FileWrites-&gt;'%(Fullpath)')"
            Encoding="Unicode" />
    </Target>

    <!-- Remember packaging files and directories to clean later.   -->
    <!-- We have to roll our own because targets which handle       -->
    <!-- regular FileWrites items are not considering those outside -->
    <!-- output or intermediate directory.                          -->

    <Target Name="_AppendToPackagingWriteLogs">

        <WriteLinesToFile Condition="'@(PackagingFileWrites)' != ''"
                          File="$(PackagingFileWritesLogPath)"
                          Lines="@(PackagingFileWrites->'%(Fullpath)')"
                          Encoding="Unicode"
                          />

        <WriteLinesToFile Condition="'@(PackagingDirectoryWrites)' != ''"
                          File="$(PackagingDirectoryWritesLogPath)"
                          Lines="@(PackagingDirectoryWrites->'%(Fullpath)')"
                          Encoding="Unicode"
                          />
    </Target>

    <!-- =============================== -->
    <!-- Generating Appx package.        -->
    <!-- Happens when invoked explictly. -->
    <!-- =============================== -->

    <PropertyGroup>
        <_GenerateAppxPackageBaseDependsOn>
            _ExtractHashUri;
            _ComputeAppxPackageOutput;
            _CreateAppxPackage;
            _CreateAppxBundlePlatformSpecificArtifacts;
        </_GenerateAppxPackageBaseDependsOn>

        <_GenerateAppxPackageDependsOn Condition="'$(GenerateAppxPackageOnBuild)' == 'true'">
            $(_GenerateAppxPackageDependsOn);
            $(_GenerateAppxPackageBaseDependsOn);
        </_GenerateAppxPackageDependsOn>

        <_GenerateAppxPackageDependsOn Condition="'$(GenerateAppxPackageOnBuild)' != 'true'">
            $(_GenerateAppxPackageDependsOn);
            _SuppressDeploymentOnlyFeatures;
            Build;
            $(_GenerateAppxPackageBaseDependsOn);
        </_GenerateAppxPackageDependsOn>
    </PropertyGroup>

    <Target Name="_GenerateAppxPackage"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="$(_GenerateAppxPackageDependsOn)"
            />

    <PropertyGroup>
        <_CreateAppxPackageDependsOn>
            _ValidateAppxPackage;
            _GenerateAppxPackageFile;
            _GenerateAppxSymbolPackage;
            _CreateAppStoreContainer;
            _CreateTestLayout;
            _AddWindowsInstallScriptToTestLayout;
        </_CreateAppxPackageDependsOn>
    </PropertyGroup>

    <!-- Computes Appx package output (file name and directory). -->
    <Target Name="_ComputeAppxPackageOutput">

        <ReadLinesFromFile File="$(_MultipleQualifiersPerDimensionFoundPath)"
                           Condition="'$(AppxBundle)' == 'Auto' and Exists($(_MultipleQualifiersPerDimensionFoundPath))"
                           >
            <Output TaskParameter="Lines" PropertyName="_MultipleQualifiersPerDimensionFound" />
        </ReadLinesFromFile>

        <PropertyGroup Condition="'$(AppxBundle)' == 'Auto'">
            <_MultipleQualifiersPerDimensionFound Condition="'$(_MultipleQualifiersPerDimensionFound)' != 'true'">false</_MultipleQualifiersPerDimensionFound>
        </PropertyGroup>

        <PropertyGroup Condition="'$(TargetPlatformVersion)' == '8.0'">
            <ProduceAppxBundle>false</ProduceAppxBundle>
        </PropertyGroup>

        <PropertyGroup Condition="'$(TargetPlatformVersion)' != '8.0'">
            <ProduceAppxBundle Condition="'$(AppxBundle)' == 'Auto'">$(_MultipleQualifiersPerDimensionFound)</ProduceAppxBundle>
            <ProduceAppxBundle Condition="'$(AppxBundle)' == 'Never'">false</ProduceAppxBundle>
            <ProduceAppxBundle Condition="'$(AppxBundle)' == 'Always'">true</ProduceAppxBundle>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxPackageName)' != ''">
            <AppxPackageNameNeutral>$(AppxPackageName)</AppxPackageNameNeutral>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxPackageName)' == ''">
            <AppxPackageNameNeutral>$(ProjectName)_$(AppxManifestIdentityVersion)</AppxPackageNameNeutral>
            <_AppxPackageConfiguration Condition="'$(Configuration)' != 'Release'">_$(Configuration)</_AppxPackageConfiguration>
            <AppxPackageName>$(AppxPackageNameNeutral)_$(Platform)$(_AppxPackageConfiguration)</AppxPackageName>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxStoreContainer)' == '' and '$(ProduceAppxBundle)' == 'false'">
            <AppxStoreContainer>$(AppxPackageDir)$(AppxPackageName)$(AppxStoreContainerExtension)</AppxStoreContainer>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxPackageTestDir)' == ''">
            <AppxPackageTestDir Condition="'$(ProduceAppxBundle)' == 'false'">$(AppxPackageDir)$(AppxPackageName)_Test\</AppxPackageTestDir>
            <AppxPackageTestDir Condition="'$(ProduceAppxBundle)' == 'true'">$(AppxPackageDir)$(AppxPackageNameNeutral)$(_AppxPackageConfiguration)_Test\</AppxPackageTestDir>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxPackageOutput)' == ''">
            <AppxPackageOutput>$(AppxPackageTestDir)$(AppxPackageName)$(AppxPackageExtension)</AppxPackageOutput>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxSymbolPackageOutput)' == ''">
            <AppxSymbolPackageOutput>$(AppxPackageTestDir)$(AppxPackageName)$(AppxSymbolPackageExtension)</AppxSymbolPackageOutput>
        </PropertyGroup>

        <PropertyGroup>
            <AppxBundleDir Condition="'$(AppxBundleDir)' == ''">$(TargetDir)$(AppxPackageNameNeutral)$(AppxBundleFolderSuffix)\</AppxBundleDir>
            <AppxBundleDir Condition="!HasTrailingSlash('$(AppxBundleDir)')">$(AppxBundleDir)\</AppxBundleDir>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxMainPackageOutput)' == ''">
            <AppxMainPackageOutput>$(AppxBundleDir)$(AppxPackageName)$(AppxPackageExtension)</AppxMainPackageOutput>
        </PropertyGroup>

        <PropertyGroup Condition="'$(AppxResourcePackOutputBase)' == ''">
            <AppxResourcePackOutputBase>$(AppxBundleDir)$(AppxPackageNameNeutral)</AppxResourcePackOutputBase>
        </PropertyGroup>

    </Target>

    <!-- Extracts hash URI from store association file or provide default. -->
    <Target Name="_ExtractHashUri">

        <ExtractHashAlgorithmId StoreAssociationFile="@(StoreAssociationFile)"
                                HashUris="@(AppxHashUri)"
                                Condition="'$(AppxPackageValidationEnabled)' == 'true' and '@(StoreAssociationFile)' != ''">
            <Output TaskParameter="HashAlgorithmId" PropertyName="AppxHashAlgorithmId" />
        </ExtractHashAlgorithmId>

        <PropertyGroup Condition="'$(AppxHashAlgorithmId)' == ''">
            <AppxHashAlgorithmId>$(AppxDefaultHashAlgorithmId)</AppxHashAlgorithmId>
        </PropertyGroup>

    </Target>

    <!-- Executes pre-upload validation of the appx package. -->
    <Target Name="_ValidateAppxPackage"
            Condition="'$(AppxPackageValidationEnabled)' == 'true'">

        <ValidateAppxPackage
            SourceAppxManifest="@(SourceAppxManifest)"
            AppxManifest="@(FinalAppxManifest)"
            StoreAssociationFile="@(StoreAssociationFile)"
            PackageArchitecture="$(PackageArchitecture)"
            AppxPackagePayload="@(AppxPackagePayload)"
            AppxManifestSchemas="@(AppxManifestSchema)"
            ManifestImageFileNameQueries="@(AppxManifestImageFileNameQuery)"
            ResolvedSDKReferences="@(RecursiveResolvedSDKReference)"
            AllowDebugFrameworkReferencesInManifest="$(AppxPackageAllowDebugFrameworkReferencesInManifest)"
            ProjectDir="$(ProjectDir)"
            MakePriExtensionPath="$(InProcessMakePriExtensionPath)"
            IndexedPayloadFiles="@(IndexedPayloadFiles)"
            OSMinVersion="$(AppxOSMinVersion)"
            ProduceAppxBundle="$(ProduceAppxBundle)"
            IndexedMainPayloadFiles="@(IndexedMainPayloadFiles)"
            UseResourceIndexerApi="$(AppxUseResourceIndexerApi)"
            />

    </Target>

    <Target Name="_CreateAppxPackage"
            Condition="'$(ProduceAppxBundle)' == 'false'"
            DependsOnTargets="$(_CreateAppxPackageDependsOn)"
            />

    <!-- The following target the appx package. -->
    <Target Name="_GenerateAppxPackageFile"
            Inputs="$(MSBuildAllProjects);@(FinalAppxManifest);@(AppxPackagePayload);$(PackageCertificateKeyFile)"
            Outputs="$(AppxPackageOutput)">

        <ItemGroup Condition="'$(AppxPackageIncludePrivateSymbols)' != 'true'">
            <AppxPackagePayload Remove="@(AppxPackagePayload)" Condition="'%(Extension)' == '.pdb'" />
        </ItemGroup>

        <WriteLinesToFile File="$(AppxPackageFileMap)"
                          Lines="[Files];
                                 @(FinalAppxManifest->'%22%(Identity)%22 %22%(FileName)%(Extension)%22'); 
                                 @(AppxPackagePayload->'%22%(Identity)%22 %22%(TargetPath)%22')"
                          Overwrite="true"
                          />

        <ItemGroup>
            <FileWrites Include="$(AppxPackageFileMap)" />
        </ItemGroup>

        <MakeAppxPack MakeAppxExeFullPath="$(MakeAppxExeFullPath)"
                      ResourcePack="false"
                      HashAlgorithmId="$(AppxHashAlgorithmId)"
                      ValidateResourcesReferencedByManifest="false"
                      FileMap="$(AppxPackageFileMap)"
                      Output="$(AppxPackageOutput)"
                      />

        <ItemGroup>
            <FinalAppxPackageItem Include="$(AppxPackageOutput)" />
        </ItemGroup>

        <ItemGroup>
            <FileWrites Include="@(FinalAppxPackageItem)" />
        </ItemGroup>

        <WriteLinesToFile File="$(AppxPackagingInfoFile)"
                          Overwrite="true"
                          Lines="%(FinalAppxPackageItem.FullPath)" />

        <ItemGroup>
            <FileWrites Include="$(AppxPackagingInfoFile)" />
        </ItemGroup>

        <Message Importance="high" Text="$(MSBuildProjectName) -> %(FinalAppxPackageItem.FullPath)" />

        <SignAppxPackage Condition="'$(AppxPackageSigningEnabled)' == 'true'"
                         AppxPackageToSign="@(FinalAppxPackageItem)"
                         CertificateThumbprint="$(PackageCertificateThumbprint)"
                         CertificateFile="$(PackageCertificateKeyFile)"
                         HashAlgorithmId="$(AppxHashAlgorithmId)"
                         EnableSigningChecks="$(EnableSigningChecks)"
                         SignAppxPackageExeFullPath="$(SignAppxPackageExeFullPath)"
                         ExportCertificate="true">
            <Output TaskParameter="ResolvedThumbprint" PropertyName="ResolvedThumbPrint"/>
            <Output TaskParameter="AppxPackagePublicKeyFile" PropertyName="AppxPackagePublicKeyFile" />
        </SignAppxPackage>

        <Message Condition="'$(AppxPackageSigningEnabled)' == 'true'" Text="$(MSBuildProjectName) -> $(AppxPackagePublicKeyFile)" />
        <Message Condition="'$(AppxPackageSigningEnabled)' == 'true'" Text="$(MSBuildProjectName) -> $(ResolvedThumbprint)" />
        
    </Target>

    <!-- The following target the appx package. -->
    <Target Name="_GenerateAppxSymbolPackage"
            Condition="'$(AppxSymbolPackageEnabled)' == 'true' and '@(PDBPayload)' != ''"
            Inputs="$(MSBuildAllProjects);@(PDBPayload);@(FinalAppxManifest)"
            Outputs="$(AppxSymbolPackageOutput)">

        <GenerateAppxSymbolPackage PdbCopyExeFullPath="$(PdbCopyExeFullPath)"
                                   PdbFiles="@(PDBPayload)"
                                   ProjectName="$(MSBuildProjectName)"
                                   StrippedDirectory="$(AppxSymbolStrippedDir)"
                                   AppxSymbolPackageOutput="$(AppxSymbolPackageOutput)">
            <Output TaskParameter="StrippedPdbs" ItemName="StrippedPDBFiles" />
        </GenerateAppxSymbolPackage>

        <ItemGroup>
            <FinalAppxSymbolPackageItem Include="$(AppxSymbolPackageOutput)" />
        </ItemGroup>

        <ItemGroup>
            <PackagingFileWrites Include="@(FinalAppxSymbolPackageItem)" />
            <FileWrites Include="@(StrippedPDBFiles)" />
            <PackagingDirectoryWrites Include="$(AppxSymbolStrippedDir)" />
        </ItemGroup>

        <Message Text="$(MSBuildProjectName) -> $(AppxSymbolPackageOutput)" />

    </Target>

    <!-- Creates a test layout for testing of the appx package. -->
    <Target Name="_CreateTestLayout"
            Condition="'$(AppxTestLayoutEnabled)' == 'true'">

        <ItemGroup>
            <_TestLayoutSourceFiles Condition="'%(Architecture)' == 'neutral'" Include="@(FrameworkSdkPackage)" />
            <_TestLayoutTargetFiles Condition="'%(Architecture)' == 'neutral'" Include="@(FrameworkSdkPackage->'$(AppxPackageTestDir)Dependencies\%(FileName)%(Extension)')" />
        </ItemGroup>

        <ItemGroup>
            <_TestLayoutSourceFiles Condition="'%(Architecture)' != 'neutral'" Include="@(FrameworkSdkPackage)" />
            <_TestLayoutTargetFiles Condition="'%(Architecture)' != 'neutral'" Include="@(FrameworkSdkPackage->'$(AppxPackageTestDir)Dependencies\%(Architecture)\%(FileName)%(Extension)')" />
        </ItemGroup>

        <Message Importance="low" Text="Test Layout: %(_TestLayoutTargetFiles.FullPath)" />

        <Copy
            UseHardlinksIfPossible="$(AppxUseHardlinksIfPossible)"
            SkipUnchangedFiles="$(AppxSkipUnchangedFiles)"
            SourceFiles="@(_TestLayoutSourceFiles)"
            DestinationFiles="@(_TestLayoutTargetFiles)"
            />

        <ItemGroup>
            <PackagingFileWrites Include="@(_TestLayoutTargetFiles)"/>
            <PackagingDirectoryWrites Include="$(AppxPackageTestDir)" />
        </ItemGroup>
    
    </Target>

    <!-- Add install script for Windows packages/bundles to the test layout. -->
    <Target Name="_AddWindowsInstallScriptToTestLayout"
            Condition="'$(AppxTestLayoutEnabled)' == 'true' and '$(_TargetPlatformIsWindowsPhone)' != 'true'">
        
        <ItemGroup>
            <_PowerShellScriptsSource Include="$(AppxMSBuildToolsPath)Add-AppDevPackage.ps1" />
            <_PowerShellScriptsSource Include="$(AppxMSBuildToolsPath)**\Add-AppDevPackage.psd1" />
        </ItemGroup>

        <ItemGroup>
            <_PowerShellScriptsDestination Include="@(_PowerShellScriptsSource->'$(AppxPackageTestDir)%(RecursiveDir)%(FileName)%(Extension)')" />
        </ItemGroup>

        <!--Copy install scripts to app package location.-->
        <Copy
          UseHardlinksIfPossible="$(AppxUseHardlinksIfPossible)"
          SkipUnchangedFiles="true"
          SourceFiles="@(_PowerShellScriptsSource)"
          DestinationFiles="@(_PowerShellScriptsDestination)"
          ContinueOnError="$(ContinueOnError)" />

        <ItemGroup>
            <PackagingFileWrites Include="@(_PowerShellScriptsDestination)" />
        </ItemGroup>

    </Target>

    <!-- Creates .appxupload file containing .appx and optional .appxsym, -->
    <!-- which is used for uploading to Windows App Store.                -->
    <Target Name="_CreateAppStoreContainer"
            Inputs="$(MSBuildAllProjects);@(FinalAppxPackageItem);@(FinalAppxSymbolPackageItem)"
            Outputs="$(AppxStoreContainer)">

        <ItemGroup>
            <!-- create temp item just to use .FullPath -->
            <_AppxStoreContainer Include="$(AppxStoreContainer)" />
        </ItemGroup>

        <CreateAppStoreContainer
            Items="@(FinalAppxPackageItem);@(FinalAppxSymbolPackageItem)"
            ProjectName="$(MSBuildProjectName)"
            OutputPath="%(_AppxStoreContainer.FullPath)"
            />

        <ItemGroup>
            <PackagingFileWrites Include="$(AppxStoreContainer)"/>
        </ItemGroup>

    </Target>

    <!-- ================================================== -->
    <!-- Create platform-specific artifacts for app bundle. -->
    <!-- ================================================== -->

    <PropertyGroup>

        <_CreateAppxBundlePlatformSpecificArtifactsDependsOn>
            $(Before_CreateAppxBundlePlatformSpecificArtifacts)

            _GetPackageProperties;

            _CreatePackageLayout_CalculateInputsAndOutputs;
            _CreatePackageLayout;
            _CreatePackageLayout_AddFileWrites;

            _GetDefaultResourceLanguage;

            _CreatePriConfigXmlForSplitting;
            _CreatePriConfigXmlForSplitting_AddFileWrites;

            _SplitResourcesPri_CalculateInputsAndOutputs;
            _SplitResourcesPri;
            _SplitResourcesPri_AddFileWrites;

            _ExpandMainPriFile;
            _ValidateAppxPackage;

            _CreatePriConfigXmlForMainPackageFileMap;
            _CreatePriConfigXmlForMainPackageFileMap_AddFileWrites;

            _CreateMainPackageFileMap_CalculateInputsAndOutputs;
            _CreateMainPackageFileMap;
            _CreateMainPackageFileMap_AddFileWrites;

            _UpdateMainPackageFileMap;
            _UpdateMainPackageFileMap_AddFileWrites;

            _UpdateAppxManifestForBundle_CalculateInputsAndOutputs;
            _UpdateAppxManifestForBundle;
            _UpdateAppxManifestForBundle_AddFileWrites;

            _CreateMainPackage;
            _CreateMainPackage_AddFileWrites;

            _GenerateAppxSymbolPackage;

            _CreateResourcePackages_CalculateInputsAndOutputs;
            _CreateResourcePackages;
            _CreateResourcePackages_AddFileWrites;

            _CreatePlatformSpecificArtifactsList;

            _CreateAppxBundleFiles;

            $(After_CreateAppxBundlePlatformSpecificArtifacts)
        </_CreateAppxBundlePlatformSpecificArtifactsDependsOn>

    </PropertyGroup>

    <Target Name="_CreateAppxBundlePlatformSpecificArtifacts"
            Condition="'$(ProduceAppxBundle)' == 'true'"
            DependsOnTargets="$(_CreateAppxBundlePlatformSpecificArtifactsDependsOn)"
            />

    <Target Name="_CreatePackageLayout_CalculateInputsAndOutputs">

        <ItemGroup>
            <_PackageLayoutFileSource Include="@(AppxPackagePayload)" />
        </ItemGroup>

        <ItemGroup>
            <_PackageLayoutFileSource Remove="@(_PackageLayoutFileSource)" Condition="'%(Extension)' == '.pdb'" />
            <_PackageLayoutFileSource Remove="$(ProjectPriFullPath)" />
        </ItemGroup>

        <ItemGroup>
            <_PackageLayoutFileTarget Include="@(_PackageLayoutFileSource->'$(AppxLayoutDir)%(TargetPath)')" />
        </ItemGroup>

    </Target>

    <Target Name="_CreatePackageLayout">

        <RemoveDir Directories="$(AppxLayoutDir)" />

        <Copy SourceFiles="@(_PackageLayoutFileSource)"
              DestinationFiles="@(_PackageLayoutFileTarget)"
              UseHardlinksIfPossible="$(AppxUseHardlinksIfPossible)"
              SkipUnchangedFiles="$(AppxSkipUnchangedFiles)"
              />

        <Message Text="$(ProjectName) -> $(AppxLayoutDir)" />

    </Target>

    <Target Name="_CreatePackageLayout_AddFileWrites">

        <ItemGroup>
            <FileWrites Include="@(_PackageLayoutFileTarget)" />
            <PackagingDirectoryWrites Include="$(AppxLayoutDir)" />
        </ItemGroup>

    </Target>

    <Target Name="_CreatePriConfigXmlForSplitting"
            Inputs="$(MSBuildAllProjects);$(AppxPriConfigXmlPackagingSnippetPath);$(AppxPriConfigXmlDefaultSnippetPath)"
            Outputs="$(AppxBundlePriConfigXmlForSplittingFileName)">

        <CreatePriConfigXmlForSplitting
            PriConfigXmlPath="$(AppxBundlePriConfigXmlForSplittingFileName)"
            ResourcesPriFilePath="$(ProjectPriFullPath)"
            PriInitialPath="$(AppxPriInitialPath)"
            DefaultResourceLanguage="$(DefaultResourceLanguage)"
            DefaultResourceQualifiers="$(AppxDefaultResourceQualifiers)"
            AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
            IntermediateExtension="$(AppxIntermediateExtension)"
            PriConfigXmlPackagingSnippetPath="$(AppxPriConfigXmlPackagingSnippetPath)"
            PriConfigXmlDefaultSnippetPath="$(AppxPriConfigXmlDefaultSnippetPath)"
            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
            TargetPlatformVersion="$(TargetPlatformResourceVersion)"
            />

        <Message Text="$(ProjectName) -> $(AppxBundlePriConfigXmlForSplittingFileName)" />

    </Target>

    <Target Name="_CreatePriConfigXmlForSplitting_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="$(AppxBundlePriConfigXmlForSplittingFileName)" />
            <FileWrites Include="$(AppxBundlePriConfigXmlForSplittingFileName)$(AppxIntermediateExtension)" />
        </ItemGroup>
    </Target>

    <Target Name="_SplitResourcesPri_CalculateInputsAndOutputs">

        <ItemGroup>
            <_AppxBundleSplitResourcesGeneratedFiles Remove="@(_AppxBundleSplitResourcesGeneratedFiles)" />
        </ItemGroup>

        <ReadLinesFromFile Condition="Exists($(AppxBundleSplitResourcesGeneratedFilesListPath))"
                           File="$(AppxBundleSplitResourcesGeneratedFilesListPath)">
            <Output TaskParameter="Lines" ItemName="_AppxBundleSplitResourcesGeneratedFiles" />
        </ReadLinesFromFile>

    </Target>

    <Target Name="_SplitResourcesPri"
            Inputs="$(MSBuildAllProjects);$(ProjectPriFullPath)"
            Outputs="$(AppxBundleSplitResourcesGeneratedFilesListPath);@(_AppxBundleSplitResourcesGeneratedFiles)">

        <GenerateProjectPriFile MakePriExeFullPath="$(MakePriExeFullPath)"
                                MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                                PriConfigXmlPath="$(AppxBundlePriConfigXmlForSplittingFileName)"
                                ProjectPriIndexName="$(ProjectPriIndexName)"
                                MappingFileFormat="AppX"
                                ProjectDirectory="$(AppxLayoutDir)"
                                OutputFileName="$(AppxBundleSplitResourcesPriPath)"
                                GeneratedFilesListPath="$(AppxBundleSplitResourcesGeneratedFilesListPath)"
                                QualifiersPath="$(AppxBundleSplitResourcesQualifiersPath)"
                                IntermediateExtension="$(AppxIntermediateExtension)"
                                AdditionalMakepriExeParameters="$(AppxGenerateProjectPriFileAdditionalMakepriExeParameters)"
                                AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
                                />

        <ItemGroup>
            <_AppxBundleSplitResourcesGeneratedFiles Remove="@(_AppxBundleSplitResourcesGeneratedFiles)" />
        </ItemGroup>

        <ReadLinesFromFile Condition="Exists($(AppxBundleSplitResourcesGeneratedFilesListPath))"
                           File="$(AppxBundleSplitResourcesGeneratedFilesListPath)">
            <Output TaskParameter="Lines" ItemName="_AppxBundleSplitResourcesGeneratedFiles" />
        </ReadLinesFromFile>

        <Message Text="$(ProjectName) -> %(_AppxBundleSplitResourcesGeneratedFiles.Identity)" />

    </Target>

    <Target Name="_SplitResourcesPri_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="@(_AppxBundleSplitResourcesGeneratedFiles)" />
            <FileWrites Include="$(AppxBundleSplitResourcesGeneratedFilesListPath)" />
            <FileWrites Include="$(AppxBundleSplitResourcesQualifiersPath)" />
            <FileWrites Include="$(AppxBundleSplitResourcesQualifiersPath).intermediate" />
        </ItemGroup>
    </Target>

    <Target Name="_CreatePriConfigXmlForMainPackageFileMap"
            Inputs="$(MSBuildAllProjects);$(AppxPriConfigXmlPackagingSnippetPath);$(AppxPriConfigXmlDefaultSnippetPath)"
            Outputs="$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)">

        <CreatePriConfigXmlForMainPackageFileMap
            PriConfigXmlPath="$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)"
            PriInitialPath="$(AppxPriInitialPath)"
            DefaultResourceLanguage="$(DefaultResourceLanguage)"
            DefaultResourceQualifiers="$(AppxDefaultResourceQualifiers)"
            AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
            IntermediateExtension="$(AppxIntermediateExtension)"
            PriConfigXmlPackagingSnippetPath="$(AppxPriConfigXmlPackagingSnippetPath)"
            PriConfigXmlDefaultSnippetPath="$(AppxPriConfigXmlDefaultSnippetPath)"
            TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
            TargetPlatformVersion="$(TargetPlatformResourceVersion)"
            />

        <Message Text="$(ProjectName) -> $(AppxBundlePriConfigXmlForMainPackageFileMapFileName)" />

    </Target>

    <Target Name="_CreatePriConfigXmlForMainPackageFileMap_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)" />
            <FileWrites Include="$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)$(AppxIntermediateExtension)" />
        </ItemGroup>
    </Target>

    <Target Name="_CreateMainPackageFileMap_CalculateInputsAndOutputs">

        <ItemGroup>
            <_AppxBundleMainPackageMapInputs Include="$(AppxLayoutDir)\**\*" />
        </ItemGroup>

        <ItemGroup>
            <_AppxBundleMainPackageMapGeneratedFiles Remove="@(_AppxBundleMainPackageMapGeneratedFiles)" />
        </ItemGroup>

        <ReadLinesFromFile Condition="Exists($(AppxBundleMainPackageFileMapGeneratedFilesListPath))"
                           File="$(AppxBundleMainPackageFileMapGeneratedFilesListPath)">
            <Output TaskParameter="Lines" ItemName="_AppxBundleMainPackageMapGeneratedFiles" />
        </ReadLinesFromFile>

    </Target>

    <Target Name="_CreateMainPackageFileMap"
            Inputs="$(MSBuildAllProjects);@(_AppxBundleMainPackageMapInputs)"
            Outputs="$(AppxBundleMainPackageFileMapIntermediatePath)">

        <GenerateProjectPriFile MakePriExeFullPath="$(MakePriExeFullPath)"
                                MakePriExtensionPath="$(OutOfProcessMakePriExtensionPath)"
                                PriConfigXmlPath="$(AppxBundlePriConfigXmlForMainPackageFileMapFileName)"
                                ProjectPriIndexName="$(ProjectPriIndexName)"
                                MappingFileFormat="AppX"
                                ProjectDirectory="$(AppxLayoutDir)"
                                OutputFileName="$(AppxBundleMainPackageFileMapIntermediatePriPath)"
                                GeneratedFilesListPath="$(AppxBundleMainPackageFileMapGeneratedFilesListPath)"
                                AdditionalMakepriExeParameters="$(AppxGenerateProjectPriFileAdditionalMakepriExeParameters)"
                                IntermediateExtension="$(AppxIntermediateExtension)"
                                AppxBundleAutoResourcePackageQualifiers="$(AppxBundleAutoResourcePackageQualifiers)"
                                />

        <ItemGroup>
            <_AppxBundleMainPackageMapGeneratedFiles Remove="@(_AppxBundleMainPackageMapGeneratedFiles)" />
        </ItemGroup>

        <ReadLinesFromFile Condition="Exists($(AppxBundleMainPackageFileMapGeneratedFilesListPath))"
                           File="$(AppxBundleMainPackageFileMapGeneratedFilesListPath)">
            <Output TaskParameter="Lines" ItemName="_AppxBundleMainPackageMapGeneratedFiles" />
        </ReadLinesFromFile>

        <Message Text="$(ProjectName) -> %(_AppxBundleMainPackageMapGeneratedFiles.Identity)" />

    </Target>

    <Target Name="_CreateMainPackageFileMap_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="@(_AppxBundleMainPackageMapGeneratedFiles)" />
            <FileWrites Include="$(AppxBundleMainPackageFileMapGeneratedFilesListPath)" />
        </ItemGroup>
    </Target>

    <Target Name="_UpdateMainPackageFileMap"
            Inputs="$(MSBuildAllProjects);$(AppxBundleMainPackageFileMapIntermediatePath);$(AppxBundleSplitResourcesPriPath)"
            Outputs="$(AppxBundleMainPackageFileMapPath)">

        <ItemGroup>
            <_AppxBundleSplitResourcesPriPathItem Include="$(AppxBundleSplitResourcesPriPath)" />
        </ItemGroup>

        <UpdateMainPackageFileMap
            Input="$(AppxBundleMainPackageFileMapIntermediatePath)"
            Output="$(AppxBundleMainPackageFileMapPath)"
            SplitResourcesPriPath="%(_AppxBundleSplitResourcesPriPathItem.FullPath)"
            DefaultResourceLanguage="$(DefaultResourceLanguage)"
            DefaultResourceQualifiers="$(AppxDefaultResourceQualifiers)"
            />

        <Message Text="$(ProjectName) -> $(AppxBundleMainPackageFileMapPath)" />

    </Target>

    <Target Name="_UpdateMainPackageFileMap_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="$(AppxBundleMainPackageFileMapPath)" />
        </ItemGroup>
    </Target>


    <Target Name="_UpdateAppxManifestForBundle_CalculateInputsAndOutputs">

        <ItemGroup Condition="'$(_CustomAppxManifestUsed)' == 'true'">
            <AppxManifestForBundle Include="@(FinalAppxManifest)" />
        </ItemGroup>

        <ItemGroup Condition="'$(_CustomAppxManifestUsed)' != 'true'">
            <AppxManifestForBundle Include="@(FinalAppxManifest->'%(RootDir)%(Directory)ForBundle\%(Filename)%(Extension)')" />
        </ItemGroup>

    </Target>

    <Target Name="_UpdateAppxManifestForBundle"
            Inputs="$(MSBuildAllProjects);@(FinalAppxManifest)"
            Outputs="@(AppxManifestForBundle)">

        <MakeDir Directories="@(AppxManifestForBundle->'%(RootDir)%(Directory)')" />

        <UpdateAppxManifestForBundle FinalAppxManifest="@(FinalAppxManifest)"
                                     AppxManifestForBundle="@(AppxManifestForBundle)"
                                     TargetPlatformIdentifier="$(TargetPlatformIdentifier)"
                                     />

        <Message Text="$(ProjectName) -> @(AppxManifestForBundle)" />

    </Target>

    <Target Name="_UpdateAppxManifestForBundle_AddFileWrites">

        <ItemGroup>
            <FileWrites Include="@(AppxManifestForBundle)" />
            <PackagingDirectoryWrites Include="@(AppxManifestForBundle->'%(RootDir)%(Directory)')" />
        </ItemGroup>

    </Target>

    <Target Name="_CreateMainPackage"
            Inputs="$(MSBuildAllProjects);@(AppxManifestForBundle);$(AppxBundleMainPackageFileMapPath);$(PackageCertificateKeyFile)"
            Outputs="$(AppxMainPackageOutput)">

        <MakeAppxPack MakeAppxExeFullPath="$(MakeAppxExeFullPath)"
                      ResourcePack="false"
                      HashAlgorithmId="$(AppxHashAlgorithmId)"
                      ValidateResourcesReferencedByManifest="false"
                      AppxManifest="@(AppxManifestForBundle)"
                      FileMap="$(AppxBundleMainPackageFileMapPath)"
                      Output="$(AppxMainPackageOutput)"
                      />

        <SignAppxPackage Condition="'$(AppxPackageSigningEnabled)' == 'true'"
                         AppxPackageToSign="$(AppxMainPackageOutput)"
                         CertificateThumbprint="$(PackageCertificateThumbprint)"
                         CertificateFile="$(PackageCertificateKeyFile)"
                         HashAlgorithmId="$(AppxHashAlgorithmId)"
                         EnableSigningChecks="$(EnableSigningChecks)"
                         SignAppxPackageExeFullPath="$(SignAppxPackageExeFullPath)"
                         />

        <Message Importance="high" Condition="'$(AppxPackageSigningEnabled)' == 'true'" Text="$(ProjectName) -> $(AppxMainPackageOutput)" />
        <Message Importance="high" Condition="'$(AppxPackageSigningEnabled)' != 'true'" Text="$(ProjectName) -> $(AppxMainPackageOutput) (unsigned)" />

    </Target>

    <Target Name="_CreateMainPackage_AddFileWrites">
        <ItemGroup>
            <FileWrites Include="$(AppxMainPackageOutput)" />
            <PackagingDirectoryWrites Include="$(AppxBundleDir)" />
        </ItemGroup>
    </Target>

    <!-- Resource packages are created during the build of the platform which will produce the bundle.               -->
    <!-- There is a work item to validate that assumption which will move resource pack generation to target Bundle. -->
    <!-- 635606: Resource Packs: Validate generated resource packs’ file maps across architectures                   -->

    <Target Name="_CreateResourcePackages_CalculateInputsAndOutputs"
            Condition="'$(AppxBundleResourcePacksProducingPlatform)' == '$(PackageArchitecture)'">

        <PropertyGroup>
            <_FileNameToRemove>%(_AppxBundleSplitResourcesPriPathItem.FileName)$(AppxBundleMainPackageFileMapSuffix)</_FileNameToRemove>
        </PropertyGroup>

        <ItemGroup>
            <_AppxBundleResourceFileMapsIntermediate Include="@(_AppxBundleSplitResourcesGeneratedFiles)"
                                                     Condition="'%(Extension)' == '.txt' and '%(FileName)' != '$(_FileNameToRemove)'">
                <ResourcePack>$(AppxResourcePackOutputBase)$([System.String]::Copy('%(Filename)').Replace('$(AppxBundleSplitResourcesPriPrefix).','_').Replace('$(AppxBundleMainPackageFileMapSuffix)',''))$(AppxPackageExtension)</ResourcePack>
            </_AppxBundleResourceFileMapsIntermediate>
        </ItemGroup>

        <FilterOutUnusedLanguagesResourceFileMaps FileMaps="@(_AppxBundleResourceFileMapsIntermediate)"
                                                  FileNamePrefix="$(AppxBundleSplitResourcesPriPrefix)"
                                                  MapSuffix="$(AppxBundleMainPackageFileMapSuffix)"
                                                  Languages="@(_ManifestResources->WithMetadataValue('Dimension', 'Language')->'%(Value)')"
                                                  Condition="'$(AppxFilterOutUnusedLanguagesResourceFileMaps)' == 'true'"
                                                  >
            <Output TaskParameter="FilteredFileMaps" ItemName="_AppxBundleResourceFileMaps" />
        </FilterOutUnusedLanguagesResourceFileMaps>

        <ItemGroup Condition="'$(AppxFilterOutUnusedLanguagesResourceFileMaps)' != 'true'">
            <_AppxBundleResourceFileMaps Include="@(_AppxBundleResourceFileMapsIntermediate)" />
        </ItemGroup>

    </Target>

    <Target Name="_CreateResourcePackages"
            Inputs="@(_AppxBundleResourceFileMaps)"
            Outputs="%(ResourcePack)"
            Condition="'$(AppxBundleResourcePacksProducingPlatform)' == '$(PackageArchitecture)'">

        <MakeAppxPack MakeAppxExeFullPath="$(MakeAppxExeFullPath)"
                      ResourcePack="true"
                      HashAlgorithmId="$(AppxHashAlgorithmId)"
                      ValidateResourcesReferencedByManifest="false"
                      AppxManifest="@(AppxManifestForBundle)"
                      FileMap="%(_AppxBundleResourceFileMaps.Identity)"
                      Output="%(_AppxBundleResourceFileMaps.ResourcePack)"
                      />

        <SignAppxPackage Condition="'$(AppxPackageSigningEnabled)' == 'true'"
                         AppxPackageToSign="%(_AppxBundleResourceFileMaps.ResourcePack)"
                         CertificateThumbprint="$(PackageCertificateThumbprint)"
                         CertificateFile="$(PackageCertificateKeyFile)"
                         HashAlgorithmId="$(AppxHashAlgorithmId)"
                         EnableSigningChecks="$(EnableSigningChecks)"
                         SignAppxPackageExeFullPath="$(SignAppxPackageExeFullPath)"
                         />

        <Message Importance="high" Condition="'$(AppxPackageSigningEnabled)' == 'true'" Text="$(ProjectName) -> %(_AppxBundleResourceFileMaps.ResourcePack)" />
        <Message Importance="high" Condition="'$(AppxPackageSigningEnabled)' != 'true'" Text="$(ProjectName) -> %(_AppxBundleResourceFileMaps.ResourcePack) (unsigned)" />

    </Target>

    <Target Name="_CreateResourcePackages_AddFileWrites"
            Condition="'$(AppxBundleResourcePacksProducingPlatform)' == '$(PackageArchitecture)'">

        <ItemGroup>
            <FileWrites Include="@(_AppxBundleResourceFileMaps -> '%(ResourcePack)')" />
        </ItemGroup>

    </Target>

    <Target Name="_CreatePlatformSpecificArtifactsList">

        <MakeDir Directories="$(PlatformSpecificBundleArtifactsListDir)" />

        <ItemGroup>
            <_AppxBundleResourcePack Include="@(_AppxBundleResourceFileMaps -> '%(ResourcePack)')" />
        </ItemGroup>

        <ItemGroup>
            <_PlatformSpecificBundleArtifact Include="MainPackage=$([System.IO.Path]::GetFullPath('$(AppxMainPackageOutput)'))"     Condition="Exists($(AppxMainPackageOutput))" />
            <_PlatformSpecificBundleArtifact Include="SymbolPackage=$([System.IO.Path]::GetFullPath('$(AppxSymbolPackageOutput)'))" Condition="Exists($(AppxSymbolPackageOutput))" />
            <_PlatformSpecificBundleArtifact Include="ResourcePack=%(_AppxBundleResourcePack.FullPath)"                             Condition="'@(_AppxBundleResourcePack)' != ''" />
        </ItemGroup>

        <Delete Files="$(AppxBundlePlatformSpecificArtifactsListPath)" />

        <WriteLinesToFile File="$(AppxBundlePlatformSpecificArtifactsListPath)"
                          Lines="@(_PlatformSpecificBundleArtifact)"
                          />

        <!-- Creating packaging info file for every architecture we are building. -->
        <!-- That way, wizard completion page can know which architectures are    -->
        <!-- included in the bundle.                                              -->

        <PropertyGroup Condition="'$(AppxBundleOutput)' == ''">
            <AppxBundleOutput>$(AppxPackageTestDir)$(AppxPackageNameNeutral)_$(AppxBundlePlatformsForNaming)$(_AppxPackageConfiguration)$(AppxBundleExtension)</AppxBundleOutput>
        </PropertyGroup>

        <WriteLinesToFile File="$(AppxPackagingInfoFile)"
                          Overwrite="true"
                          Lines="$([System.IO.Path]::GetFullPath('$(AppxBundleOutput)'))" />

        <ItemGroup>
            <FileWrites Include="$(AppxPackagingInfoFile)" />
        </ItemGroup>

    </Target>

    <!-- ============================= -->
    <!-- Produce the app bundle files. -->
    <!-- ============================= -->

    <PropertyGroup>

        <_CreateAppxBundleFilesDependsOn>
            $(BeforeCreateAppxBundleFiles);

            _GetSdkToolPaths;
            _ValidatePresenceOfAppxManifestItems;
            _GetPackageProperties;

            _GetOtherPlatformsToBundle;
            _ProducePlatformSpecificBundleArtifactsForOtherPlatforms;

            _GetPlatformSpecificBundleArtifacts;

            _CreateBundle_CalculateInputsAndOutputs;
            _CreateBundle;
            _CreateBundle_AddFileWrites;

            _CreateAppStoreBundleContainer_CalculateInputsAndOutputs;
            _CreateAppStoreBundleContainer;
            _CreateAppStoreBundleContainer_AddFileWrites;

            _CreateTestLayout;
            _AddWindowsInstallScriptToTestLayout;

            $(AfterCreateAppxBundleFiles)
        </_CreateAppxBundleFilesDependsOn>

    </PropertyGroup>

    <Target Name="_CreateAppxBundleFiles"
            Condition="('$(AppxBundleProducingPlatform)' == '$(PackageArchitecture)' or '$(GenerateAppxPackageOnBuild)' == 'true') and '$(_SkipBundleCreation)' != 'true'"
            DependsOnTargets="$(_CreateAppxBundleFilesDependsOn)"
            />

    <Target Name="_GetOtherPlatformsToBundle"
            Condition="'$(GenerateAppxPackageOnBuild)' == 'true'">

        <PropertyGroup>
            <_AdjustedPlatform Condition="'$(Platform)' != 'Win32'">$(Platform)</_AdjustedPlatform>
            <_AdjustedPlatform Condition="'$(Platform)' == 'Win32'">x86</_AdjustedPlatform>
        </PropertyGroup>

        <ItemGroup>
            <_OtherPlatformToBundle Condition="'%(Identity)' != '$(_AdjustedPlatform)'" Include="@(AppxBundlePlatformWithAnyCPU)" />
        </ItemGroup>

    </Target>

    <Target Name="_ProducePlatformSpecificBundleArtifactsForOtherPlatforms"
            Condition="'@(_OtherPlatformToBundle)' != ''"
            Inputs="@(_OtherPlatformToBundle)"
            Outputs="%(Identity).AlwaysRun">

        <Message Importance="low" Text="Producing bundle artifacts for platform '%(_OtherPlatformToBundle.Identity)'" />

        <PropertyGroup>
            <_TargetToBuild Condition="'$(_Rebuilding)' == 'true'">Rebuild</_TargetToBuild>
            <_TargetToBuild Condition="'$(_Rebuilding)' != 'true'">Build</_TargetToBuild>
        </PropertyGroup>

        <PropertyGroup Condition="'$(SolutionPath)' == '' or '$(SolutionPath)' == '*Undefined*'">
            <_FileToBuild>$(MSBuildProjectFullPath)</_FileToBuild>
            <_ShouldUnsetParentConfigurationAndPlatform>false</_ShouldUnsetParentConfigurationAndPlatform>
            <_SolutionConfigurationContentsToUse></_SolutionConfigurationContentsToUse>
        </PropertyGroup>

        <MSBuild Projects="$(SolutionPath)"
                 Condition="'$(SolutionPath)' != '' and '$(SolutionPath)' != '*Undefined*'"
                 Targets="GetSolutionConfigurationContents"
                 Properties="Configuration=$(Configuration);Platform=%(_OtherPlatformToBundle.Identity)"
                 ContinueOnError="$(ContinueOnError)">
            <Output TaskParameter="TargetOutputs" PropertyName="_SolutionConfigurationContentsToUse"/>
        </MSBuild>

        <PropertyGroup Condition="'$(SolutionPath)' != '' and '$(SolutionPath)' != '*Undefined*'">
            <_FileToBuild>$(SolutionPath)</_FileToBuild>
            <_ShouldUnsetParentConfigurationAndPlatform>true</_ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>

        <MSBuild Projects="$(_FileToBuild)"
                 Targets="$(_TargetToBuild)"
                 Properties="ShouldUnsetParentConfigurationAndPlatform=$(_ShouldUnsetParentConfigurationAndPlatform);
                             CurrentSolutionConfigurationContents=$(_SolutionConfigurationContentsToUse);
                             Configuration=$(Configuration);
                             Platform=%(_OtherPlatformToBundle.Identity);
                             _SkipBundleCreation=true;
                             PlatformSpecificBundleArtifactsListDir=$(PlatformSpecificBundleArtifactsListDir);
                             AppxPackageDir=$(AppxPackageDir)"
                ContinueOnError="$(ContinueOnError)"
                />

    </Target>

    <Target Name="_GetPlatformSpecificBundleArtifacts">

        <ItemGroup>
            <_PlatformSpecificBundleArtifact Remove="@(_PlatformSpecificBundleArtifact)" />
        </ItemGroup>

        <ParsePlatformSpecificBundleArtifactsLists Files="$(PlatformSpecificBundleArtifactsListDir)%(AppxBundlePlatform.Identity).txt">
            <Output TaskParameter="Artifacts" ItemName="_PlatformSpecificBundleArtifact" />
        </ParsePlatformSpecificBundleArtifactsLists>

        <ItemGroup>
            <_MainPackageToBundle   Include="@(_PlatformSpecificBundleArtifact)" Condition="'%(Name)' == 'MainPackage'" />
            <_SymbolPackageToBundle Include="@(_PlatformSpecificBundleArtifact)" Condition="'%(Name)' == 'SymbolPackage'" />
            <_ResourcePackToBundle  Include="@(_PlatformSpecificBundleArtifact)" Condition="'%(Name)' == 'ResourcePack'" />
        </ItemGroup>

    </Target>

    <Target Name="_CreateBundle_CalculateInputsAndOutputs">

        <ItemGroup>
            <_CreateBundleInputs Include="@(_MainPackageToBundle)" />
            <_CreateBundleInputs Include="@(_ResourcePackToBundle)" />
        </ItemGroup>

    </Target>

    <Target Name="_CreateBundle"
            Inputs="$(MSBuildAllProjects);@(_CreateBundleInputs);$(PackageCertificateKeyFile)"
            Outputs="$(AppxBundleOutput)">

        <Copy UseHardlinksIfPossible="$(AppxUseHardlinksIfPossible)"
              SkipUnchangedFiles="$(AppxSkipUnchangedFiles)"
              SourceFiles="@(_CreateBundleInputs)"
              DestinationFolder="$(AppxBundleDir)"
              />

        <ItemGroup>
            <_AppxBundleContent Include="$(AppxBundleDir)*" />
        </ItemGroup>

        <Message Text="Adding file '%(_AppxBundleContent.Identity)'" />

        <MakeAppxBundle MakeAppxExeFullPath="$(MakeAppxExeFullPath)"
                        BundleDir="$(AppxBundleDir)"
                        Output="$(AppxBundleOutput)"
                        />

        <SignAppxPackage Condition="'$(AppxPackageSigningEnabled)' == 'true'"
                         AppxPackageToSign="$(AppxBundleOutput)"
                         CertificateThumbprint="$(PackageCertificateThumbprint)"
                         CertificateFile="$(PackageCertificateKeyFile)"
                         HashAlgorithmId="$(AppxHashAlgorithmId)"
                         EnableSigningChecks="$(EnableSigningChecks)"
                         SignAppxPackageExeFullPath="$(SignAppxPackageExeFullPath)"
                         ExportCertificate="true">
            <Output TaskParameter="ResolvedThumbprint" PropertyName="ResolvedThumbPrint"/>
            <Output TaskParameter="AppxPackagePublicKeyFile" PropertyName="AppxPackagePublicKeyFile" />
        </SignAppxPackage>

        <Message Importance="high" Text="$(ProjectName) -> $(AppxBundleOutput)" />
        <Message Condition="'$(AppxPackageSigningEnabled)' == 'true'" Text="$(ProjectName) -> $(AppxPackagePublicKeyFile)" />

    </Target>

    <Target Name="_CreateBundle_AddFileWrites">
        <ItemGroup>
            <PackagingFileWrites Include="$(AppxBundleOutput)" />
            <PackagingDirectoryWrites Include="$(AppxBundleDir)" />
        </ItemGroup>
    </Target>

    <Target Name="_CreateAppStoreBundleContainer_CalculateInputsAndOutputs">

        <ItemGroup>
            <_CreateAppStoreBundleContainerInputs Include="$(AppxBundleOutput)" />
            <_CreateAppStoreBundleContainerInputs Include="@(_SymbolPackageToBundle)" />
        </ItemGroup>

        <PropertyGroup Condition="'$(AppxStoreContainer)' == ''">
            <AppxStoreContainer>$(AppxPackageDir)$(AppxPackageNameNeutral)_$(AppxBundlePlatformsForNaming)_bundle$(_AppxPackageConfiguration)$(AppxStoreContainerExtension)</AppxStoreContainer>
        </PropertyGroup>

    </Target>

    <Target Name="_CreateAppStoreBundleContainer"
            Inputs="$(MSBuildAllProjects);@(_CreateAppStoreBundleContainerInputs)"
            Outputs="$(AppxStoreContainer)">

        <CreateAppStoreContainer
            Items="@(_CreateAppStoreBundleContainerInputs)"
            ProjectName="$(MSBuildProjectName)"
            OutputPath="$(AppxStoreContainer)"
            />

    </Target>

    <Target Name="_CreateAppStoreBundleContainer_AddFileWrites">
        <ItemGroup>
            <PackagingFileWrites Include="$(AppxStoreContainer)" />
        </ItemGroup>
    </Target>

    <!-- =============================== -->
    <!-- Clean/Rebuild support.          -->
    <!-- =============================== -->

    <!-- Cleans current project and any referenced projects' appx package artifacts. -->
    <Target Name="_CleanAppxPackage"
            Condition="'$(AppxPackage)' == 'true' and '$(GenerateAppxPackageOnBuild)' == 'true'"
            DependsOnTargets="$(_CleanAppxPackageDependsOn)"
            AfterTargets="Clean">

        <ReadLinesFromFile File="$(PackagingDirectoryWritesLogPath)"
                           Condition="Exists($(PackagingDirectoryWritesLogPath))">
            <Output TaskParameter="Lines" ItemName="_DirectoriesToRemove" />
        </ReadLinesFromFile>

        <RemoveDir Directories="@(_DirectoriesToRemove)" ContinueOnError="true" />
        <Delete Files="$(PackagingDirectoryWritesLogPath)" ContinueOnError="true" TreatErrorsAsWarnings="true" />

        <ReadLinesFromFile File="$(PackagingFileWritesLogPath)"
                           Condition="Exists($(PackagingFileWritesLogPath))">
            <Output TaskParameter="Lines" ItemName="_FilesToRemove" />
        </ReadLinesFromFile>

        <Delete Files="@(_FilesToRemove)" ContinueOnError="true" TreatErrorsAsWarnings="true" />
        <Delete Files="$(PackagingFileWritesLogPath)" ContinueOnError="true" TreatErrorsAsWarnings="true" />

    </Target>

    <!-- Rebuild appx package target and entry point. -->
    <Target Name="_RebuildAppxPackage"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="$(CleanPackageAction);$(PackageAction)"
            />

    <!-- ========================================== -->
    <!-- Returns Architecture for given Platform.   -->
    <!-- ========================================== -->

    <Target Name="_GetProjectArchitecture"
            Returns="@(ProjectArchitecture)">

        <PropertyGroup>
            <_ProjectArchitectureOutput>Invalid</_ProjectArchitectureOutput>
            <_ProjectArchitectureOutput Condition="'$(Platform)' == 'AnyCPU'">neutral</_ProjectArchitectureOutput>
            <_ProjectArchitectureOutput Condition="'$(Platform)' == 'x86'">x86</_ProjectArchitectureOutput>
            <_ProjectArchitectureOutput Condition="'$(Platform)' == 'Win32'">x86</_ProjectArchitectureOutput>
            <_ProjectArchitectureOutput Condition="'$(Platform)' == 'x64'">x64</_ProjectArchitectureOutput>
            <_ProjectArchitectureOutput Condition="'$(Platform)' == 'arm'">arm</_ProjectArchitectureOutput>
        </PropertyGroup>

        <ItemGroup>
            <ProjectArchitecture Include="$(_ProjectArchitectureOutput)" />
        </ItemGroup>

    </Target>

    <!-- ========================================== -->
    <!-- Getting all packaging outputs.             -->
    <!-- Returns items that packaging targets need. -->
    <!-- ========================================== -->

    <PropertyGroup>
        <GetPackagingOutputsDependsOn>
            $(GetPackagingOutputsDependsOn);
            AssignProjectConfiguration;
            _SplitProjectReferencesByFileExistence
        </GetPackagingOutputsDependsOn>
    </PropertyGroup>

    <Target Name="GetPackagingOutputs"
            Returns="@(PackagingOutputs)"
            DependsOnTargets="$(GetPackagingOutputsDependsOn)">

        <CallTarget Targets="BuiltProjectOutputGroup" Condition="'$(IncludeBuiltProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_BuiltProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="%(_BuiltProjectOutputGroupOutput.FinalOutputPath)">
                <TargetPath>%(_BuiltProjectOutputGroupOutput.TargetPath)</TargetPath>
                <OutputGroup>BuiltProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="DebugSymbolsProjectOutputGroup" Condition="'$(IncludeDebugSymbolsProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_DebugSymbolsProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="%(_DebugSymbolsProjectOutputGroupOutput.FinalOutputPath)">
                <OutputGroup>DebugSymbolsProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="DocumentationProjectOutputGroup" Condition="'$(IncludeDocumentationProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_DocumentationProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_DocumentationProjectOutputGroupOutput)">
                <OutputGroup>DocumentationProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="SatelliteDllsProjectOutputGroup" Condition="'$(IncludeSatelliteDllsProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_SatelliteDllsProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_SatelliteDllsProjectOutputGroupOutput)">
                <OutputGroup>SatelliteDllsProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="SourceFilesProjectOutputGroup" Condition="'$(IncludeSourceFilesProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_SourceFilesProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_SourceFilesProjectOutputGroupOutput)">
                <OutputGroup>SourceFilesProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="SGenFilesOutputGroup" Condition="'$(IncludeSGenFilesOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_SGenFilesOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_SGenFilesOutputGroupOutput)">
                <OutputGroup>SGenFilesOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="CopyLocalFilesOutputGroup" Condition="'$(IncludeCopyLocalFilesOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_CopyLocalFilesOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_CopyLocalFilesOutputGroupOutput)">
                <OutputGroup>CopyLocalFilesOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="ComFilesOutputGroup" Condition="'$(IncludeComFilesOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_ComFilesOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_ComFilesOutputGroupOutput)">
                <OutputGroup>ComFilesOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="CopyWinmdArtifactsOutputGroup" Condition="'$(IncludeCopyWinmdArtifactsOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_CopyWinmdArtifactsOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_CopyWinmdArtifactsOutputGroupOutput)">
                <OutputGroup>CopyWinmdArtifactsOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="SDKRedistOutputGroup" Condition="'$(IncludeSDKRedistOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_SDKRedistOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_SDKRedistOutputGroupOutput)">
                <OutputGroup>SDKRedistOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
            <_PackagingOutputsUnexpanded Remove="@(RemoveSdkFilesFromAppxPackage)" />
        </ItemGroup>

        <CallTarget Targets="PriFilesOutputGroup" Condition="'$(IncludePriFilesOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_PriFilesOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_PriFilesOutputGroupOutput)">
                <OutputGroup>PriFilesOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="ContentFilesProjectOutputGroup" Condition="'$(IncludeContentFilesProjectOutputGroup)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_ContentFilesProjectOutputGroupOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_ContentFilesProjectOutputGroupOutput)">
                <OutputGroup>ContentFilesProjectOutputGroup</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
                <TargetPath Condition="'$(AppxPackage)' != 'true'">$(AppxPriInitialPath)\%(_ContentFilesProjectOutputGroupOutput.TargetPath)</TargetPath>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <CallTarget Targets="CustomOutputGroupForPackaging" Condition="'$(IncludeCustomOutputGroupForPackaging)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_CustomOutputGroupForPackagingOutput"/>
        </CallTarget>
        <ItemGroup>
            <_PackagingOutputsUnexpanded Include="@(_CustomOutputGroupForPackagingOutput)">
                <OutputGroup>CustomOutputGroupForPackaging</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
                <TargetPath Condition="'$(AppxPackage)' != 'true'">$(AppxPriInitialPath)\%(_CustomOutputGroupForPackagingOutput.TargetPath)</TargetPath>
            </_PackagingOutputsUnexpanded>
        </ItemGroup>

        <ExpandPayloadDirectories Inputs="@(_PackagingOutputsUnexpanded)">
            <Output TaskParameter="Expanded" ItemName="_PackagingOutputsExpanded" />
        </ExpandPayloadDirectories>

        <CallTarget Targets="GetResolvedSDKReferences" Condition="'$(IncludeGetResolvedSDKReferences)' == 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_GetResolvedSDKReferencesOutputWithoutMetadata"/>
        </CallTarget>
        <ItemGroup>
            <_GetResolvedSDKReferencesOutput Include="@(_GetResolvedSDKReferencesOutputWithoutMetadata)">
                <OutputGroup>GetResolvedSDKReferences</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_GetResolvedSDKReferencesOutput>
        </ItemGroup>

        <CallTarget Targets="_GetProjectArchitecture">
            <Output TaskParameter="TargetOutputs" ItemName="_ProjectArchitecture" />
        </CallTarget>

        <ItemGroup>
            <_ProjectArchitectureItem Include="@(_ProjectArchitecture)">
                <OutputGroup>_GetProjectArchitecture</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
            </_ProjectArchitectureItem>
        </ItemGroup>

        <ItemGroup>
            <ProjectPriFile Include="$(ProjectPriFullPath)" Condition="'$(IncludeProjectPriFile)' == 'true'">
                <OutputGroup>ProjectPriFile</OutputGroup>
                <ProjectName>$(ProjectName)</ProjectName>
                <TargetPath>$(ProjectPriFileName)</TargetPath>
            </ProjectPriFile>
        </ItemGroup>

        <PropertyGroup>
            <_ContinueOnError Condition="'$(BuildingProject)' == 'true'">true</_ContinueOnError>
            <_ContinueOnError Condition="'$(BuildingProject)' != 'true'">false</_ContinueOnError>
        </PropertyGroup>

        <MSBuild
          Projects="@(ProjectReferenceWithConfiguration)"
          Targets="GetPackagingOutputs"
          BuildInParallel="$(BuildInParallel)"
          Properties="%(ProjectReferenceWithConfiguration.SetConfiguration); %(ProjectReferenceWithConfiguration.SetPlatform)"
          Condition="'@(ProjectReferenceWithConfiguration)' != ''
                 and '%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' 
                 and '%(ProjectReferenceWithConfiguration.ReferenceOutputAssembly)' == 'true'"
          ContinueOnError="$(_ContinueOnError)">
            <Output TaskParameter="TargetOutputs" ItemName="_PackagingOutputsFromOtherProjects"/>
        </MSBuild>

        <ItemGroup>
            <PackagingOutputs Include="@(ProjectPriFile)" />
            <PackagingOutputs Include="@(_PackagingOutputsExpanded)" />
            <PackagingOutputs Include="@(_GetResolvedSDKReferencesOutput)" />
            <PackagingOutputs Include="@(_PackagingOutputsFromOtherProjects)" />
            <PackagingOutputs Include="@(_ProjectArchitectureItem)" />
        </ItemGroup>

        <Message Text="$(ProjectName) : %(PackagingOutputs.ProjectName).%(PackagingOutputs.OutputGroup) : %(PackagingOutputs.Identity) -> %(PackagingOutputs.TargetPath)" />

    </Target>

    <!-- ============================== -->
    <!-- Getting package architecture.  -->
    <!-- ============================== -->

    <PropertyGroup>
        <_GetPackagePropertiesDependsOn>
            $(_GetPackagePropertiesDependsOn);
            _GetProjectArchitecture;
            _GetRecursiveProjectArchitecture;
            _GetPackageArchitecture;
            _GetDefaultResourceLanguage;
            _CalculateAppxBundleProperties;
        </_GetPackagePropertiesDependsOn>
    </PropertyGroup>

    <!-- Gets some package properties. -->
    <Target Name="_GetPackageProperties"
            Condition="'$(AppxGetPackagePropertiesEnabled)' == 'true'"
            DependsOnTargets="$(_GetPackagePropertiesDependsOn)"
            />

    <!-- Extract Project Architecture from the payload -->
    <Target Name="_GetRecursiveProjectArchitecture">

        <ItemGroup>
            <_RecursiveProjectArchitecture Include="@(PackagingOutputs)" Condition="'%(OutputGroup)' == '_GetProjectArchitecture'" />
            <_RecursiveProjectArchitecture Remove="@(_RecursiveProjectArchitecture)" Condition="'%(ProjectName)' == '$(ProjectName)'" />
        </ItemGroup>

    </Target>

    <!-- Gets package architecture. -->
    <Target Name="_GetPackageArchitecture">

        <GetPackageArchitecture
            Platform="$(Platform)"
            ProjectArchitecture="@(ProjectArchitecture)"
            RecursiveProjectArchitecture="@(_RecursiveProjectArchitecture)"
            >
            <Output TaskParameter="PackageArchitecture" PropertyName="PackageArchitecture" />
        </GetPackageArchitecture>

    </Target>

    <!-- Gets default resource language for the package. -->
    <Target Name="_GetDefaultResourceLanguage">

        <GetDefaultResourceLanguage
            DefaultLanguage="$(DefaultLanguage)"
            SourceAppxManifest="@(SourceAppxManifest)"
            >
            <Output TaskParameter="DefaultResourceLanguage" PropertyName="DefaultResourceLanguage" />
        </GetDefaultResourceLanguage>

    </Target>

    <Target Name="_CalculateAppxBundleProperties"
            Condition="'$(AppxBundle)' != 'Never'">

        <PropertyGroup>
            <AppxBundlePlatforms Condition="'$(AppxBundlePlatforms)' == ''">$(PackageArchitecture)</AppxBundlePlatforms>
        </PropertyGroup>

        <GetAppxBundlePlatforms Input="$(AppxBundlePlatforms)">
            <Output TaskParameter="Platforms" ItemName="AppxBundlePlatform" />
            <Output TaskParameter="Last" PropertyName="AppxBundleLastPlatform" />
        </GetAppxBundlePlatforms>

        <ItemGroup>
            <AppxBundlePlatformWithAnyCPU Condition="'%(Identity)' == 'neutral'" Include="@(AppxBundlePlatform -> 'AnyCPU')" />
            <AppxBundlePlatformWithAnyCPU Condition="'%(Identity)' != 'neutral'" Include="@(AppxBundlePlatform)" />
        </ItemGroup>

        <PropertyGroup>
            <_AppxBundlePlatformsForNamingIntermediate>@(AppxBundlePlatformWithAnyCPU)</_AppxBundlePlatformsForNamingIntermediate>
        </PropertyGroup>

        <PropertyGroup>
            <AppxBundlePlatformsForNaming>$(_AppxBundlePlatformsForNamingIntermediate.Replace(';','_'))</AppxBundlePlatformsForNaming>
        </PropertyGroup>

        <PropertyGroup>
            <AppxBundleProducingPlatform Condition="'$(AppxBundleProducingPlatform)' == ''">$(AppxBundleLastPlatform)</AppxBundleProducingPlatform>
            <AppxBundleResourcePacksProducingPlatform Condition="'$(AppxBundleResourcePacksProducingPlatform)' == ''">$(AppxBundleLastPlatform)</AppxBundleResourcePacksProducingPlatform>
        </PropertyGroup>


        <PropertyGroup Condition="'$(OutDirWasSpecified)' == 'true' 
                              and '$(BuildingInsideVisualStudio)' == 'true'
                              and  $(AppxBundlePlatformsForNaming.Contains('_'))">

            <AppxPackageDir Condition="'$(AppxPackageDirWasSpecified)' != 'true'">$(AppxPackageDirInProjectDir)</AppxPackageDir>
            <PlatformSpecificBundleArtifactsListDir Condition="'$(PlatformSpecificBundleArtifactsListDirWasSpecified)' != 'true'">$(PlatformSpecificBundleArtifactsListDirInProjectDir)</PlatformSpecificBundleArtifactsListDir>

        </PropertyGroup>

        <PropertyGroup>
            <AppxBundlePlatformSpecificArtifactsListPath>$(PlatformSpecificBundleArtifactsListDir)$(PackageArchitecture).txt</AppxBundlePlatformSpecificArtifactsListPath>
        </PropertyGroup>

    </Target>

    <!-- ====================== -->
    <!-- Project output groups. -->
    <!-- ====================== -->

    <!-- Targets that all output groups defined in this targets depends on. -->
    <PropertyGroup>
        <AllOutputGroupsDependsOn>
            $(AllOutputGroupsDependsOn)
            BuildOnlySettings;
            PrepareForBuild;
            AssignTargetPaths;
            ResolveReferences
        </AllOutputGroupsDependsOn>
    </PropertyGroup>

    <!-- ======================================= -->
    <!-- Output group including CopyLocal files. -->
    <!-- ======================================= -->

    <PropertyGroup>
        <CopyLocalFilesOutputGroupDependsOn>
            $(CopyLocalFilesOutputGroupDependsOn);
            $(AllOutputGroupsDependsOn)
        </CopyLocalFilesOutputGroupDependsOn>
    </PropertyGroup>

    <Target Name="CopyLocalFilesOutputGroup"
            DependsOnTargets="$(CopyLocalFilesOutputGroupDependsOn)"
            Returns="@(CopyLocalFilesOutputGroupOutput)">

        <ItemGroup>
            <CopyLocalFilesOutputGroupOutput Include="@(ReferenceCopyLocalPaths)"
                                             Condition="'%(ReferenceCopyLocalPaths.Extension)' != '.xml' or '$(AppxCopyLocalFilesOutputGroupIncludeXmlFiles)' == 'true'">
                <TargetPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</TargetPath>
            </CopyLocalFilesOutputGroupOutput>
        </ItemGroup>

        <!-- In case of Winmd files, we do not get implementation  -->
        <!-- file as separate CopyLocal file (if exist), so we are -->
        <!-- extracting it here.                                   -->
        <ItemGroup>
            <_WinmdWithImplementation
                Include="@(CopyLocalFilesOutputGroupOutput)"
                Condition="'%(CopyLocalFilesOutputGroupOutput.Extension)' == '.winmd' 
                       AND '%(CopyLocalFilesOutputGroupOutput.Filename)' != 'platform'
                       AND '%(CopyLocalFilesOutputGroupOutput.Implementation)' != ''"
                />
        </ItemGroup>

        <ItemGroup>
            <CopyLocalFilesOutputGroupOutput Include="%(_WinmdWithImplementation.RootDir)%(_WinmdWithImplementation.Directory)%(_WinmdWithImplementation.Implementation)">
                <TargetPath>%(_WinmdWithImplementation.DestinationSubDirectory)%(_WinmdWithImplementation.Implementation)</TargetPath>
            </CopyLocalFilesOutputGroupOutput>
        </ItemGroup>

    </Target>

    <!-- =========================================== -->
    <!-- Output group including COM reference files. -->
    <!-- =========================================== -->

    <PropertyGroup>
        <ComFilesOutputGroupDependsOn>
            $(ComFilesOutputGroupDependsOn);
            $(AllOutputGroupsDependsOn)
        </ComFilesOutputGroupDependsOn>
    </PropertyGroup>

    <Target Name="ComFilesOutputGroup"
            DependsOnTargets="$(ComFilesOutputGroupDependsOn)"
            Returns="@(ComFilesOutputGroupOutputs)">

        <ItemGroup>
            <ComFilesOutputGroupOutputs Include="@(ReferenceComWrappersToCopyLocal)" >
                <TargetPath>%(ReferenceComWrappersToCopyLocal.Filename)%(ReferenceComWrappersToCopyLocal.Extension)</TargetPath>
            </ComFilesOutputGroupOutputs>
            <ComFilesOutputGroupOutputs Include="@(ResolvedIsolatedComModules)" >
                <TargetPath>%(ResolvedIsolatedComModules.Filename)%(ResolvedIsolatedComModules.Extension)</TargetPath>
            </ComFilesOutputGroupOutputs>
            <ComFilesOutputGroupOutputs Include="@(NativeReferenceFile)" >
                <TargetPath>%(NativeReferenceFile.Filename)%(NativeReferenceFile.Extension)</TargetPath>
            </ComFilesOutputGroupOutputs>
        </ItemGroup>

    </Target>

    <!-- ============================================ -->
    <!-- Output group including Winmd artifact files. -->
    <!-- ============================================ -->

    <PropertyGroup>
        <CopyWinmdArtifactsOutputGroupDependsOn>
            $(CopyWinmdArtifactsOutputGroupDependsOn);
            $(AllOutputGroupsDependsOn)
        </CopyWinmdArtifactsOutputGroupDependsOn>
    </PropertyGroup>

    <Target
        Name="CopyWinmdArtifactsOutputGroup"
        DependsOnTargets="$(CopyWinmdArtifactsOutputGroupDependsOn)"
        Returns="@(CopyWinmdArtifactsOutputGroupOutputs)">

        <ItemGroup>
            <CopyWinmdArtifactsOutputGroupOutputs Include="@(FinalWinmdExpArtifacts ->'%(FullPath)')">
                <TargetPath>%(FinalWinmdExpArtifacts.DestinationSubDirectory)%(FinalWinmdExpArtifacts.Filename)%(FinalWinmdExpArtifacts.Extension)</TargetPath>
            </CopyWinmdArtifactsOutputGroupOutputs>
        </ItemGroup>

    </Target>

    <!-- ===================== -->
    <!-- Prepare layout target -->
    <!-- ===================== -->

    <PropertyGroup>
        <PrepareLayoutDependsOn>
            $(PrepareLayoutDependsOn);
            BeforePrepareLayout;
            _PrepareLayout;
            AfterPrepareLayout
        </PrepareLayoutDependsOn>
    </PropertyGroup>

    <!-- Prepares layout for debbuging/launching. -->
    <Target
        Name="PrepareLayout"
        Condition="'$(AppxPackage)' == 'true'"
        DependsOnTargets="$(PrepareLayoutDependsOn)" />

    <!-- Implement BeforePrepareLayout to influence final APPX layout recipe content.                          -->
    <!-- Here one can specify these additional items:                                                          -->
    <!-- (TODO: final extensibility items list and names - depending how much InternalPrepareLayout recognize) -->
    <!--                                                                                                       -->
    <!--    @(AppxAdditionalPackageContent)                                                                    -->
    <!--    @(AppxAdditionalSDKDependencies)                                                                   -->
    <!--    @(AppxAdditionalPRI)                                                                               -->
    <!--    @(AppxAdditionalWinmd)                                                                             -->
    <!--                                                                                                       -->
    <Target Name="BeforePrepareLayout" />

    <!-- Internal prepare layout target. -->
    <Target
        Name="_PrepareLayout"
        Inputs="$(MSBuildAllProjects);$(AppxPackageRecipe)"
        Outputs="$(FinalAppxPackageRecipe)">

        <!-- TODO: PRI and Winmd merge steps will be moved here -->

        <Copy UseHardlinksIfPossible="false"
              SourceFiles="$(AppxPackageRecipe)"
              DestinationFiles="$(FinalAppxPackageRecipe)"
              />
    </Target>

    <!-- Implement AfterPrepareLayout if needed to modify layout in more custom way. -->
    <!-- Here one can do arbitraty changes to $(FinalAppxPackageRecipe)              -->
    <Target Name="AfterPrepareLayout" />

    <!-- ====================== -->
    <!-- Register layout target -->
    <!-- ====================== -->

    <PropertyGroup>
        <RegisterAppxLayoutDependsOn>
            $(RegisterAppxLayoutDependsOn);
            PrepareLayout
        </RegisterAppxLayoutDependsOn>
    </PropertyGroup>

    <Target Name="RegisterAppxLayout"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="$(RegisterAppxLayoutDependsOn)">

        <CreateAppxLayout
            AppxRecipe="$(FinalAppxPackageRecipe)"
            LayoutDir="$(LayoutDir)"
            IgnoreLocalNetworkLoopback="$(IgnoreLocalNetworkLoopback)"
            AllowLocalNetworkLoopback="$(AllowLocalNetworkLoopback)"
            Incremental="$(UseIncrementalAppxRegistration)">

            <Output TaskParameter="PackageFullName" PropertyName="PackageFullName"/>
            <Output TaskParameter="FirstAppUserModelId" PropertyName="FirstAppUserModelId"/>
        </CreateAppxLayout>
    </Target>

    <!-- ======================== -->
    <!-- Unregister layout target -->
    <!-- ======================== -->

    <PropertyGroup>
        <UnRegisterAppxLayoutDependsOn>
            $(UnRegisterAppxLayoutDependsOn);
        </UnRegisterAppxLayoutDependsOn>
    </PropertyGroup>

    <Target Name="UnRegisterAppxLayout"
            Condition="'$(AppxPackage)' == 'true'"
            DependsOnTargets="$(UnRegisterAppxLayoutDependsOn)">

        <UnregisterAppx LayoutDir="$(LayoutDir)" />

    </Target>

</Project>
