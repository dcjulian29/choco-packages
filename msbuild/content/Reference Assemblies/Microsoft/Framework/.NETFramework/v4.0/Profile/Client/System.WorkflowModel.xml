<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.WorkflowModel</name>
  </assembly>
  <members>
    <member name="T:System.WorkflowModel.ActionArgument">
      <summary>Represents a parameter of an <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActionArgument.#ctor(System.WorkflowModel.Variable,System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ActionArgument" /> class.</summary>
      <param name="data">The value of the argument.</param>
      <param name="type">The data type of the argument.</param>
      <param name="direction">The direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</param>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Data">
      <summary>Gets the value of the argument.</summary>
      <returns>The value of the argument.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Direction">
      <summary>Gets the direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>The direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Type">
      <summary>Gets the data type of the argument.</summary>
      <returns>The data type of the argument.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActionArgumentAttribute">
      <summary>Indicates that a <see cref="T:System.WorkflowModel.Variable" /> in a class derived from <see cref="T:System.WorkflowModel.ActivityAction" /> is an <see cref="T:System.WorkflowModel.ActionArgument" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActionArgumentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ActionArgumentAttribute" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActionArgumentAttribute.Direction">
      <summary>Gets or sets the direction of the data flow through the argument.</summary>
      <returns>The direction of the data flow through the argument.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activity"></member>
    <member name="M:System.WorkflowModel.Activity.#ctor"></member>
    <member name="P:System.WorkflowModel.Activity.Body"></member>
    <member name="M:System.WorkflowModel.Activity.CreateBody"></member>
    <member name="M:System.WorkflowModel.Activity.Execute(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activity.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})"></member>
    <member name="M:System.WorkflowModel.Activity.OnOpen(System.WorkflowModel.DeclaredEnvironment)"></member>
    <member name="T:System.WorkflowModel.ActivityAbortContext">
      <summary>Provides information about the reason a workflow was aborted.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAbortContext.Environment"></member>
    <member name="M:System.WorkflowModel.ActivityAbortContext.GetExtension``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityAbortContext.Reason">
      <summary>Gets an <see cref="T:System.Exception" /> that contains the reason for the workflow being aborted.</summary>
      <returns>An <see cref="T:System.Exception" /> that contains the reason for the workflow being aborted.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.GetActionArguments">
      <summary>Gets the arguments for the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.WorkflowModel.ActionArgument" /> that contains the arguments for the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction.Handler">
      <summary>Gets or sets the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.WorkflowElement" /> that represents the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.ThrowIfOpen">
      <summary>Throws an exception when the <see cref="P:System.WorkflowModel.ActivityAction.Handler" /> is set and the handler is running. </summary>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`1">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes one argument.</summary>
      <typeparam name="T">An argument to the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" /></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`1.Argument">
      <summary>Gets or sets the argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`2">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes two arguments.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`2" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`2.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`2.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`3">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes three arguments. </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`3" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument3">
      <summary>Gets or sets the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`4">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes four arguments.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`4" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument3">
      <summary>Gets or sets the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument4">
      <summary>Gets or sets the fourth argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the fourth argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityExecutionContext"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.AbortChildInstance(System.WorkflowModel.ActivityInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.AbortChildInstance(System.WorkflowModel.ActivityInstance,System.Exception)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CancelChild(System.WorkflowModel.ActivityInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CancelChildren"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateAndRegisterSubInstance"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateAndRegisterSubInstance(System.Guid)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark(System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark(System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String,System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.SubInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.SubInstance,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.DataContext"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.DefaultSubInstance"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.Environment"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.EvaluateExpression``1(System.WorkflowModel.ValueExpression{``0})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.ExecutingActivityInstance"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.GetChildren"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.GetExtension``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.MarkCanceled"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.Properties"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveAllBookmarks"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveNamedBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveProtocolBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveProtocolBookmark(System.String,System.WorkflowModel.SubInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.CompletionCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.CompletionCallback,System.WorkflowModel.FaultCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.FaultCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupAsyncOperationBlock"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupIsolationBlock(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupIsolationBlock(System.WorkflowModel.Handle,System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupNoPersistenceBlock"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetValue``1(System.WorkflowModel.InOutArgument{``0},``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetValue``1(System.WorkflowModel.OutArgument{``0},``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.Track(System.WorkflowModel.Tracking.TrackingRecord)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.TryEvaluateExpression``1(System.WorkflowModel.ValueExpression{``0},``0@)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.WorkflowInstanceId"></member>
    <member name="T:System.WorkflowModel.ActivityFaultContext"></member>
    <member name="M:System.WorkflowModel.ActivityFaultContext.HandleFault"></member>
    <member name="T:System.WorkflowModel.ActivityInstance"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Activity"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Environment"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.HasCancelBeenRequested"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Id"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.IsCompleted"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.State"></member>
    <member name="T:System.WorkflowModel.ActivityInstanceState"></member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Executing">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Closed">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Canceled">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Faulted">
      <summary />
    </member>
    <member name="T:System.WorkflowModel.Argument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data in and out of a workflow.</summary>
    </member>
    <member name="P:System.WorkflowModel.Argument.ArgumentType">
      <summary>When overridden in a derived class, gets the data type for the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The data type for the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Argument.Bind(System.WorkflowModel.Argument,System.WorkflowModel.RuntimeArgument)">
      <summary>Binds an <see cref="T:System.WorkflowModel.Argument" /> to a <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <param name="binding"></param>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.Argument.Create(System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes and returns a new <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Argument" />.</returns>
      <param name="type">The data type of the <see cref="T:System.WorkflowModel.Argument" />.</param>
      <param name="direction">The direction of the data flow through the <see cref="T:System.WorkflowModel.Argument" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Argument.Direction">
      <summary>Gets an <see cref="T:System.WorkflowModel.ArgumentDirection" /> that specifies whether the <see cref="T:System.WorkflowModel.Argument" /> represents the flow of data into an activity, out of an activity, or both into and out of an activity or workflow. </summary>
      <returns>An <see cref="T:System.WorkflowModel.ArgumentDirection" /> that indicates direction of the flow of data through the <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.DynamicParameterName">
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.Expression">
      <summary>Gets or sets a <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the value of the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the value of the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Argument.Get``1(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" /></returns>
      <param name="context"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Argument.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> of the executing <see cref="T:System.WorkflowModel.Activity" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="F:System.WorkflowModel.Argument.ReturnValueName"></member>
    <member name="M:System.WorkflowModel.Argument.Set``1(System.WorkflowModel.ActivityExecutionContext,``0)">
      <summary>Sets the value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> of the currently executing <see cref="T:System.WorkflowModel.Activity" />.</param>
      <param name="value">The new value for the bound data.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Argument.ShouldSerializeXamlReferenceName">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Argument.XamlReferenceName" /> property value for this <see cref="T:System.WorkflowModel.Argument" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Argument.XamlReferenceName" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.XamlReferenceName">
      <summary>Gets or sets a value that identifies this <see cref="T:System.WorkflowModel.Argument" /> for XAML serialization purposes.</summary>
      <returns>A value that identifies this <see cref="T:System.WorkflowModel.Argument" /> for XAML serialization purposes.</returns>
    </member>
    <member name="T:System.WorkflowModel.ArgumentDirection">
      <summary>Specifies the direction of data flow for an <see cref="T:System.WorkflowModel.Argument" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.In">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data into a workflow or activity.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.Out">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data out of a workflow or activity.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.InOut">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data into and out of a workflow or activity.</summary>
    </member>
    <member name="T:System.WorkflowModel.ArgumentValueSerializer"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.#ctor"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="T:System.WorkflowModel.AsyncOperationContext"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.AbortInstance(System.Exception)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.EndCancelOperation(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.EndCompleteOperation(System.IAsyncResult)"></member>
    <member name="T:System.WorkflowModel.Bookmark">
      <summary>Represents a point at which a workflow or activity can passively wait to be resumed.</summary>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginResume(System.WorkflowModel.WorkflowInstance,System.Object,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />. </summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginTryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginTryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Close(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Closes the <see cref="T:System.WorkflowModel.Bookmark" /> and removes it from the workflow.</summary>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.EndResume(System.IAsyncResult)">
      <summary>Completes the call to <see cref="Overload:System.WorkflowModel.Bookmark.BeginResume" /> and retrieves the results of the resume operation.</summary>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.EndTryResume(System.IAsyncResult)">
      <summary>Completes the call to <see cref="Overload:System.WorkflowModel.Bookmark.BeginTryResume" /> and returns true if the <see cref="T:System.WorkflowModel.Bookmark" /> resumed; otherwise false.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.WorkflowModel.Bookmark" /> objects refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.Bookmark" /> objects are equal; otherwise false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Equals(System.WorkflowModel.Bookmark)">
      <summary>Determines whether two <see cref="T:System.WorkflowModel.Bookmark" /> objects refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.Bookmark" /> objects are equal; otherwise false.</returns>
      <param name="other"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.GetHashCode">
      <summary>Returns a unique identifier for this <see cref="T:System.WorkflowModel.Bookmark" /> instance.</summary>
      <returns>An <see cref="T:System.Int32" /> that uniquely identifies this <see cref="T:System.WorkflowModel.Bookmark" /> instance..</returns>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.WorkflowInstance,System.Object)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.WorkflowInstance,System.Object)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="T:System.WorkflowModel.BookmarkCallback"></member>
    <member name="T:System.WorkflowModel.BookmarkInfo"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.BookmarkName"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.OwnerDisplayName"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.SubInstanceInfo"></member>
    <member name="T:System.WorkflowModel.BookmarkNotFoundException">
      <summary>The exception that is thrown when a workflow is resumed but the <see cref="T:System.WorkflowModel.Bookmark" /> is not found.</summary>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Bookmark" /> class using the given <see cref="T: System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using the given <see cref="T:System.String" />.</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using the given <see cref="T:System.String" /> and <see cref="T:System.Exception" />.</summary>
      <param name="message">The <see cref="T:System.WorkflowModel.BookmarkNotFoundException" />.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current <see cref="T:System.WorkflowModel.BookmarkNotFoundException" />.</param>
    </member>
    <member name="T:System.WorkflowModel.BookmarkOptions">
      <summary>Specifies the options for a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.None">
      <summary>Default <see cref="T:System.WorkflowModel.Bookmark" /> options,</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.MultipleResume">
      <summary>A <see cref="T:System.WorkflowModel.Bookmark" /> that can be resumed multiple times.</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.NonBlocking">
      <summary>A <see cref="T:System.WorkflowModel.Bookmark" /> that does not block the workflow.</summary>
    </member>
    <member name="T:System.WorkflowModel.CommitOrCompleteTransactionCallback"></member>
    <member name="T:System.WorkflowModel.CompletionCallback"></member>
    <member name="T:System.WorkflowModel.DeclaredEnvironment"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.#ctor"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.Declare(System.WorkflowModel.Variable)"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.GetVariable(System.String)"></member>
    <member name="T:System.WorkflowModel.DynamicActivityAction"></member>
    <member name="M:System.WorkflowModel.DynamicActivityAction.#ctor"></member>
    <member name="P:System.WorkflowModel.DynamicActivityAction.InVariables"></member>
    <member name="P:System.WorkflowModel.DynamicActivityAction.OutVariables"></member>
    <member name="T:System.WorkflowModel.DynamicArgumentDictionary`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Add(System.String,`0)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Clear"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.ContainsKey(System.String)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Count"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Item(System.String)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Keys"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.TryGetValue(System.String,`0@)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Values"></member>
    <member name="T:System.WorkflowModel.ExecutionProperties"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Add(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Find(System.String)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.ExecutionProperties.IsEmpty"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:System.WorkflowModel.ExtensionCollection"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.#ctor"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.#ctor(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.ClearItems"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.Find``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ExtensionCollection.FindAll``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ExtensionCollection.InsertItem(System.Int32,System.Object)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.SetItem(System.Int32,System.Object)"></member>
    <member name="T:System.WorkflowModel.FaultCallback"></member>
    <member name="T:System.WorkflowModel.Handle"></member>
    <member name="M:System.WorkflowModel.Handle.#ctor"></member>
    <member name="P:System.WorkflowModel.Handle.ExecutionPropertyName"></member>
    <member name="M:System.WorkflowModel.Handle.OnInitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="M:System.WorkflowModel.Handle.OnUninitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="P:System.WorkflowModel.Handle.Owner"></member>
    <member name="M:System.WorkflowModel.Handle.ThrowIfUninitialized"></member>
    <member name="T:System.WorkflowModel.HandleInitializationContext"></member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.CreateAndInitializeHandle``1">
      <typeparam name="THandle"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.Dispose"></member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.UninitializeHandle(System.WorkflowModel.Handle)"></member>
    <member name="T:System.WorkflowModel.IActivityExtensionProvider"></member>
    <member name="M:System.WorkflowModel.IActivityExtensionProvider.EnsureExtensions(System.WorkflowModel.IExtensionCollection)"></member>
    <member name="T:System.WorkflowModel.IExecutionProperty"></member>
    <member name="M:System.WorkflowModel.IExecutionProperty.CleanupWorkflowThread"></member>
    <member name="M:System.WorkflowModel.IExecutionProperty.SetupWorkflowThread"></member>
    <member name="T:System.WorkflowModel.IExpressionContainer"></member>
    <member name="P:System.WorkflowModel.IExpressionContainer.Expression"></member>
    <member name="T:System.WorkflowModel.IExtensibleObject"></member>
    <member name="P:System.WorkflowModel.IExtensibleObject.Extensions"></member>
    <member name="T:System.WorkflowModel.IExtension"></member>
    <member name="M:System.WorkflowModel.IExtension.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.IExtension.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="T:System.WorkflowModel.IExtensionCollection"></member>
    <member name="M:System.WorkflowModel.IExtensionCollection.Find``1">
      <returns>Returns <see cref="{0}" />.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.IExtensionCollection.FindAll``1">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.InArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an activity.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgument.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.InArgument" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the value of the data that is bound to this <see cref="T:System.WorkflowModel.InArgument" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> for the data.</param>
    </member>
    <member name="T:System.WorkflowModel.InArgument`1">
      <summary>Represents a binding terminal that represents the flow of data into an activity.</summary>
      <typeparam name="T">The type of the data for this <see cref="T:System.WorkflowModel.InArgument`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given expression.</summary>
      <param name="lambdaExpression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.ValueExpression{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given value.</summary>
      <param name="constValue"></param>
    </member>
    <member name="P:System.WorkflowModel.InArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the value of this <see cref="T:System.WorkflowModel.InArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromExpression(System.WorkflowModel.ValueExpression{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument)">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromValue(`0)">
      <summary>Create an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</returns>
      <param name="constValue"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromVariable(System.WorkflowModel.Variable)">
      <summary>Create an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</returns>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.InOutArgument)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{`0})~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(`0)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="constValue"></param>
    </member>
    <member name="T:System.WorkflowModel.InArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.InArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.InArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data in and out of a workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the value of the data that is bound to this <see cref="T:System.WorkflowModel.InOutArgument" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> for the data.</param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgument`1">
      <summary>Represents a binding terminal that represents the flow of data into and out of an activity.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given expression.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="P:System.WorkflowModel.InOutArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the value of this <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.FromExpression(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>
An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.FromVariable(System.WorkflowModel.Variable{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>
An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InAOutrgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</returns>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the location of the value for the <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Location`1" />.
</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})~System.WorkflowModel.InOutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given expression.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.op_Implicit(System.WorkflowModel.Variable{`0})~System.WorkflowModel.InOutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given variable.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the argument.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.InOutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.InOutArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction" /> handler.</summary>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction.ActionArguments">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> of arguments passed to the associated <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of arguments passed to the associated <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`1">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`1" /> handler.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`1.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`1" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`1" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`1.Argument">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`2">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`2" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`2" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`2" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`2" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`2" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`2" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`2" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`3">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`3" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`3" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`3" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`3" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`3" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument3">
      <summary>Gets or sets the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`4">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`4" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`4" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`4" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`4" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`4" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument3">
      <summary>Gets or sets the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInvoker.InvokeCompleted" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeCompletedEventArgs.Outputs">
      <summary>Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> of public arguments and variables from the completed workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> of public arguments and variables from the completed workflow.</returns>
    </member>
    <member name="T:System.WorkflowModel.IPropertyRegistrationCallback"></member>
    <member name="M:System.WorkflowModel.IPropertyRegistrationCallback.Register(System.WorkflowModel.RegistrationContext)"></member>
    <member name="M:System.WorkflowModel.IPropertyRegistrationCallback.Unregister(System.WorkflowModel.RegistrationContext)"></member>
    <member name="T:System.WorkflowModel.IValueSerializableExpression"></member>
    <member name="M:System.WorkflowModel.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="T:System.WorkflowModel.LambdaLocationExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})"></member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.LambdaLocationExpression`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="T:System.WorkflowModel.LambdaValueExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})"></member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.LambdaValueExpression`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="T:System.WorkflowModel.Literal`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Literal`1.#ctor"></member>
    <member name="M:System.WorkflowModel.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.Literal`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="M:System.WorkflowModel.Literal`1.ToString"></member>
    <member name="P:System.WorkflowModel.Literal`1.Value"></member>
    <member name="T:System.WorkflowModel.Location"></member>
    <member name="M:System.WorkflowModel.Location.#ctor"></member>
    <member name="P:System.WorkflowModel.Location.CanBeMapped"></member>
    <member name="E:System.WorkflowModel.Location.GlobalLocationChanged"></member>
    <member name="M:System.WorkflowModel.Location.GlobalNotifyLocationChanged(System.Object,System.String)"></member>
    <member name="P:System.WorkflowModel.Location.LocationType"></member>
    <member name="P:System.WorkflowModel.Location.Value"></member>
    <member name="P:System.WorkflowModel.Location.ValueCore"></member>
    <member name="T:System.WorkflowModel.Location`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Location`1.#ctor"></member>
    <member name="P:System.WorkflowModel.Location`1.LocationType"></member>
    <member name="P:System.WorkflowModel.Location`1.Value"></member>
    <member name="P:System.WorkflowModel.Location`1.ValueCore"></member>
    <member name="T:System.WorkflowModel.LocationEnvironment"></member>
    <member name="M:System.WorkflowModel.LocationEnvironment.ResolveExternalSymbolValue(System.String)"></member>
    <member name="M:System.WorkflowModel.LocationEnvironment.ResolveExternalSymbolValue``1(System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.MethodInvoke"></member>
    <member name="M:System.WorkflowModel.MethodInvoke.#ctor"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.GenericTypeArguments"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.MethodName"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.Parameters"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.Result"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.RunAsynchronously"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.TargetObject"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.TargetType"></member>
    <member name="T:System.WorkflowModel.NameScopeImplementation"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.#ctor"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.FindName(System.String)"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.RegisterName(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.NoPersistHandle"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.Enter(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.Exit(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="T:System.WorkflowModel.OutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an activity.</summary>
    </member>
    <member name="T:System.WorkflowModel.OutArgument`1">
      <summary>Represents a binding terminal that represents the flow of data out of an activity.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor">
      <summary>Initialize a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given expression.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.OutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.OutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.OutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="P:System.WorkflowModel.OutArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the location bound to this <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromExpression(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromVariable(System.WorkflowModel.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the location of the value for the <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.Location`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.InOutArgument)~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.InOutArgument{`0})~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given expression.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the argument.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.WorkflowModel.OutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.OutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.OutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.OutArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.PropertyReferenceExtension`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.PropertyReferenceExtension`1.#ctor"></member>
    <member name="P:System.WorkflowModel.PropertyReferenceExtension`1.PropertyName"></member>
    <member name="M:System.WorkflowModel.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)"></member>
    <member name="T:System.WorkflowModel.RegistrationContext"></member>
    <member name="M:System.WorkflowModel.RegistrationContext.FindProperty(System.String)"></member>
    <member name="T:System.WorkflowModel.ResumeBookmark">
      <summary>An activity used to resume unnamed bookmarks within the same workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.ResumeBookmark.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ResumeBookmark" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ResumeBookmark.Bookmark">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel. Bookmark" /> to be resumed by this activity.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel. Bookmark" /> to be resumed by this activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.ResumeBookmark.Value">
      <summary>Gets or sets the value that is passed to this activity’s <see cref="T:System.WorkflowModel. Bookmark" /> when it is resumed.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the value that is passed to this activity’s <see cref="T:System.WorkflowModel. Bookmark" /> when it is resumed.</returns>
    </member>
    <member name="T:System.WorkflowModel.RuntimeArgument">
      <summary>Describes the characteristics of an argument of an activity to the runtime.</summary>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.#ctor(System.String,System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.RuntimeArgument" /> class with a name, data type, and argument direction.</summary>
      <param name="name">The name of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="direction">The argument direction.</param>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.#ctor(System.String,System.Type,System.WorkflowModel.ArgumentDirection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.RuntimeArgument" /> class with a name, data type, argument direction, and a value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value.</summary>
      <param name="name">The name of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="direction">The argument direction.</param>
      <param name="isRequired">A value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value</param>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Direction">
      <summary>Gets the direction of the data flow through this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The direction of the data flow through this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.Get``1(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Returns the value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> associated with the activity that contains the value.</param>
      <typeparam name="T">The data type of the value to return.</typeparam>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.IsRequired">
      <summary>Gets a value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Name">
      <summary>Gets the name of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The name of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.Set``1(System.WorkflowModel.ActivityExecutionContext,``0)">
      <summary>Sets the value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> associated with the activity that contains the value.</param>
      <param name="value">The new value for the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <typeparam name="T">The data type of the value to return.</typeparam>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Type">
      <summary>Gets the data type of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The data type of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.SubInstance">
      <summary>Represents a group of related bookmarks under a common identifier and allows the runtime to make decisions about whether a particular bookmark resumption is valid or may become valid.</summary>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.Equals(System.WorkflowModel.SubInstance)">
      <summary>Returns a value that indicates whether the specified object is equal to the <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.WorkflowModel.SubInstance" />; otherwise false.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>The hash code for this <see cref="T:System.WorkflowModel.SubInstance" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.SubInstance.Id">
      <summary>Gets the unique identifier for this <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>The unique identifier for this <see cref="T:System.WorkflowModel.SubInstance" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.Initialize(System.WorkflowModel.ActivityExecutionContext,System.Guid)">
      <summary>Initializes the <see cref="T:System.WorkflowModel.SubInstance" /> to the specified <see cref="T:System.Guid" />.</summary>
      <param name="context">The current <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</param>
      <param name="id">The unique identifier for the <see cref="T:System.WorkflowModel.SubInstance" />.</param>
    </member>
    <member name="P:System.WorkflowModel.SubInstance.IsInitialized">
      <summary>Gets a value that indicates whether the <see cref="T:System.WorkflowModel.SubInstance" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.SubInstance" /> is initialized; otherwise false.</returns>
    </member>
    <member name="T:System.WorkflowModel.SubInstanceHandle"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.Initialize(System.WorkflowModel.ActivityExecutionContext,System.Guid)"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.OnInitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.OnUninitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="T:System.WorkflowModel.SubInstanceInfo"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.Id"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.IsInitialized"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.TemporaryId"></member>
    <member name="T:System.WorkflowModel.SymbolResolver"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.#ctor"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Add(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.AsNameScope"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Clear"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.ContainsKey(System.String)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Count"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Item(System.String)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Keys"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.TryGetValue(System.String,System.Object@)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Values"></member>
    <member name="T:System.WorkflowModel.TransactionHandle"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.CreateTransactionAndEnlistWorkflow(System.WorkflowModel.ActivityExecutionContext,System.Transactions.IsolationLevel,System.TimeSpan)"></member>
    <member name="P:System.WorkflowModel.TransactionHandle.CurrentTransaction"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.IsWorkflowEnlisted(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.SetTransaction(System.WorkflowModel.ActivityExecutionContext,System.Transactions.Transaction,System.Boolean,System.WorkflowModel.CommitOrCompleteTransactionCallback)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.SetTransaction(System.WorkflowModel.ActivityExecutionContext,System.Transactions.Transaction,System.WorkflowModel.CommitOrCompleteTransactionCallback)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.System#WorkflowModel#IExecutionProperty#CleanupWorkflowThread"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.System#WorkflowModel#IExecutionProperty#SetupWorkflowThread"></member>
    <member name="T:System.WorkflowModel.TypeConverterBase"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"></member>
    <member name="T:System.WorkflowModel.ValidationException">
      <summary>The exception that is thrown when a workflow or activity is in an invalid state.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.ValueExpression">
      <summary>An expression that evaluates to a single value.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.Create``1(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,``0}})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression" /> class using the passed Linq expression.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
      <param name="expression"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.Create``1(System.WorkflowModel.Variable{``0})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the passed <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="variable"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLiteral``1(``0)">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class that evaluates to the passed literal value.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed literal value.</returns>
      <param name="value"></param>
      <typeparam name="TLiteral"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLocationExpression``1(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,``0}})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the given Linq expression.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed Linq expression.</returns>
      <param name="expression"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLocationExpression``1(System.WorkflowModel.Variable{``0})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the given <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the given <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="variable"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.ExpressionType">
      <summary>Gets the <see cref="T:System.Type" /> to which the <see cref="T:System.WorkflowModel.ValueExpression" /> evaluates.</summary>
      <returns>The <see cref="T:System.Type" /> to which the <see cref="T:System.WorkflowModel.ValueExpression" /> evaluates.</returns>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.Result">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.OutArgument" /> by referencing the abstract <see cref="P:System.WorkflowModel.ValueExpression.ResultCore" /> property that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.ResultCore">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ValueExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression`1.#ctor"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.ExpressionType"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromValue(`0)"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromVariable(System.WorkflowModel.Variable)"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromVariable(System.WorkflowModel.Variable{`0})"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(System.WorkflowModel.Variable{`0})~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(`0)~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.Result"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.ResultCore"></member>
    <member name="T:System.WorkflowModel.ValueExpressionConverter"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.#ctor(System.Type)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.CompileExpression(System.String,System.ComponentModel.ITypeDescriptorContext,System.Type,System.Boolean)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.RegisterCompileReadyExpressionHandler(System.Func{System.WorkflowModel.ValueExpression,System.Type,System.String,System.WorkflowModel.ValueExpression})"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.RegisterInvalidExpressionHandler(System.Func{System.WorkflowModel.ExpressionParser.SourceExpressionException,System.Type,System.String,System.ComponentModel.ITypeDescriptorContext,System.WorkflowModel.ValueExpression})"></member>
    <member name="T:System.WorkflowModel.ValueExpressionValueSerializer"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.#ctor"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.GetService``1(System.ComponentModel.ITypeDescriptorContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.Variable">
      <summary>The abstract base class from which the workflow data member support class <see cref="T:System.WorkflowModel.Variable`1" /> derives.</summary>
    </member>
    <member name="M:System.WorkflowModel.Variable.Create(System.String,System.Type,System.WorkflowModel.VariableModifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Variable" /> class with the given parameters.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="name">The name for the <see cref="T:System.WorkflowModel.Variable" />.</param>
      <param name="type">The <see cref="T:System.Type" /> for the <see cref="T:System.WorkflowModel.Variable" />.</param>
      <param name="modifiers">The configuration options for the <see cref="T:System.WorkflowModel.Variable" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.Default">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value for the <see cref="T:System.WorkflowModel.Variable" /> using the passed <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value for the <see cref="T:System.WorkflowModel.Variable" /> using the passed <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.Variable" />.
</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.Modifiers">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.VariableModifiers" /> value for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.VariableModifiers" /> value for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Variable.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable.Set(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
      <param name="value">The value for the <see cref="T:System.WorkflowModel.Variable" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.VariableType">
      <summary>When overridden in a derived class, gets the data type for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The data type for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Variable`1">
      <summary>Represents a variable in a workflow.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.WorkflowModel.Variable`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Variable`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Variable`1.Default">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.Variable`1" /> using the passed <see cref="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.ActivityExecutionContext)" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.Variable`1" /> using the passed <see cref="T:System.WorkflowModel.LocationEnvironment" /></summary>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
      <param name="value">The value for the <see cref="T:System.WorkflowModel.Variable`1" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable`1.VariableType">
      <summary>Gets the <see cref="T:System.Type" /> of the value for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The type of variable.</returns>
    </member>
    <member name="T:System.WorkflowModel.VariableModifiers">
      <summary>Specifies the way the workflow runtime treats <see cref="T:System.WorkflowModel.Variable" /> objects.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.None">
      <summary>No modifiers are specified for the <see cref="T:System.WorkflowModel.Variable" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.ReadOnly">
      <summary>The value for the <see cref="T:System.WorkflowModel.Variable" /> cannot be changed.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.Mapped">
      <summary>The <see cref="T:System.WorkflowModel.Variable" /> is mapped for persistence.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.Tracked">
      <summary>The <see cref="T:System.WorkflowModel.Variable" /> is passed to tracking participants.</summary>
    </member>
    <member name="T:System.WorkflowModel.VariableReference`1">
      <summary>Represents a reference to a <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.WorkflowModel.VariableReference`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.VariableReference`1" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.VariableReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.VariableReference`1.System#WorkflowModel#IExpressionContainer#Expression">
      <summary>Initializes a new instance of an <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableReference`1" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableReference`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableReference`1" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableReference`1" /> object.</returns>
    </member>
    <member name="P:System.WorkflowModel.VariableReference`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableReference`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableReference`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.VariableValue`1">
      <summary>Represents an expression that indicates the value of a variable.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the expression’s evaluation.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.VariableValue`1" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.VariableValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.VariableValue`1.System#WorkflowModel#IExpressionContainer#Expression">
      <summary>Initializes a new instance of an <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableValue`1" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableValue`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableValue`1" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableValue`1" /> object.</returns>
    </member>
    <member name="P:System.WorkflowModel.VariableValue`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableValue`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableValue`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowAbortedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInstance.Aborted" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowAbortedEventArgs.Reason">
      <summary>Gets the <see cref="T:System.Exception" /> that caused the workflow to abort.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow to abort.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowAbortedException">
      <summary>The exception that is thrown when an operation is invoked on an aborted workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowClosedException">
      <summary>The exception that is thrown when an operation is invoked on a closed workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.CompletionState">
      <summary>Gets the <see cref="T:System.WorkflowModel.ActivityInstanceState" /> for the <see cref="T:System.WorkflowModel.WorkflowInstance" /> for which the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event is raised.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityInstanceState" /> for the <see cref="T:System.WorkflowModel.WorkflowInstance" /> for which the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event is raised.</returns>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.Outputs">
      <summary>Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains public arguments and variables for the completed workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains public arguments and variables for the completed workflow.</returns>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.TerminationException">
      <summary>Gets the <see cref="T:System.Exception" /> that caused the termination of the workflow if it did not completed successfully.</summary>
      <returns>The exception that caused the termination of the workflow if it did not completed successfully.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowCompletedException">
      <summary>The exception that is thrown when an operation is invoked on a completed workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowDataContext"></member>
    <member name="M:System.WorkflowModel.WorkflowDataContext.Dispose"></member>
    <member name="M:System.WorkflowModel.WorkflowDataContext.GetProperties"></member>
    <member name="E:System.WorkflowModel.WorkflowDataContext.PropertyChanged"></member>
    <member name="T:System.WorkflowModel.WorkflowElement"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.#ctor"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.Abort(System.WorkflowModel.ActivityAbortContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.Cancel(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.Data"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DisplayName"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.Execute(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetActions"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetArguments"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetChildren"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetConstraints"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetEnvironmentVariables"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.Id"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.IsOpen"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetActions(System.Collections.Generic.IList{System.WorkflowModel.ActivityAction})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <param name="children"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetConstraints(System.Collections.Generic.IList{System.WorkflowModel.Validation.Constraint})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <param name="variables"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.ShouldSerializeDisplayName"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.ThrowIfOpen"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.ToString"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.ClearItems"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.InsertItem(System.Int32,`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.SetItem(System.Int32,`0)"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2">
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Add(`0,`1)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Clear"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.ContainsKey(`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Count"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Item(`0)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Keys"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Remove(`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.TryGetValue(`0,`1@)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Values"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2">
      <typeparam name="TKey"></typeparam>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.ClearItems"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.InsertItem(System.Int32,`1)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.SetItem(System.Int32,`1)"></member>
    <member name="T:System.WorkflowModel.WorkflowInstance"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Abort"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Abort(System.String)">
      <param name="reason"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Aborted"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginCancel(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginClose(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.Threading.SynchronizationContext,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="syncContext"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.Threading.SynchronizationContext,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="syncContext"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPause(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPause(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.Boolean,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResume(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResume(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.Guid,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.Boolean,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryUnload(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginUnload(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Cancel"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Cancel(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Close"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Close(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Completed"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="parameters"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="parameters"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Guid)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="instanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Guid,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="instanceId"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="syncContext"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Definition">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowElement" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndCancel(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndClose(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndLoad(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndPause(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndPersist(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResume(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResumeBookmark(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResumeProtocolBookmark(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTerminate(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTryPersist(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTryUnload(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndUnload(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Extensions"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetAllBookmarks">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetAllBookmarks(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetProtocolBookmarks(System.Guid)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="subInstanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetProtocolBookmarks(System.Guid,System.TimeSpan)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Id"></member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Idle"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Pause"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Pause(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.Boolean)">
      <param name="unlock"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.Boolean,System.TimeSpan)">
      <param name="unlock"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Resume"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Resume(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeBookmark(System.String,System.Object)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.Guid)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.Guid,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.Exception)">
      <param name="reason"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.Exception,System.TimeSpan)">
      <param name="reason"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.String)">
      <param name="reason"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.String,System.TimeSpan)">
      <param name="reason"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.Boolean)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="unlock"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.Boolean,System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryUnload">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryUnload(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.UnhandledException"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Unload"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Unload(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowInstanceException">
      <summary>The base class for exceptions that are thrown when an operation is invoked on a <see cref="T:System.WorkflowModel.WorkflowInstance" /> when it is in a state for which the operation is not valid. </summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the unique identifier of the workflow instance associated with this exception. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstanceException.InstanceId">
      <summary>Gets the unique identifier of the workflow instance that raised the exception.</summary>
      <returns>The unique identifier of the workflow instance that raised the exception.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowInstanceInfo"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.ActiveBookmarks"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.CompletionException"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.IsIdle"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.State"></member>
    <member name="T:System.WorkflowModel.WorkflowInvoker"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.CancelAsync(System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.EndInvoke(System.IAsyncResult)"></member>
    <member name="P:System.WorkflowModel.WorkflowInvoker.Extensions"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)"></member>
    <member name="E:System.WorkflowModel.WorkflowInvoker.InvokeCompleted"></member>
    <member name="T:System.WorkflowModel.WorkflowTerminatedException">
      <summary>The exception that is thrown when an operation is invoked on a terminated workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="P:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.UnhandledException" /> event.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs" /> class.</summary>
      <param name="exception">The <see cref="T:System.Exception" /> that was unhandled by the workflow.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.HandleException">
      <summary>Marks the exception as handled.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.UnhandledException">
      <summary>Gets the unhandled <see cref="T:System.Exception" /> that was raised by the workflow.</summary>
      <returns>The unhandled <see cref="T:System.Exception" /> that was raised by the workflow.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnloadedException">
      <summary>The exception that is thrown when an operation is invoked on an unloaded workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnlockedException">
      <summary>The exception that is thrown when an operation is invoked on an unlocked workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.Activities.CompensableActivity">
      <summary>An activity that supports compensation of its child activities.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensableActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> executes.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Compensation">
      <summary>Gets or sets the activity that is scheduled when compensation is performed on the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when compensation is performed on the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.CompensationHandle">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Confirmation">
      <summary>Gets or sets the activity that is scheduled when confirmation is performed for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when confirmation is performed for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensableActivity.System#WorkflowModel#IActivityExtensionProvider#EnsureExtensions(System.WorkflowModel.IExtensionCollection)">
      <summary>Called by the workflow runtime to ensure that the extensions collection has a <see cref="T:System.WorkflowModel.Activities.CompensationExtension" /> instance registered.</summary>
      <param name="extensions">An IExtensionCollection of extensions.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Compensate">
      <summary>An activity used to explicitly invoke the compensation handler of a <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Compensate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Compensate" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Compensate.ShouldSerializeTarget">
      <summary>Indicates whether the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this Compensate activity should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Compensate.Target" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Compensate.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Compensate" /> activity.</summary>
      <returns>
A <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Compensate" />.
</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.CompensationContext"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationContext.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.CompensationContext.CompensationId"></member>
    <member name="F:System.WorkflowModel.Activities.CompensationContext.MessagePropertyName"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationException"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.String,System.Exception)"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationExtension"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.#ctor(System.Boolean)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Canceled(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Canceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CancelParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CancelParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CompensateParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CompensateParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Completed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Completed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Confirmed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Confirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ConfirmParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ConfirmParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.EndOnDelete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.EndOnSave(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Fail(System.WorkflowModel.Activities.CompensationContext,System.Exception)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Fail(System.WorkflowModel.Activities.CompensationContext,System.Exception,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="P:System.WorkflowModel.Activities.CompensationExtension.Instance"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginCancel(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginConfirm(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginCreateCompensationContext(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCanceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCannotComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCompensated(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantConfirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantFail(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginRegisterParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnCancel(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnConfirm(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnCreateCompensationContext(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndCancel(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndComplete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndConfirm(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndCreateCompensationContext(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCanceled(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCannotComplete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCompensated(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCompleted(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantConfirmed(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantFail(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndRegisterParticipant(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnGetSaveData(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnLoadData(System.Object,System.WorkflowModel.IExtensionCollection)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCanceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCannotComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCompensated(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantConfirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantFail(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.Exception)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnRegisterParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantFailed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantFailed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantNotCompleted(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantNotCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationHandle"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationScope">
      <summary>Provides a scoping construct and acts as an execution and compensation lifetime boundary for all nested <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> instances.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensationScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> executes.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.CompensationContext">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensationScope.ShouldSerializeCompensationContext">
      <summary>Indicates whether the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.CompensationScope.CompensationContext" /> property value should be serialized; otherwise false.
</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> activity.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Confirm">
      <summary>An activity used to explicitly invoke the confirmation handler of a <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Confirm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Confirm" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Confirm.ShouldSerializeTarget">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Activities.Confirm.Target" /> property should be persisted.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Confirm.Target" /> property should be persisted; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Confirm.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Confirm" /> activity.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Confirm" /> activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.CreateSubInstance"></member>
    <member name="M:System.WorkflowModel.Activities.CreateSubInstance.#ctor"></member>
    <member name="T:System.WorkflowModel.Activities.DeleteSubInstance"></member>
    <member name="M:System.WorkflowModel.Activities.DeleteSubInstance.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.DeleteSubInstance.SubInstance"></member>
    <member name="T:System.WorkflowModel.Activities.HandleScope`1">
      <typeparam name="THandle"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.HandleScope`1.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.HandleScope`1.Body"></member>
    <member name="P:System.WorkflowModel.Activities.HandleScope`1.Handle"></member>
    <member name="T:System.WorkflowModel.Activities.NameScopeElement"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.FindName(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.RegisterName(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.Activities.Persist">
      <summary>Requests that a workflow persist to a durable medium and unload from memory.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Persist.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Persist" /> class.</summary>
    </member>
    <member name="T:System.WorkflowModel.Activities.SuppressCompensation">
      <summary>An activity used to suppress the ambient <see cref="T:System.WorkflowModel.Activities.CompensationContext" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.SuppressCompensation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.SuppressCompensation.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> executes.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Alternative">
      <summary>Represents a branch in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> object.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Alternative.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.</summary>
      <returns>
The <see cref="T:System.WorkflowModel.ValueExpression`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.FromBooleanValueExpression(System.WorkflowModel.ValueExpression{System.Boolean})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class that is created using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>Returns a new <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> object that is initialized from the <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
      <param name="expression">A <see cref="T:System.Boolean" /><see cref="T:System.WorkflowModel.ValueExpression`1" /> used to initialize the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />. </param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Alternative.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.op_Implicit(System.WorkflowModel.ValueExpression{System.Boolean})~System.WorkflowModel.Activities.Rules.Alternative">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class that is created using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>Returns a new <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> object that is initialized from the <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
      <param name="expression">A <see cref="T:System.Boolean" /><see cref="T:System.WorkflowModel.ValueExpression`1" /> used to initialize the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />. </param>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.ConditionInfo">
      <summary>Contains a <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> and an <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> that comprises a condition in a <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConditionInfo.#ctor(System.WorkflowModel.Activities.Rules.Partition,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> class.</summary>
      <param name="Partition">The <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</param>
      <param name="AlternativeNumber">The index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.Alternative">
      <summary>Gets the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.AlternativeNumber">
      <summary>Gets the index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</summary>
      <returns>The index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.Partition">
      <summary>Gets the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition. </returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.ConflictInfo">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> and <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects that contain the conditions that result in multiple <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> being selected.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConflictInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConflictInfo.Conditions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe the conflicts in the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> of a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe the conflicts in the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> of a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConflictInfo.Decisions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects involved in the conflict.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects involved in the conflict.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConflictInfo.ToString">
      <summary>Gets a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Decision">
      <summary>Represents a possible outcome in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Decision.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Decision.Action">
      <summary>Gets or sets the activity that is scheduled if this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> is selected by the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The activity that is scheduled if this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> is selected by the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Decision.Conditions">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.DecisionTable">
      <summary>Represents the complete set of mutually exclusive conditional expressions in a defined area.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.Conflicts">
      <summary>Analyzes the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> at design-time and returns a collection that indicates which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" />, if any, cause more than one <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> objects that indicate which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" />, if any, cause more than one <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Default">
      <summary>Gets or sets the default action for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The default action for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.Gaps">
      <summary>Analyzes the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> at design-time and returns a collection that indicates which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> if any, cause no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Partitions">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.GapInfo">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.GapInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.GapInfo.Conditions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.GapInfo.ToString">
      <summary>Gets a string that represents the current <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.IterationContext">
      <summary>The abstract base class from which the rule collection support class <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" /> derives.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext.Open">
      <summary>When invoked by a derived class, marks the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> as open.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext.ThrowIfOpen">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> has previously invoked the <see cref="M:System.WorkflowModel.Activities.Rules.IterationContext.Open" /> method.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.IterationContext`1">
      <summary>Generic class which provides support for processing collections in <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" /> and <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext`1.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Partition">
      <summary>The abstract base class from which the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> support class <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" /> derives.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.Open"></member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.ProvideAlternatives(System.Collections.Generic.IList{System.WorkflowModel.Activities.Rules.Alternative})"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.Subject"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.SubjectCore"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.SubjectName"></member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.ThrowIfOpen"></member>
    <member name="T:System.WorkflowModel.Activities.Rules.Partition`1">
      <summary>Represents one possible outcome in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Alternatives">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Count">
      <summary>Gets the number of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects contained by this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The number of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects contained by this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Item(System.Int32)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Subject">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Type">
      <summary>Gets the data type for the generic parameter for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The data type for the generic parameter for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Rule">
      <summary>Defines a condition with an associated set of actions to perform.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Condition">
      <summary>Gets or sets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> to evaluate. </summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> to evaluate.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Contexts">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> objects that is used when the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> evaluates members of a collection.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> objects.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Description">
      <summary>Gets or sets a description of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</summary>
      <returns>A description of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Else">
      <summary>Gets or sets the activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</summary>
      <returns>The activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.FindName(System.String)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Priority">
      <summary>Gets or sets a value that indicates the order in which a <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> should be run.
</summary>
      <returns>A value that indicates the order in which a <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> should be run.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.RegisterName(System.String,System.Object)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Then">
      <summary>Gets or sets the activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to true.</summary>
      <returns>The activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.Activities.Rules.RuleSet">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects with the semantics for forward-chaining execution of those rules.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.RuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.RuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</summary>
      <returns>A list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.RuleSet.Variables">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects that are ordered by <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Priority" /> and executed once in a sequential manner. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.SequentialRuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.SequentialRuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <returns>A list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.SequentialRuleSet.Variables">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.IDebuggableWorkflowTree">
      <summary>Exposes a method to be called when verifying a workflow object with the Workflow debugger.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>Returns the root of the workflow tree.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.WorkflowElement" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.LocalsItemDescription">
      <summary>Represents the name and type of an early bound item that displays in the workflow debugger Locals window.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.LocalsItemDescription" /> class with the name and type of the local item defined.</summary>
      <param name="name">The name of the specified early bound local item.</param>
      <param name="type">The type of the specified early bound local item.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.LocalsItemDescription.Name">
      <summary>Returns the name of a local item accessed while debugging a workflow.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.LocalsItemDescription.ToString">
      <summary>Returns a string that represents the name and type of an early bound local item that displays in the workflow debugger Locals window.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.LocalsItemDescription.Type">
      <summary>Returns the type of a local item accessed while debugging a workflow.</summary>
      <returns>
        <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.SourceLocation">
      <summary>Identifies a specific location in a target source code file.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> class that specifies a source code file name and the number of a line in that file.</summary>
      <param name="fileName">A source code file.</param>
      <param name="line">The number of a line in the source code file.</param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> class that specifies a source code file name and parameters for a range of data within that file.</summary>
      <param name="fileName">The name of a source code file.</param>
      <param name="startLine">A number that designates the line in the source code file where reading begins.</param>
      <param name="startColumn">A number that designates the column in the source code file where reading begins.</param>
      <param name="endLine">A number that designates the line in the source code file where reading ends.</param>
      <param name="endColumn">A number that designates the column in the source code file where reading ends.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the source code file line and column settings referenced by the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object are an exact match for the line and column settings in another, specified <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
      <param name="obj">A specified <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.FileName">
      <summary>Gets the name of the target source code file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.GetHashCode">
      <summary>Returns a unique value to represent the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>Gets a value that indicates whether the line and column settings define a single, complete line, and not multiple lines, in the source code file.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.SourceLocationProvider">
      <summary>Provides SourceLocation information for activities in a given root activity.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocationProvider.#ctor">
      <summary>Creates new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocationProvider" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocationProvider.CollectMapping(System.WorkflowModel.WorkflowElement,System.WorkflowModel.WorkflowElement,System.Collections.Generic.Dictionary{System.Object,System.WorkflowModel.Debugger.SourceLocation},System.String)">
      <summary>Publish activity to a file and return the SourceLocation mapping of activities and expressions.</summary>
      <param name="rootActivity1"></param>
      <param name="rootActivity2"></param>
      <param name="mapping"></param>
      <param name="path"></param>
    </member>
    <member name="T:System.WorkflowModel.Debugger.State">
      <summary>Represents any source code location that can serve as a breakpoint or be stepped to by the interpreter.</summary>
    </member>
    <member name="T:System.WorkflowModel.Debugger.StateManager">
      <summary>Manager for supporting debugging with a state machine.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.StateManager.Dispose">
      <summary>Exits each thread in the logical thread list and then clears the list.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.StateManager.Exit(System.Int32)">
      <summary>Exits the specified thread and sets its location in the logical thread list to null.</summary>
      <param name="threadIndex">Number representing an index into a list of logical threads.</param>
    </member>
    <member name="T:System.WorkflowModel.Debugger.ThreadWorkerController">
      <summary>
  Define an auxiliary thread codegen technique for islands.
 This executes the islands on a dedicated worker thread.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.ThreadWorkerController" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Break"></member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.CreateIsland(System.Reflection.Emit.TypeBuilder,System.WorkflowModel.Debugger.State)">
      <returns>Returns <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
      <param name="typeBuilder"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.EnterState(System.WorkflowModel.Debugger.VirtualStackFrame)">
      <param name="newFrame"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Exit"></member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Initialize(System.WorkflowModel.Debugger.StateManager)">
      <param name="manager"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.IslandWorker(System.WorkflowModel.Debugger.ThreadWorkerController)">
      <param name="controller"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.LeaveState"></member>
    <member name="T:System.WorkflowModel.Debugger.VirtualStackFrame">
      <summary>Represents a virtual callstack frame for the interpreter.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.#ctor(System.WorkflowModel.Debugger.State)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.VirtualStackFrame" /> class with state specified.</summary>
      <param name="state">The source code location that a breakpoint is set on or could be stepped to. </param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.#ctor(System.WorkflowModel.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.VirtualStackFrame" /> class with state and local variables specified.</summary>
      <param name="state">The source code location that a breakpoint is set on or could be stepped to.</param>
      <param name="locals">Early and late bound local variables.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.VirtualStackFrame.Locals">
      <summary>Gets both early and late bound local variables.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.VirtualStackFrame.State">
      <summary>Gets the current source location that a breakpoint is set on or that could be stepped to.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Debugger.State" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.ToString">
      <summary>A string version of the state information.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.XamlDebuggerXmlReader"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.#ctor(System.Runtime.Xaml.XamlReader)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Current"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.EndColumnName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.EndLineName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.FileNameName"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Read"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Settings"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.StartColumnName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.StartLineName"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.UnderlyingReader"></member>
    <member name="T:System.WorkflowModel.ExpressionParser.SourceExpressionException">
      <summary>Stores data that is required to serialize or deserialize data source expression errors that occur during a workflow runtime.</summary>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with expression field names and values and a context that describes which of those fields and values to include in the serialization.</summary>
      <param name="info">A series of expressions field names and values.</param>
      <param name="context">Information that indicates which field name and value pair in a stream to ignore and which to serialize.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with a specified error message.</summary>
      <param name="message">The string that describes the error.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with a specified error message and a collection of compiler errors.</summary>
      <param name="message">The string that describes an error.</param>
      <param name="errors">A collection of compiler errors.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class with a specified error message and a reference to an inner exception.</summary>
      <param name="message">Text The string that describes an exception.</param>
      <param name="innerException">An exception that catches a pre-existing exception by invoking the code that produces the pre-existing exception.</param>
    </member>
    <member name="P:System.WorkflowModel.ExpressionParser.SourceExpressionException.Errors">
      <summary>Gets the collection of compiler errors.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Adds new data to a store of serialized compiler error information.</summary>
      <param name="info">A series of expression field names and values to be serialized.</param>
      <param name="context">Information that indicates whether field names and values in a stream should be ignored or serialized.</param>
    </member>
    <member name="T:System.WorkflowModel.Persistence.IPersistenceParticipant">
      <summary>Exposes methods to be called when a workflow component participates in a persistence operation.</summary>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.EndOnDelete(System.IAsyncResult)">
      <summary>Represents the end of the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Represents the end of the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>An object that is included in the persistence process.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)">
      <summary>Represents the load phase. The load phase occurs when state data is read from the persistence store.</summary>
      <param name="loadedObject">The object retrieved from the persistence store.</param>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>An object that is included in the persistence process.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.ActivityName">
      <summary>The name of the activity that generated the event record.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.States">
      <summary>The state of the activity when the record was generated.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" />
      </returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.VariableQueries">
      <summary>The collection of variable queries associated with this activity query.</summary>
      <returns>The query collection.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityScheduledQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity scheduled records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityScheduledQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>The name of the scheduled activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityScheduledRecord">
      <summary>Represents a tracking record of an activity being scheduled for execution. </summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityScheduledRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the tracked workflow instance.</param>
      <param name="recordNumber">A sequence that indicates the order in which tracking records are generated.</param>
      <param name="parentActivityId">The name of the activity that scheduled the child element.</param>
      <param name="parentActivityInstanceId">The ID of the activity that scheduled the child element.</param>
      <param name="sourceName">The name of the activity that generated the event.</param>
      <param name="childActivityId">The name of the scheduled activity.</param>
      <param name="childActivityInstanceId">The ID of the scheduled activity.</param>
      <param name="targetName">The name of the scheduled activity.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityId">
      <summary>Returns the name of the scheduled activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityInstanceId">
      <summary>Returns the ID of the scheduled activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityName">
      <summary>Returns the name of the scheduled activity.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledRecord.ToString">
      <summary>Returns a string that contains all of the details of the event.</summary>
      <returns>The event details.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityTrackingRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when an activity executes.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityTrackingRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityTrackingRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="name">The name of the activity.</param>
      <param name="activityId">The ID of the activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</param>
      <param name="activityInstanceId">The ID of the activity instance.</param>
      <param name="state">The current state of the activity when the record is generated. </param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.ActivityId">
      <summary>Returns the ID of the activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.ActivityInstanceId">
      <summary>Returns the ID of the activity instance.</summary>
      <returns>The instance ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.Name">
      <summary>Returns the name of the activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.State">
      <summary>Returns the current state of the activity when the record is generated.</summary>
      <returns>The activity state.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityTrackingRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.Variables">
      <summary>Returns the current values of the variables associated with the activity when the record is generated. </summary>
      <returns>The variable values.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.BookmarkResumptionQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to bookmark resumption records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionQuery.ExtractPayload">
      <summary>Determines whether the payload of the tracking record is to be extracted when the record is processed.</summary>
      <returns>true if the record is to be extracted.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionQuery.Name">
      <summary>Returns the name of the bookmark.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a <see cref="T:System.WorkflowModel.Bookmark" /> is resumed.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.String,System.String,System.String)"></member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>Gets the name of the <see cref="T:System.WorkflowModel.Bookmark" /> that is referenced by this <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Bookmark" /> that is referenced by this <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.Payload">
      <summary>Gets the value that was supplied when the <see cref="T:System.WorkflowModel.Bookmark" /> was resumed.</summary>
      <returns>The value that was supplied when the <see cref="T:System.WorkflowModel.Bookmark" /> was resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.SubInstanceId"></member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityId">
      <summary>Gets the ActivityId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</summary>
      <returns>The ActivityId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityInstanceId">
      <summary>Gets the ActivityInstanceId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</summary>
      <returns>The ActivityInstanceId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityName"></member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionRecord.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.CancelRequestedQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to cancellation request records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.CancelRequestedQuery" /> object.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>The name of the activity for which cancellation was requested.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.CancelRequestedRecord">
      <summary>Represents the data sent by the workflow runtime to tracking participants when <see cref="M:System.WorkflowModel.WorkflowElement.Cancel" /> is called.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.CancelRequestedRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity instance that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order of generated tracking events.</param>
      <param name="parentActivityId">The ID of the cancelled activity’s parent <see cref="P:System.WorkflowModel.ActivityInstance.Activity" />.</param>
      <param name="parentActivityInstanceId">The ID of the cancelled activity’s parent activity.</param>
      <param name="parentActivityName">The name of the cancelled activity’s parent activity.</param>
      <param name="childActivityId">The ID of the <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> of the activity to be cancelled.</param>
      <param name="childActivityInstanceId">The ID of the activity to be cancelled.</param>
      <param name="childActivityName">The name of the activity to be cancelled.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityId">
      <summary>The ID of the <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> of the activity to be cancelled.</summary>
      <returns>The ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityInstanceId">
      <summary>The ID of the activity to be cancelled. </summary>
      <returns>The ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityName">
      <summary>The name of the activity to be cancelled.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedRecord.ToString">
      <summary>Returns a string that contains the data in the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.FaultPropagationQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to fault propagation records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.FaultPropagationQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationQuery.ExtractFaultData">
      <summary>Determines whether the fault data is to be extracted when the record is returned.</summary>
      <returns>true if the fault data is to be extracted, otherwise, false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>Returns the name of the fault hander activity that propagated the fault.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.FaultPropagationRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a fault is propagated.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.FaultPropagationRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="parentActivityId">The ID of the generating activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</param>
      <param name="parentActivityInstanceId">The ID of the generating activity instance.</param>
      <param name="parentActivityName">The name of the generating activity.</param>
      <param name="faultHandlerActivityId">Not implemented.</param>
      <param name="faultHandlerActivityInstanceId">Not implemented.</param>
      <param name="faultHandlerName">Not implemented.</param>
      <param name="fault">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.Fault">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityInstanceId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityName">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.SqlTrackingParticipant">
      <summary>The system-provided tracking participant that persists tracking data to a SQL database.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.SqlTrackingParticipant" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.SqlTrackingParticipant" /> class with the specified parameters.</summary>
      <param name="parameters">Name-value collection that defines parameters for the tracking participant. The following are valid parameter names.participateInProcessTransactiontrue if the tracking participant uses the current transaction.profileNameThe name of the tracking profile.connectionStringThe connection string used to access the persistence store.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginGetProfile(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Delete phase. The Delete phase occurs when data is permanently removed from the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginTrack(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <returns>The result of the operation.</returns>
      <param name="trackingRecord">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.ConnectionString">
      <summary>The connection string used to access the persistence store.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.CorrelationId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndGetProfile(System.IAsyncResult)">
      <summary>Represents the end of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndOnDelete(System.IAsyncResult)">
      <summary>Represents the end of the Delete phase. The Delete phase occurs when data is permanently removed from the persistence store.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Represents the beginning of the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>Represents the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.GetProfile(System.String,System.String,System.TimeSpan)">
      <summary>Represents the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)">
      <summary>Not implemented.</summary>
      <param name="loadedObject">Not implemented.</param>
      <param name="extensions">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.ParticipateInProcessTransaction">
      <summary>Determines whether tracking is enabled.</summary>
      <returns>true if tracking is enabled.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.Track(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>Represents the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingParticipant">
      <summary>The base class for workflow extensions that interact with the workflow tracking infrastructure.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.BeginGetProfile(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, defines the beginning of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters retrieved tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.BeginTrack(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, defines the beginning of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <returns>The result of the operation.</returns>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback"></param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.EndGetProfile(System.IAsyncResult)">
      <summary>When implemented in a derived class, defines the end of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The retrieved tracking profile.</returns>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>When implemented in a derived class, defines the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.GetProfile(System.String,System.String,System.TimeSpan)">
      <summary>When implemented in a derived class, defines the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The retrieved tracking profile.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingParticipant.ProfileName">
      <summary>When implemented in a derived class, defines the name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.Track(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>When implemented in a derived class, defines the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingProfile">
      <summary>Creates a subscription to workflow tracking events in a <see cref="T:System.WorkflowModel.Tracking.TrackingParticipant" />. The queries added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection define the kinds of events that are returned by the subscription.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingProfile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.Name">
      <summary>Shows the display name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.Queries">
      <summary>The collection of <see cref="T:System.WorkflowModel.Tracking.TrackingQuery" /> objects that define the events to which this tracking profile subscribes.</summary>
      <returns>The collection of queries.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.ScopeTarget">
      <summary>The target of the query scope, used by <see cref="T:System.WorkflowModel.Tracking.TrackingProfileManager" /> to manage queries.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.ScopeType">
      <returns>The type of the query scope, used by <see cref="T:System.WorkflowModel.Tracking.TrackingProfileManager" /> to manage queries.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingQuery">
      <summary>The base class for all tracking queries. Tracking queries are used to create a subscription definition for a <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingQuery.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingQuery.EnvironmentQueries">
      <summary>When implemented in a derived class, defines a collection of the names of environment variables, (such as MachineName), to be included in the results of the query.</summary>
      <returns>The collection of variable names.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingQuery.QueryAnnotations">
      <summary>A collection of name-value pairs created by the user that tag all events returned by this query.</summary>
      <returns>The collection of annotations.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingRecord">
      <summary>The abstract class from which all workflow tracking records derive. Tracking records represent the data sent to tracking participants when tracked events occur.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID.</summary>
      <param name="instanceId">The ID of the generating workflow element.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID and record number.</summary>
      <param name="instanceId">The ID of the generating workflow element.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.Annotations">
      <summary>When implemented in a derived class, represents a collection of name/value pairs that are added to this tracking record.</summary>
      <returns>The dictionary of elements to be added to this tracking record.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.EndToEndActivityId">
      <summary>When implemented in a derived class, represents the activity ID of the generating activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.EventTime">
      <summary>When implemented in a derived class, represents the time the tracked event occurred.</summary>
      <returns>The event time.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.InstanceId">
      <summary>When implemented in a derived class, represents the ID of the generating workflow element.</summary>
      <returns>The element ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.Level">
      <summary>The <see cref="T:System.Diagnostics.TraceLevel" /> of the event.</summary>
      <returns>The trace level.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.RecordNumber">
      <summary>A sequence that defines the order in which tracking events are generated. </summary>
      <returns>The sequence order.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.ToString">
      <summary>When implemented in a derived class, returns a string that contains all tracking data from the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.VariableQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to variable records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.VariableQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.VariableQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.IsRequired">
      <summary>Returns false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.Name">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.VariableName">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance aborted records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery.IncludeReasonAborted">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance is aborted.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String)">
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence defining the order in which tracking events are generated.</param>
      <param name="reason">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.ReasonAborted">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>Returns a string containing the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceQuery.States">
      <summary>The states of the tracked workflow instance when the tracking records were created.</summary>
      <returns>The workflow states.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="state">The current state of the workflow when the record is generated. </param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceRecord.State">
      <summary>The current state of the workflow when the record is generated. </summary>
      <returns>The workflow state.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance unhandled exception records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery.IncludeException">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance encounters an unhandled exception.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The ID of the workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="exception"></param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.ProfileElement">
      <summary>Maintains the collection of <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> elements associated with a workflow runtime. </summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>Deserializes a configuration file to find <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> elements to add to the collection of tracking profiles.</summary>
      <param name="reader">The http://go.microsoft.com/fwlink/?LinkID=139189&amp;clcid=0x409 object that parses the configuration file element.</param>
      <param name="serializeCollectionKey">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElement.Name">
      <summary>Gets or sets the name portion of a profile element attribute.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>Copies each <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> in the specified parent element to the collection of tracking profiles.</summary>
      <param name="parentElement">The node in the configuration file whose scope encompasses tracking profiles.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElement.TrackingProfiles">
      <summary>Gets the collection of tracking profiles associated with a workflow runtime.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection">
      <summary>Maintains a collection of <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" /> objects.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Add(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Adds a profile element to a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="element">The profile element to add.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Clear">
      <summary>Removes all profile elements from a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.IndexOf(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Returns the index of the specified profile element in a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <returns>The index of the specified profile element.</returns>
      <param name="element">The profile element whose index location is returned.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Item(System.Int32)">
      <summary>Get or set the profile element at the specified location in the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" /></summary>
      <returns>
        <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" />.</returns>
      <param name="index">The index location of an element in a profile element collection.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Remove(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Removes a specified profile element from a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="element">The profile element to remove from the collection.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the profile element at the specified index location in a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="index">The index location of the profile element to remove from the collection.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection">
      <summary>Represents a section of a configuration file that contains tracking profile elements.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection.Profiles">
      <summary>Gets a collection of tracking profile elements.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.AddViolation">
      <summary>Carries out the functionality of gathering constraint violations and putting them in a list.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AddViolation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.AddViolation" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AddViolation.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Adds a workflow constraint violation to a list of constraint violations.</summary>
      <param name="context"></param>
    </member>
    <member name="P:System.WorkflowModel.Validation.AddViolation.IsWarning">
      <summary>Gets or sets the property setting that indicates whether the violation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.AddViolation.Message">
      <summary>Gets or sets the string that represents the message that describes the workflow validation constraint violation.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.AssertValidation">
      <summary>Manages the results of assert validation.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AssertValidation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.AssertValidation" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.Assertion">
      <summary>Gets or sets a value that indicates whether the assert validation resolved to true or false.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.AssertValidation.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Adds an assert violation to a list of run-time constraint violations.</summary>
      <param name="context">The activity execution context that contains the properties of the assert to be validated.</param>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.IsWarning">
      <summary>Gets or sets the value that indicates whether the result of the assert validation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.Message">
      <summary>Gets or sets the text string that states the results of the assert validation.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.Constraint">
      <summary>Manages constraint violations in a workflow run-time environment.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.AddViolation(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Validation.ConstraintViolation)">
      <summary>Adds a constraint violation to a list of run-time constraint violations attached to the execution context.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
      <param name="violation">The error message that describes a constraint violation that occurs during workflow runtime.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Invokes the process that validates a workflow element.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.OnExecute(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Carries out specified validation of a workflow element.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
      <param name="objectToValidate">A workflow element.</param>
    </member>
    <member name="F:System.WorkflowModel.Validation.Constraint.ViolationListPropertyName">
      <summary>The name for a list of workflow run-time constraint violations.</summary>
    </member>
    <member name="T:System.WorkflowModel.Validation.Constraint`1">
      <summary>Handles the validation of a generic element whose content is based on the type.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.Constraint`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.Constraint`1.Body">
      <summary>The contents of a generic element to be validated.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ConstraintViolation">
      <summary>Represents one constraint violation stored in a message string.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.ConstraintViolation.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ConstraintViolation" /> class with a message string that describes a specific constraint violation.</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.WorkflowModel.Validation.ConstraintViolation.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ConstraintViolation" /> class with a message string that describes a constraint violation and a value that indicates whether the constraint violation is a warning or an error.</summary>
      <param name="message"></param>
      <param name="isWarning"></param>
    </member>
    <member name="P:System.WorkflowModel.Validation.ConstraintViolation.IsWarning">
      <summary>Gets the value that indicates whether the constraint violation message is a warning or an error.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ConstraintViolation.Message">
      <summary>Gets the message string that contains the constraint violation.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ValidationResults">
      <summary>Processes run-time validation results into lists of errors and warnings that represent the degree of operational compliance with run-time constraints.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidationResults.AllViolations">
      <summary>Returns an empty or filled list of error and warning violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidationResults.GetErrors">
      <summary>Returns an empty or filled list of error violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidationResults.GetWarnings">
      <summary>Returns an empty or filled list of warning violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ValidatorSettings">
      <summary>Represents settings used to control a workflow run-time validation process.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidatorSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ValidatorSettings" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.AdditionalConstraints">
      <summary>Gets a collection of settings for policy constraints that control a workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.SingleLevel">
      <summary>Indicates whether a configuration file element has child elements.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.SuppressBuildConstraints">
      <summary>Indicates whether build constraints should be ignored during a run-time validation process.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.WorkflowValidator">
      <summary>Verifies that a workflow element complies with run-time constraints.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.WorkflowValidator.Validate(System.WorkflowModel.WorkflowElement)">
      <summary>Verifies that a workflow element operates correctly under the default run-time constraints.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Validation.ValidationResults" />.</returns>
      <param name="toValidate">The workflow element that is tested for compliance with run-time constraints.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.WorkflowValidator.Validate(System.WorkflowModel.WorkflowElement,System.WorkflowModel.Validation.ValidatorSettings)">
      <summary>Verifies that a workflow element operates correctly under the specified constraints.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Validation.ValidationResults" />.</returns>
      <param name="toValidate">The workflow element that is tested for compliance with run-time constraints.</param>
      <param name="settings">Properties that enable control of the functionality of the validation process.</param>
    </member>
  </members>
</doc>