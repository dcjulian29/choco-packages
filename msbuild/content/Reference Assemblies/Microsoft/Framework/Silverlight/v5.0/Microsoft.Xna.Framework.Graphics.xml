<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Xna.Framework.Graphics</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
      <summary>Defines color blending factors.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.One">
      <summary>Each component of the color is multiplied by (1, 1, 1, 1)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.Zero">
      <summary>Each component of the color is multiplied by (0, 0, 0, 0)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceColor">
      <summary>Each component of the color is multiplied by the source color. This can be represented as (Rs, Gs, Bs, As), where R, G, B, and A respectively stand for the red, green, blue, and alpha source values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceColor">
      <summary>Each component of the color is multiplied by the inverse of the source color. This can be represented as (1 − Rs, 1 − Gs, 1 − Bs, 1 − As) where R, G, B, and A respectively stand for the red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha">
      <summary>Each component of the color is multiplied by the alpha value of the source. This can be represented as (As, As, As, As), where As is the alpha source value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceAlpha">
      <summary>Each component of the color is multiplied by the inverse of the alpha value of the source. This can be represented as (1 − As, 1 − As, 1 − As, 1 − As), where As is the alpha destination value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationColor">
      <summary>Each component color is multiplied by the destination color. This can be represented as (Rd, Gd, Bd, Ad), where R, G, B, and A respectively stand for red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor">
      <summary>Each component of the color is multiplied by the inverse of the destination color. This can be represented as (1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad), where Rd, Gd, Bd, and Ad respectively stand for the red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationAlpha">
      <summary>Each component of the color is multiplied by the alpha value of the destination. This can be represented as (Ad, Ad, Ad, Ad), where Ad is the destination alpha value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationAlpha">
      <summary>Each component of the color is multiplied by the inverse of the alpha value of the destination. This can be represented as (1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad), where Ad is the alpha destination value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor">
      <summary>Each component of the color is multiplied by a constant set in <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseBlendFactor">
      <summary>Each component of the color is multiplied by the inverse of a constant set in <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlphaSaturation">
      <summary>Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. This can be represented as (f, f, f, 1), where f = min(A, 1 − Ad).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
      <summary>Defines how to combine a source color with the destination color already on the render target for color blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add">
      <summary>The result is the destination added to the source. Result = (Source Color * Source Blend) + (Destination Color * Destination Blend)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Subtract">
      <summary>The result is the destination subtracted from the source. Result = (Source Color * Source Blend) − (Destination Color * Destination Blend)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract">
      <summary>The result is the source subtracted from the destination. Result = (Destination Color * Destination Blend) − (Source Color * Source Blend)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Min">
      <summary>The result is the minimum of the source and destination. Result = min( (Source Color * Source Blend), (Destination Color * Destination Blend) )</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Max">
      <summary>The result is the maximum of the source and destination. Result = max( (Source Color * Source Blend), (Destination Color * Destination Blend) )</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendState">
      <summary>Contains blend state for the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BlendState.#ctor">
      <summary>Creates an instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" /> class with default values, using additive color and alpha blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.Additive">
      <summary>A built-in state object with settings for additive blend, which is adding the destination data to the source data without using alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend">
      <summary>A built-in state object with settings for alpha blend, that is blending the source and destination data using alpha.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlendFunction">
      <summary>Gets or sets the arithmetic operation when blending alpha values. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.BlendFunction" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaDestinationBlend">
      <summary>Gets or sets the blend factor for the destination alpha, which is the percentage of the destination alpha included in the blended result. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.Blend" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaSourceBlend">
      <summary>Gets or sets the source alpha blend factor. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.Blend" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.BlendFactor">
      <summary>Gets or sets the four-component (RGBA) blend factor for alpha blending.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Color" /> representing the four-component (RGBA) blend factor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorBlendFunction">
      <summary>Gets or sets the arithmetic operation when blending color values. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add" /></summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.BlendFunction" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorDestinationBlend">
      <summary>Gets or sets the blend factor for the destination color. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.Blend" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorSourceBlend">
      <summary>Gets or sets the blend factor for the source color. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.Blend.One" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.Blend" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorWriteChannels">
      <summary>Gets or sets which color channels (RGBA) are enabled for writing during color blending. The default value is <see cref="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.None" />.</summary>
      <returns>A value from the <see cref="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.MultiSampleMask">
      <summary>Gets or sets a bitmask which defines which samples can be written during multisampling. The default is 0xffffffff.</summary>
      <returns>A bitmask which defines multisample write locations.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.NonPremultiplied">
      <summary>A built-in state object with settings for blending with non-premultipled alpha, that is blending source and destination data using alpha while assuming the color data contains no alpha information.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.Opaque">
      <summary>A built-in state object with settings for opaque blend, that is overwriting the source with the destination data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BufferUsage">
      <summary>Specifies special usage of the buffer contents.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.None">
      <summary>Indicates that the vertex buffer is not used.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly">
      <summary>Indicates that the application only writes to the vertex buffer. If specified, the driver chooses the best memory location for efficient writing and rendering. Attempts to read from a write-only vertex buffer fail.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
      <summary>Specifies the buffer to use when calling <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Color,System.Single,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Target">
      <summary>A render target.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer">
      <summary>A depth buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil">
      <summary>A stencil buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels">
      <summary>Defines the color channels that can be chosen for a per-channel write to a render target color buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.None">
      <summary>No channel selected.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Red">
      <summary>Red channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Green">
      <summary>Green channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Blue">
      <summary>Blue channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Alpha">
      <summary>Alpha channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.All">
      <summary>All buffer channels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
      <summary>Defines comparison functions that can be chosen for alpha, stencil, or depth-buffer tests.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always">
      <summary>Always pass the test.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Never">
      <summary>Always fail the test.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Less">
      <summary>Accept the new pixel if its value is less than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.LessEqual">
      <summary>Accept the new pixel if its value is less than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Equal">
      <summary>Accept the new pixel if its value is equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.GreaterEqual">
      <summary>Accept the new pixel if its value is greater than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Greater">
      <summary>Accept the new pixel if its value is greater than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.NotEqual">
      <summary>Accept the new pixel if its value does not equal the value of the current pixel.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
      <summary>Defines the faces of a cube map in the <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" /> class type.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX">
      <summary>Positive x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX">
      <summary>Negative x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveY">
      <summary>Positive y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeY">
      <summary>Negative y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveZ">
      <summary>Positive z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeZ">
      <summary>Negative z-face of the cube map.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
      <summary>Defines winding orders that may be used to identify back faces for culling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.None">
      <summary>Do not cull back faces.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullClockwiseFace">
      <summary>Cull back faces with clockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullCounterClockwiseFace">
      <summary>Cull back faces with counterclockwise vertices.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
      <summary>Defines the format of data in a depth-stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.None">
      <summary>Do not create a depth buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth16">
      <summary>A buffer that contains 16-bits of depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24">
      <summary>A buffer that contains 24-bits of depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8">
      <summary>A 32 bit buffer that contains 24 bits of depth data and 8 bits of stencil data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthStencilState">
      <summary>Contains depth-stencil state for the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilState.#ctor">
      <summary>Creates an instance of <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DepthStencilState" /> with default values.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-buffer test fails for a counterclockwise triangle. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" /> value indicating the stencil operation to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails for a counterclockwise triangle. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" /> value indicating the stencil operation to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilFunction">
      <summary>Gets or sets the comparison function to use for counterclockwise stencil tests. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.CompareFunction" /> value indicating which test to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil and depth-tests pass for a counterclockwise triangle. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" />  value indicating the stencil operation to perform.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.Default">
      <summary>A built-in state object with default settings for using a depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferEnable">
      <summary>Gets or sets a value that indicates whether to enable depth buffering. The default is true.</summary>
      <returns>true if depth buffering is enabled; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferFunction">
      <summary>Gets or sets the comparison function for the depth-buffer test. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.CompareFunction.LessEqual" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.CompareFunction" /> value indicating the comparison function to get or set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferWriteEnable">
      <summary>Gets or sets a value that indicates whether to enable writing to the depth buffer. The default is true.</summary>
      <returns>true if writing to the depth buffer is enabled; otherwise, false.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthRead">
      <summary>A built-in state object with settings for enabling a read-only depth stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None">
      <summary>A built-in state object with settings for not using a depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.ReferenceStencil">
      <summary>Gets or sets a reference value to use for the stencil test. The default is zero.</summary>
      <returns>Integer that specifies the stencil test value to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" /> value indicating the stencil operation to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilEnable">
      <summary>Gets or sets stencil enabling. The default is false.</summary>
      <returns>true if stenciling is enabled; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" /> value indicating the stencil operation to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilFunction">
      <summary>Gets or sets the comparison function for the stencil test. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.CompareFunction" /> value indicating the comparison function to get or set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilMask">
      <summary>Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is <see cref="F:System.Int32.MaxValue" />.</summary>
      <returns>An integer indicating the mask to get or set. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep" />.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.StencilOperation" /> value indicating the stencil operation to perform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilWriteMask">
      <summary>Gets or sets the write mask applied to values written into the stencil buffer. The default mask is <see cref="F:System.Int32.MaxValue" />.</summary>
      <returns>An integer indicating the write mask to get or set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.TwoSidedStencilMode">
      <summary>Gets or sets a value that indicates whether to enable two-sided stenciling. The default is false.</summary>
      <returns>true to enable two-sided stenciling; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer">
      <summary>Describes the rendering order of the vertices in a vertex buffer. Use <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer" /> for storing indices for dynamic vertices and <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer" /> for indices of non-dynamic arrays.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer" /> class.</summary>
      <param name="graphicsDevice">The associated graphics device.</param>
      <param name="indexElementSize">Size of each index element.</param>
      <param name="indexCount">Number of indices in the buffer.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer" /> class.</summary>
      <param name="graphicsDevice">The associated graphics device.</param>
      <param name="indexType">The index type.</param>
      <param name="indexCount">The number of indices in the buffer.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic index buffer data, specifying the offset, start index, number of elements and options. </summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. </param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic index buffer data, specifying the start index, number of elements and options. </summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. </param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer">
      <summary>Represents a list of 3D vertices to be streamed to the graphics device. Use <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer" />for dynamic vertex arrays and <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer" /> for non-dynamic vertex arrays.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexDeclaration">The vertex declaration, which describes per-vertex data.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the <paramref name="createOptions" /> parameter in the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> constructor. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates a new instance of this object. </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexType">The data type.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the <paramref name="createOptions" /> parameter in the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> constructor. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic vertex buffer data, specifying the offset, start index, number of elements and vertex stride. </summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="vertexStride">The size, in bytes, of the elements in the vertex buffer. </param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. </param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic vertex buffer data, specifying the start index, number of elements and options. </summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. </param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
      <summary>Describes options for filling the vertices and lines that define a primitive.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.Solid">
      <summary>Draw solid faces for each primitive.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.WireFrame">
      <summary>Draw lines connecting the vertices that define a primitive face.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter">
      <summary>Provides methods to retrieve and manipulate graphics adapters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.QueryRenderTargetFormat(Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Int32@)">
      <summary>Queries the adapter for support for the requested render target format.</summary>
      <returns>true if the adapter supports the requested format; false otherwise.</returns>
      <param name="graphicsProfile">The graphics profile.</param>
      <param name="format">The requested surface data format.</param>
      <param name="depthFormat">The requested depth buffer format.</param>
      <param name="multiSampleCount">The requested number of multisampling locations.</param>
      <param name="selectedFormat">The best format the adapter supports for the requested surface data format.</param>
      <param name="selectedDepthFormat">The best format the adapter supports for the requested depth data format.</param>
      <param name="selectedMultiSampleCount">The best format the adapter supports for the requested number of multisampling locations.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, and creates shaders.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Adapter">
      <summary>Gets the graphics adapter.</summary>
      <returns>The graphics adapter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor">
      <summary>Gets or sets the color used for a constant-blend factor during alpha blending. The default value is <see cref="P:Microsoft.Xna.Framework.Color.White" />.</summary>
      <returns>The color used for a constant-blend factor during alpha blending.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendState">
      <summary>Gets or sets a system-defined instance of a blend state object initialized for alpha blending. The default value is <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.Opaque" />.</summary>
      <returns>The blend state.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color)">
      <summary>Clears resource buffers. </summary>
      <param name="color">Set this color value in all buffers.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Color,System.Single,System.Int32)">
      <summary>Clears resource buffers.</summary>
      <param name="options">Options for clearing a buffer.</param>
      <param name="color">Set this color value in the buffer.</param>
      <param name="depth">Set this depth value in the buffer.</param>
      <param name="stencil">Set this stencil value in the buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DepthStencilState">
      <summary>Gets or sets a system-defined instance of a depth-stencil state object. The default value is <see cref="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.Default" />.</summary>
      <returns>The depth-stencil state.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="baseVertex">Offset to add to each vertex index in the index buffer.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call. The <paramref name="minVertexIndex" /> parameter and all of the indices in the index stream are relative to the <paramref name="baseVertex" /> parameter.</param>
      <param name="numVertices">Number of vertices used during the call. The first vertex is located at index: <paramref name="baseVertex" /> + <paramref name="minVertexIndex" />.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">Number of primitives to render. The number of vertices used is a function of <paramref name="primitiveCount" /> and <paramref name="primitiveType" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="startVertex">Index of the first vertex to load. Beginning at <paramref name="startVertex" />, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">Number of primitives to render. The <paramref name="primitiveCount" /> is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTargets">
      <summary>Gets a render target surface. </summary>
      <returns>An array of bound render targets. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An invalid render target index was requested.  </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexBuffers">
      <summary>Gets the vertex buffers.</summary>
      <returns>An array of vertex buffers.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Indices">
      <summary>Gets or sets index data. The default value is null.</summary>
      <returns>Index data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.MultiSampleMask">
      <summary>Gets or sets a bitmask controlling modification of the samples in a multisample render target. The default value is -1 (0xffffffff).</summary>
      <returns>A bitmask value controlling write enables for the samples. Each bit in this mask, starting at the least-significant bit, controls modification of one of the samples in a multisample render target. This render state has no effect when rendering to a single sample buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PresentationParameters">
      <summary>Gets the presentation parameters associated with this graphics device. </summary>
      <returns>The presentation parameters associated with this graphics device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RasterizerState">
      <summary>Gets or sets rasterizer state. The default value is <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise" />.</summary>
      <returns>The rasterizer state.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ReferenceStencil">
      <summary>Gets or sets a reference value for stencil testing. The default value is zero.</summary>
      <returns>The stencil reference value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SamplerStates">
      <summary>Gets a collection of <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> objects for the current <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />.</summary>
      <returns>The sample states of this <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle">
      <summary>Gets or sets the rectangle used for scissor testing. By default, the size matches the render target size. </summary>
      <returns>If scissor testing is enabled, the rendering area within the render target is defined. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Sets a new render target for this <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />. </summary>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
      <exception cref="T:System.ArgumentException">An invalid render target index was requested. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The render target index must be within the valid range for this device.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)" /> was called after this <paramref name="renderTarget" /> was disposed. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>Sets a new render target for this <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />. </summary>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device. </param>
      <param name="cubeMapFace">The cube map face type.</param>
      <exception cref="T:System.ArgumentException">An invalid render target index was requested. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The render target index must be within the valid range for this device.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)" /> was called after this <paramref name="renderTarget" /> was disposed. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])">
      <summary>Sets an array of render targets. </summary>
      <param name="renderTargets">[ParamArrayAttribute] An array of render targets.</param>
      <exception cref="T:System.NotSupportedException">The profile supports a maximum of 1 simultaneous render targets.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Sets or binds a vertex buffer to the device.</summary>
      <param name="vertexBuffer">A vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
      <summary>Sets or binds a vertex buffer to the device.</summary>
      <param name="vertexBuffer">A vertex buffer.</param>
      <param name="vertexOffset">The offset (in bytes) from the beginning of the buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])">
      <summary>Sets the vertex buffers.</summary>
      <param name="vertexBuffers">An array of vertex buffers.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Textures">
      <summary>Gets the collection of textures that have been assigned to the texture stages of the device.</summary>
      <returns>The texture collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport">
      <summary>Gets or sets a viewport identifying the portion of the render target to receive draw calls. </summary>
      <returns>The viewport to set or get. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile">
      <summary>Identifies the set of supported devices for the game based on device capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.Reach">
      <summary>Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices, including all Windows-based computers and Windows Phone.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsResource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object. </summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed. </summary>
      <returns>true if the object is disposed; false otherwise. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexBuffer">
      <summary>Describes the rendering order of the vertices in a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer" /> class.</summary>
      <param name="graphicsDevice">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> to associate with the index buffer.</param>
      <param name="indexElementSize">The size (in bits) of each index.</param>
      <param name="indexCount">The number of indices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer" /> class.</summary>
      <param name="graphicsDevice">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> object to associate with the index buffer. </param>
      <param name="indexType">The size (in bits) of each index.</param>
      <param name="indexCount">The number of indices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.BufferUsage">
      <summary>Gets the state of the related <see cref="T:Microsoft.Xna.Framework.Graphics.BufferUsage" /> enumeration. </summary>
      <returns>Indicates how the application uses buffer contents.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexCount">
      <summary>Gets the number of indices in this buffer.</summary>
      <returns>The number of indices.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexElementSize">
      <summary>Gets a value indicating the size of this index element. </summary>
      <returns>The size of this index element.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Sets index buffer data, specifying the offset, start index and number of elements.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[])">
      <summary>Sets index buffer data. </summary>
      <param name="data">Array of data.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets index buffer data, specifying the start index and number of elements. </summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
      <summary>Defines the size of an element of an index buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits">
      <summary>Sixteen bits.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IVertexType">
      <summary>Vertex type interface which is implemented by a custom vertex type structure.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
      <returns>Vertex declaration.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters">
      <summary>Contains presentation parameters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer.</summary>
      <returns>The format of the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
      <summary>Gets or sets a value indicating the height of the new swap chain's back buffer.</summary>
      <returns>The height of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
      <summary>Gets or sets a value indicating the width of the new swap chain's back buffer.</summary>
      <returns>The width of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.Bounds">
      <summary>Gets the size of this resource.</summary>
      <returns>A bounding-box rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DepthStencilFormat">
      <summary>Gets or sets the depth stencil data format.</summary>
      <returns>The data format.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleCount">
      <summary>Gets or sets a value indicating the number of sample locations during multisampling.</summary>
      <returns>The number of sample locations.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.RenderTargetUsage">
      <summary>Gets or sets render target usage flags.</summary>
      <returns>Usage flags for the render target.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
      <summary>Defines how vertex data is ordered.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleList">
      <summary>The data is ordered as a sequence of triangles; each triangle is described by three new vertices. Back-face culling is affected by the current winding-order render state..</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleStrip">
      <summary>The data is ordered as a sequence of triangles; each triangle is described by two new vertices and one vertex from the previous triangle. The back-face culling flag is flipped automatically on even-numbered triangles. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineList">
      <summary>The data is ordered as a sequence of line segments; each line segment is described by two new vertices. The count may be any positive integer</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineStrip">
      <summary>The data is ordered as a sequence of line segments; each line segment is described by one new vertex and the last vertex from the previous line segment. The count may be any positive integer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RasterizerState">
      <summary>Contains rasterizer state, which determines how to convert vector data (shapes) into raster data (pixels).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RasterizerState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState" /> class.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullClockwise">
      <summary>A built-in state object with settings for culling primitives with clockwise winding order.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise">
      <summary>A built-in state object with settings for culling primitives with counter-clockwise winding order.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.CullMode">
      <summary>Gets or sets the conditions for culling or removing triangles.</summary>
      <returns>The culling mode to set or get.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullNone">
      <summary>A built-in state object with settings for not culling any primitives.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.DepthBias">
      <summary>Gets or sets the depth bias for polygons, which is the amount of bias to apply to the depth of a primitive to alleviate depth testing problems for primitives of similar depth. The default value is 0.</summary>
      <returns>The amount of bias to apply to the depth of a primitive. The value ranges from 0 to 16 (inclusive).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.FillMode">
      <summary>Get or sets the fill mode, which defines how a triangle is filled during rendering. The default is <see cref="F:Microsoft.Xna.Framework.Graphics.FillMode.Solid" />.</summary>
      <returns>Any value in the <see cref="P:Microsoft.Xna.Framework.Graphics.RasterizerState.FillMode" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.MultiSampleAntiAlias">
      <summary>Gets or sets a value that indicates whether multisample antialiasing is enabled. The default is true.</summary>
      <returns>true to enable multisample antialiasing; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.ScissorTestEnable">
      <summary>Get or sets a value that indicates whether scissor testing is enabled. The default is false.</summary>
      <returns>true to enable scissor testing; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.SlopeScaleDepthBias">
      <summary>Gets or sets a bias value that takes into account the slope of a polygon. This bias value is applied to coplanar primitives to reduce aliasing and other rendering artifacts caused by z-fighting. The default is 0.</summary>
      <returns>The sloped scale bias value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D">
      <summary>Contains a 2D texture that can be used as a render target.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth" /> to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight" /> to get the current screen height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth" /> to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight" /> to get the current screen height.</param>
      <param name="mipMap">True to enable a full mipmap chain to be generated, false otherwise.</param>
      <param name="preferredFormat">Preferred format for the surface data. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredDepthFormat">Preferred format for the depth buffer. This is the format preferred by the application, which may or may not be available from the hardware.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth" /> to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use <see cref="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight" /> to get the current screen height.</param>
      <param name="mipMap">True to enable a full mipmap chain to be generated, false otherwise.</param>
      <param name="preferredFormat">Preferred format for the surface data. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredDepthFormat">Preferred format for the depth buffer. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredMultiSampleCount">The preferred number of multisample locations.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.DepthStencilFormat">
      <summary>Gets the data format for the depth stencil data.</summary>
      <returns>The data format of the depth data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.MultiSampleCount">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
      <returns>true if the content was lost; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.RenderTargetUsage">
      <summary>Gets or sets the render target usage.</summary>
      <returns>The usage which determines how data is used.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding">
      <summary>Binds an array of render targets.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Creates an instance of this object.</summary>
      <param name="renderTarget">Identifies a 2D render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.#ctor(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>Creates an instance of this object.</summary>
      <param name="renderTarget">Identifies a cubemap render target.</param>
      <param name="cubeMapFace">Cubemap face.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.CubeMapFace">
      <summary>Gets one face of a cubemap.</summary>
      <returns>A cubemap face.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.op_Implicit(Microsoft.Xna.Framework.Graphics.RenderTarget2D)~Microsoft.Xna.Framework.Graphics.RenderTargetBinding">
      <summary>Implicitly converts a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D" /> to a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding" /> for use in methods like <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])" />.</summary>
      <returns>A RenderTarget2D to a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding" /> for use in methods like <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])" />.</returns>
      <param name="renderTarget">The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D" /> to convert.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.RenderTarget">
      <summary>Gets a 2D texture.</summary>
      <returns>A texture.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube">
      <summary>Represents a cubic texture resource that will be written to at the end of a render pass.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="mipMap">True to generate a full mipmap chain, false otherwise.</param>
      <param name="preferredFormat">Preferred format of the surface data.</param>
      <param name="preferredDepthFormat">Preferred format of the depth data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="mipMap">True to generate a full mipmap chain, false otherwise.</param>
      <param name="preferredFormat">Preferred format of the surface data.</param>
      <param name="preferredDepthFormat">Preferred format of the depth data.</param>
      <param name="preferredMultiSampleCount">Preferred number of sample locations during multisampling.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.DepthStencilFormat">
      <summary>Gets the depth format of this rendertarget. </summary>
      <returns>The data format for the depth data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.MultiSampleCount">
      <summary>Gets the number of multisample locations.</summary>
      <returns>The number of multisample locations.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.RenderTargetUsage">
      <summary>Gets the usage mode of this rendertarget.</summary>
      <returns>The usage which determines how rendertarget data is used.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
      <summary>Determines how render target data is used once a new render target is set.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents">
      <summary>Always clears the render target data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents">
      <summary>Always keeps the render target data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerState">
      <summary>Contains sampler state, which determines how to sample texture data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SamplerState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressU">
      <summary>Gets or sets the texture-address mode for the u-coordinate.</summary>
      <returns>Texture-address mode for the u-coordinate.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressV">
      <summary>Gets or sets the texture-address mode for the v-coordinate.</summary>
      <returns>Texture-address mode for the v-coordinate.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.AnisotropicClamp">
      <summary>Contains default state for anisotropic filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.AnisotropicWrap">
      <summary>Contains default state for anisotropic filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.Filter">
      <summary>Gets or sets the type of filtering during sampling.</summary>
      <returns>The texture filter.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp">
      <summary>Contains default state for linear filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearWrap">
      <summary>Contains default state for linear filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxAnisotropy">
      <summary>Gets or sets the maximum anisotropy. The default value is 0.</summary>
      <returns>The maximum anisotropy value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxMipLevel">
      <summary>Gets or sets the level of detail (LOD) index of the largest map to use.</summary>
      <returns>The maximum LOD, which ranges from 0 to n-1, where n is the index of the largest map.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipMapLevelOfDetailBias">
      <summary>Gets or sets the mipmap LOD bias. The default value is 0.</summary>
      <returns>The mipmap LOD bias, which ranges from -1.0 to +1.0.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.PointClamp">
      <summary>Contains default state for point filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.PointWrap">
      <summary>Contains default state for point filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerStateCollection">
      <summary>Collection of <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerStateCollection.Item(System.Int32)">
      <summary>Gets a <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> object in the collection at the specified index value.</summary>
      <returns>The object at the specified index.</returns>
      <param name="index">The index of the requested <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> object.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
      <summary>Describes whether existing vertex or index buffer data will be overwritten or discarded during a SetData operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.None">
      <summary>Portions of existing data in the buffer may be overwritten during this operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.Discard">
      <summary>The SetData operation will discard the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.NoOverwrite">
      <summary>The SetData operation will not overwrite existing data in the vertex and index buffers. Specifying this option allows the driver to return immediately from a SetData operation and continue rendering.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
      <summary>Defines stencil buffer operations.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep">
      <summary>Does not update the stencil-buffer entry. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Zero">
      <summary>Sets the stencil-buffer entry to 0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Replace">
      <summary>Replaces the stencil-buffer entry with a reference value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Increment">
      <summary>Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Decrement">
      <summary>Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.IncrementSaturation">
      <summary>Increments the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.DecrementSaturation">
      <summary>Decrements the stencil-buffer entry, clamping to 0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Invert">
      <summary>Inverts the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
      <summary>Defines various types of surface formats.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color">
      <summary>(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr565">
      <summary>(Unsigned format) 16-bit BGR pixel format with 5 bits for blue, 6 bits for green, and 5 bits for red.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra5551">
      <summary>(Unsigned format) 16-bit BGRA pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra4444">
      <summary>(Unsigned format) 16-bit BGRA pixel format with 4 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2">
      <summary>(Signed format) 16-bit bump-map format using 8 bits each for u and v data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte4">
      <summary>(Signed format) 32-bit bump-map format using 8 bits for each channel.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture">
      <summary>Represents a texture resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.Format">
      <summary>Gets the format of the texture data.</summary>
      <returns>The data format.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelCount">
      <summary>Gets the number of texture levels in a multilevel texture.</summary>
      <returns>The number of texture levels in the multilevel texture.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture2D">
      <summary>Represents a 2D grid of texels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>Creates a new instance of this object. </summary>
      <param name="graphicsDevice">The device.</param>
      <param name="width">Texture width.</param>
      <param name="height">Texture height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="width">Texture width.</param>
      <param name="height">Texture height.</param>
      <param name="mipMap">true to generate a full mipmap chain; otherwise, false.</param>
      <param name="format">Texture data format.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Bounds">
      <summary>Gets the size of this resource. </summary>
      <returns>A bounding-box rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
      <returns>The height of this texture resource, in pixels.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Sets 2D texture data, specifying a mipmap level, source rectangle, start index, and number of elements.</summary>
      <param name="level">Mipmap level.</param>
      <param name="rect">A bounding box that defines the position and location (in pixels) of the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
      <summary>Sets 2D texture data. </summary>
      <param name="data">Array of data.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets 2D texture data, specifying a start index, and number of elements. </summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
      <returns>The width of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
      <summary>Defines modes for addressing texels using texture coordinates that are outside of the typical range of 0.0 to 1.0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap">
      <summary>Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Mirror">
      <summary>Similar to <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap" />, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCollection">
      <summary>Represents a collection of <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> at the specified sampler number.</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> at the specified index.</returns>
      <param name="index">The index of the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> to get or set.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCube">
      <summary>Represents a set of six 2D textures, one for each face of a cube.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" /> class.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="size">The size (in pixels) of the top-level faces of the cube texture. Subsequent levels of each face will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension is clamped to a minimum of 1 pixel.</param>
      <param name="mipMap">true to generate a full mipmap chain; otherwise, false.</param>
      <param name="format">Surface data format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Sets cube texture data, specifying a cubemap face, mipmap level, source rectangle, start index, and number of elements.</summary>
      <param name="cubeMapFace">Cubemap face.</param>
      <param name="level">Mipmap level.</param>
      <param name="rect">Region in the texture to set the data; use null to set data to the entire texture.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
      <summary>Sets cube texture data, specifying a cubemap face. </summary>
      <param name="cubeMapFace">The cubemap face.</param>
      <param name="data">Array of data.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[],System.Int32,System.Int32)">
      <summary>Sets cube texture data, specifying a cubemap face, start index, and number of elements. </summary>
      <param name="cubeMapFace">The cubemap face.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Size">
      <summary>Gets the width and height of this texture resource, in pixels.</summary>
      <returns>The size of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
      <summary>Defines filtering types during texture sampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Linear">
      <summary>Use linear filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Point">
      <summary>Use point filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Anisotropic">
      <summary>Use anisotropic filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.LinearMipPoint">
      <summary>Use linear filtering to shrink or expand, and point filtering between mipmap levels (mip).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.PointMipLinear">
      <summary>Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipLinear">
      <summary>Use linear filtering to shrink, point filtering to expand, and linear filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipPoint">
      <summary>Use linear filtering to shrink, point filtering to expand, and point filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipLinear">
      <summary>Use point filtering to shrink, linear filtering to expand, and linear filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipPoint">
      <summary>Use point filtering to shrink, linear filtering to expand, and point filtering between mipmap levels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBuffer">
      <summary>Represents a list of 3D vertices to be streamed to the graphics device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer" /> class.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexDeclaration">The vertex declaration, which describes per-vertex data.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer" /> class.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexType">The data type.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage">
      <summary>Gets the state of the related <see cref="T:Microsoft.Xna.Framework.Graphics.BufferUsage" /> enumeration.</summary>
      <returns>Indicates how the application uses buffer contents.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
      <summary>Sets vertex buffer data, specifying the offset, start index, number of elements, and the vertex stride.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <param name="vertexStride">Stride, or size, of a vertex.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])">
      <summary>Sets vertex buffer data. </summary>
      <param name="data">Array of data.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets vertex buffer data, specifying the start index and number of elements. </summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount">
      <summary>Gets the number of vertices.</summary>
      <returns>The number of vertices.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration">
      <summary>Defines per-vertex data in a buffer.</summary>
      <returns>Defines per-vertex data.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding">
      <summary>Binding structure that specifies a vertex buffer and other per-vertex parameters (such as offset and instancing) for a graphics device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding" /> class using the specified <see cref="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer" />.</summary>
      <param name="vertexBuffer">The vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding" /> class using the specified <see cref="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer" /> and vertex offset.</summary>
      <param name="vertexBuffer">The vertex buffer.</param>
      <param name="vertexOffset">Offset (in bytes) from the beginning of the buffer to the first vertex to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.op_Implicit(Microsoft.Xna.Framework.Graphics.VertexBuffer)~Microsoft.Xna.Framework.Graphics.VertexBufferBinding">
      <summary>Converts a vertex buffer to a vertex buffer binding.</summary>
      <returns>The converted vertex buffer binding.</returns>
      <param name="vertexBuffer">The vertex buffer to convert.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer">
      <summary>Gets a vertex buffer.</summary>
      <returns>A vertex buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexOffset">
      <summary>Gets the offset between the beginning of the buffer and the vertex data to use.</summary>
      <returns>The offset, in bytes.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
      <summary>A vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> class.</summary>
      <param name="elements">An array of per-vertex elements.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> class.</summary>
      <param name="vertexStride">The number of bytes per element.</param>
      <param name="elements">An array of per-vertex elements.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
      <summary>Gets the vertex shader declaration.</summary>
      <returns>The array of vertex elements that make up the vertex shader declaration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.VertexStride">
      <summary>Gets the number of bytes from one vertex to the next.</summary>
      <returns>The stride, in bytes.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> class.</summary>
      <param name="offset">Offset (if any) from the beginning of the stream to the beginning of the vertex data.</param>
      <param name="elementFormat">One of several predefined types that define the vertex data size.</param>
      <param name="elementUsage">The intended use of the vertex data.</param>
      <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
      <summary>Gets or sets the offset (if any) from the beginning of the stream to the beginning of the vertex data.</summary>
      <returns>Offset, in bytes, to the start of the vertex data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
      <returns>The usage index.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
      <summary>Gets or sets the format of this vertex element.</summary>
      <returns>The format of this vertex element.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
      <summary>Gets or sets a value describing how the vertex element is to be used.</summary>
      <returns>A value describing how the vertex element is to be used.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
      <summary>Defines vertex element formats.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Single">
      <summary>Single-component, 32-bit floating-point, expanded to (float, 0, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2">
      <summary>Two-component, 32-bit floating-point, expanded to (float, float, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3">
      <summary>Three-component, 32-bit floating point, expanded to (float, float, float, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector4">
      <summary>Four-component, 32-bit floating point, expanded to (float, float, float, float).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color">
      <summary>Four-component, packed, unsigned byte, mapped to 0 to 1 range. Input is in <see cref="F:System.TypeCode.Int32" /> format (ARGB) expanded to (R, G, B, A).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Byte4">
      <summary>Four-component, unsigned byte.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short2">
      <summary>Two-component, signed short expanded to (value, value, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short4">
      <summary>Four-component, signed short expanded to (value, value, value, value).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort2">
      <summary>Normalized, two-component, signed short, expanded to (first short/32767.0, second short/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort4">
      <summary>Normalized, four-component, signed short, expanded to (first short/32767.0, second short/32767.0, third short/32767.0, fourth short/32767.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
      <summary>Defines usage for vertex elements.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position">
      <summary>Position data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0 ) specifies the nontransformed position in fixed-function vertex processing and the N-patch tessellator. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 1) specifies the nontransformed position in the fixed-function vertex shader for skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color">
      <summary>Vertex data contains diffuse or specular color. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies the diffuse color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 1) specifies the specular color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate">
      <summary>Texture coordinate data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate" />, n) specifies texture coordinates in fixed-function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal">
      <summary>Vertex normal data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies vertex normals for fixed-function vertex processing and the N-patch tessellator. (Normal with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 1) specifies vertex normals for fixed-function vertex processing for skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Binormal">
      <summary>Vertex binormal data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Tangent">
      <summary>Vertex tangent data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendIndices">
      <summary>Blending indices data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendIndices" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies matrix indices for fixed-function vertex processing using indexed paletted skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendWeight">
      <summary>Blending weight data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendWeight" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies the blend weights in fixed-function vertex processing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Depth">
      <summary>Vertex data contains depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Fog">
      <summary>Vertex data contains fog data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Fog" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.PointSize">
      <summary>Point size data. (<see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.PointSize" /> with <see cref="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex" /> = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
      <summary>Defines the window dimensions of a render-target surface onto which a 3D volume projects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates an instance of this object.</summary>
      <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" /> class.</summary>
      <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
      <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
      <param name="width">The width of the viewport in pixels.</param>
      <param name="height">The height of the viewport in pixels.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
      <summary>Gets the aspect ratio used by the viewport</summary>
      <returns>The aspect ratio of the viewport.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Bounds">
      <summary>Gets the size of this resource.</summary>
      <returns>A bounding-box rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
      <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The height, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
      <summary>Gets or sets the maximum depth of the clip volume.</summary>
      <returns>The maximum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
      <summary>Gets or sets the minimum depth of the clip volume.</summary>
      <returns>The minimum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
      <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The width, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
  </members>
</doc>